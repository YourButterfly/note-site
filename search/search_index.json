{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u968f\u7b14\u548c\u7b14\u8bb0 \u00b6 --to\u795e\u83b1 \u73af\u5883 \u00b6 os: linux 64\u4f4d tools: pip3 mkdocs mkdocs-material git language: python3 go \u00b6 python pip3 \u5b89\u88c5 \u00b6 \u7565 mkdocs mkdocs-material\u5b89\u88c5 \u00b6 sudo pip3 install mkdocs mkdocs-material mkdocs-material \u662f\u4e3b\u9898 mkdocs \u642d\u5efa \u00b6 git clone git clone https://github.com/YourButterfly/note-site.git \u89e3\u91ca\u4e00\u4e0b\u9879\u76ee\u76ee\u5f55 . \u251c\u2500\u2500 docs //md\u6587\u6863\uff0c\u7528\u6765\u5199\u7684 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 pdf \u2502 \u251c\u2500\u2500 introduce.md \u2502 \u2514\u2500\u2500 page-boxes.md \u251c\u2500\u2500 LICENSE //\u4e0d\u7528\u7ba1 \u2514\u2500\u2500 mkdocs.yml // mkdoc\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u90e8\u5206\u5df2\u7ecf\u5f04\u597d\u4e86 2 directories, 5 files \u4ecb\u7ecd\u4e00\u4e0bmkdocs\u547d\u4ee4 mkdocs -h Commands: build Build the MkDocs documentation\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 gh-deploy Deploy your documentation to GitHub Pages\uff0c\u63a8\u9001\u5230github\uff0c\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\uff0c\u76f4\u63a5\u7528\u2018mkdocs gh-deploy\u2019 new Create a new MkDocs project\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 serve Run the builtin development server\uff0c\u9884\u89c8\u9875\u9762 \u7f16\u5199\u6587\u6863 \u00b6 \u5199\u4e4b\u524dpull\u4e00\u4e0b\uff0c\u5728\u9879\u76ee\u4e3b\u76ee\u5f55\uff08note-site\uff09\u91cc git pull \uff0c\u9632\u6b62\u51b2\u7a81 \u5199 \u5728docs\u4e0b\u521b\u5efa\u76ee\u5f55\uff0c\u6bd4\u5982pdf\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b \u5728docs/pdf\u4e0b\u521b\u5efa\u4f60\u7684\u6587\u6863\uff0cmd\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u521b\u5efa\u76ee\u5f55\uff0c\u4f5c\u4e3a\u4f60\u7684tag \u914d\u7f6e \u914d\u7f6emkdocs.yml\uff0c\u914d\u7f6e\u89c1\u4e0b \u63a8\u9001 \u4fdd\u5b58\u4e00\u4e0b\u9879\u76eegit add\uff0cgit commit \uff0cgit push \u63a8\u9001\u5230gh-deploy\u5206\u652f\u4e0a\uff0c\u76f4\u63a5 mkdocs gh-deploy \u914d\u7f6emkdocs.yml \u7167\u7740\u52a0\u5c31\u884c nav: - \u9996\u9875: index.md - \u6587\u4ef6\u683c\u5f0f: - PDF: - \u7b80\u4ecb: pdf/introduce.md - PageBox: pdf/page-boxes.md \u9884\u89c8 mkdocs serve \u63a8\u9001 $ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/pwd/myMkDocs/first-project/site INFO - Copying '/home/pwd/myMkDocs/first-project/site' to 'gh-pages' branch and pushing to GitHub. Username for 'https://github.com' : yourbutterfly Password for 'https://yourbutterfly@github.com' : INFO - Your documentation should shortly be available at: https://YourButterfly.github.io/note-site/","title":"\u9996\u9875"},{"location":"#_1","text":"--to\u795e\u83b1","title":"\u968f\u7b14\u548c\u7b14\u8bb0"},{"location":"#_2","text":"os: linux 64\u4f4d tools: pip3 mkdocs mkdocs-material git language: python3","title":"\u73af\u5883"},{"location":"#go","text":"","title":"go"},{"location":"#python-pip3","text":"\u7565","title":"python pip3 \u5b89\u88c5"},{"location":"#mkdocs-mkdocs-material","text":"sudo pip3 install mkdocs mkdocs-material mkdocs-material \u662f\u4e3b\u9898","title":"mkdocs mkdocs-material\u5b89\u88c5"},{"location":"#mkdocs","text":"git clone git clone https://github.com/YourButterfly/note-site.git \u89e3\u91ca\u4e00\u4e0b\u9879\u76ee\u76ee\u5f55 . \u251c\u2500\u2500 docs //md\u6587\u6863\uff0c\u7528\u6765\u5199\u7684 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 pdf \u2502 \u251c\u2500\u2500 introduce.md \u2502 \u2514\u2500\u2500 page-boxes.md \u251c\u2500\u2500 LICENSE //\u4e0d\u7528\u7ba1 \u2514\u2500\u2500 mkdocs.yml // mkdoc\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u90e8\u5206\u5df2\u7ecf\u5f04\u597d\u4e86 2 directories, 5 files \u4ecb\u7ecd\u4e00\u4e0bmkdocs\u547d\u4ee4 mkdocs -h Commands: build Build the MkDocs documentation\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 gh-deploy Deploy your documentation to GitHub Pages\uff0c\u63a8\u9001\u5230github\uff0c\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\uff0c\u76f4\u63a5\u7528\u2018mkdocs gh-deploy\u2019 new Create a new MkDocs project\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 serve Run the builtin development server\uff0c\u9884\u89c8\u9875\u9762","title":"mkdocs \u642d\u5efa"},{"location":"#_3","text":"\u5199\u4e4b\u524dpull\u4e00\u4e0b\uff0c\u5728\u9879\u76ee\u4e3b\u76ee\u5f55\uff08note-site\uff09\u91cc git pull \uff0c\u9632\u6b62\u51b2\u7a81 \u5199 \u5728docs\u4e0b\u521b\u5efa\u76ee\u5f55\uff0c\u6bd4\u5982pdf\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b \u5728docs/pdf\u4e0b\u521b\u5efa\u4f60\u7684\u6587\u6863\uff0cmd\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u521b\u5efa\u76ee\u5f55\uff0c\u4f5c\u4e3a\u4f60\u7684tag \u914d\u7f6e \u914d\u7f6emkdocs.yml\uff0c\u914d\u7f6e\u89c1\u4e0b \u63a8\u9001 \u4fdd\u5b58\u4e00\u4e0b\u9879\u76eegit add\uff0cgit commit \uff0cgit push \u63a8\u9001\u5230gh-deploy\u5206\u652f\u4e0a\uff0c\u76f4\u63a5 mkdocs gh-deploy \u914d\u7f6emkdocs.yml \u7167\u7740\u52a0\u5c31\u884c nav: - \u9996\u9875: index.md - \u6587\u4ef6\u683c\u5f0f: - PDF: - \u7b80\u4ecb: pdf/introduce.md - PageBox: pdf/page-boxes.md \u9884\u89c8 mkdocs serve \u63a8\u9001 $ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/pwd/myMkDocs/first-project/site INFO - Copying '/home/pwd/myMkDocs/first-project/site' to 'gh-pages' branch and pushing to GitHub. Username for 'https://github.com' : yourbutterfly Password for 'https://yourbutterfly@github.com' : INFO - Your documentation should shortly be available at: https://YourButterfly.github.io/note-site/","title":"\u7f16\u5199\u6587\u6863"},{"location":"module/angr/cfg/","text":"CFG \u00b6 CFGEmulated a \u00b6","title":"CFG"},{"location":"module/angr/cfg/#cfg","text":"CFGEmulated","title":"CFG"},{"location":"module/angr/cfg/#a","text":"","title":"a"},{"location":"module/angr/ddg/","text":"DDG \u00b6 \u6570\u636e\u4f9d\u8d56\u56fe\u5206\u6790 \u6807\u9898\u6ca1\u60f3\u597d \u00b6 ddg.graph \u7684\u8282\u70b9\u662fCodeLocation object \"\"\" Constructor. :param int block_addr: \u5757\u5730\u5740 :param int stmt_idx: Statement ID. None for SimProcedures :param class sim_procedure: \u5bf9\u5e94\u7684 SimProcedure class. :param int ins_addr: \u6307\u4ee4\u5730\u5740. Optional. :param kwargs: \u5176\u4ed6\u53c2\u6570, will be stored, but not used in __eq__ or __hash__. \"\"\" < 0x40137b id = 0x40137b [ 3 ] > < $ ins_addr id = $ block_addr [ $ stmt_idx ] > class DDG(Analysis) \u00b6 This is a fast data dependence graph directly generated from our CFG analysis result. The only reason for its existence is the speed. There is zero guarantee for being sound or accurate. You are supposed to use it only when you want to track the simplest data dependence, and you do not care about soundness or accuracy. For a better data dependence graph, please consider performing a better static analysis first (like Value-set Analysis), and then construct a dependence graph on top of the analysis result (for example, the VFG in angr). Also note that since we are using states from CFG, any improvement in analysis performed on CFG (like a points-to analysis) will directly benefit the DDG. \u7c7bDDG__init__ \u00b6 __init__ ( self , cfg , start = None , call_depth = None , block_addrs = None ) \u76f8\u5173\u53c2\u6570 cfg: Control flow graph. Please make sure each node has an associated `state` with it. You may want to generate your CFG with `keep_state=True`.(cfg with state) start: An address, Specifies where we start the generation of this data dependence graph.(\u5206\u6790ddg\u7684\u8d77\u59cb\u5730\u5740) call_depth: None or integers. A non-negative integer specifies how deep we would like to track in the call tree. None disables call_depth limit.(\u8c03\u7528\u6df1\u5ea6\u9650\u5236) iterable or None block_addrs: A collection of block addresses that the DDG analysis should be performed on.(\u662f\u4ec0\u4e48\u518d\u8bf4) \u91cd\u8981\u53d8\u91cf # \u8f93\u5165\u7684\u53c2\u6570\u76f8\u5173 self . _cfg = cfg self . _start = self . project . entry if start is None else start self . _call_depth = call_depth self . _block_addrs = block_addrs # \u7ed3\u679c\u5b58\u50a8 self . _stmt_graph = networkx . DiGraph () self . _data_graph = networkx . DiGraph () self . _simplified_data_graph = None self . _ast_graph = networkx . DiGraph () # A mapping of ProgramVariable to ASTs self . _symbolic_mem_ops = set () # \u6bcf\u4e2a\u51fd\u6570\u7684\u6570\u636e\u4f9d\u8d56\u56fe self . _function_data_dependencies = None self . view = DDGView ( self . _cfg , self , simplified = False ) self . simple_view = DDGView ( self . _cfg , self , simplified = True ) # \u5176\u4ed6 Begin construction! self . _construct () \u6784\u9020_construct(self) \u00b6 \"\"\" Construct the data dependence graph. We track the following types of dependence: - (Intra-IRSB) temporary variable dependencies - \u5bc4\u5b58\u5668\u4f9d\u8d56 - \u5185\u5b58\u4f9d\u8d56, \u5c3d\u7ba1\u529f\u80fd\u53d7\u9650 \u8ffd\u8e2a\u4e00\u4e0b\u51e0\u79cd\u5185\u5b58\u4f9d\u8d56: - (Intra-functional) Stack read/write. Trace changes of stack pointers inside a function, and the dereferences of stack pointers. - (Inter-functional) Stack read/write. - (Global) Static memory positions. Keep a map of all accessible memory positions to their source statements per function. After that, we traverse the CFG and link each pair of reads/writes together in the order of control-flow. We do not track the following types of memory access - Symbolic memory access Well, they cannot be tracked under fastpath mode (which is the mode we are generating the CTF) anyways. \"\"\" \u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c # \u521d\u59cb\u5316worklist,\u8fd9\u4e00\u6b65\u5c06\u8981\u5206\u6790\u7684CFG node \u52a0\u5165worklist_set,\u5c06DDGJob \u52a0\u5165worklist if self . _start is None : # initial nodes are those nodes in CFG that has no in-degrees for n in self . _cfg . graph . nodes (): if self . _cfg . graph . in_degree ( n ) == 0 : # Put it into the worklist job = DDGJob ( n , 0 ) self . _worklist_append ( job , worklist , worklist_set ) else : for n in self . _cfg . get_all_nodes ( self . _start ): job = DDGJob ( n , 0 ) self . _worklist_append ( job , worklist , worklist_set ) \"\"\" \u589e\u52a0\u4e00\u4e2aCFGNode \u548c\u5b83\u7684\u540e\u7ee7Node\u5230work-list,\u8fd9\u91cc\u540c\u6837\u8981\u6ee1\u8db3call-depth\u7684\u9650\u5236 :param node_wrapper: The NodeWrapper instance to insert.DDGJob :param worklist: The work-list, which is a list. :param worklist_set: A set of all CFGNodes that are inside the work-list, \u4e3a\u4e86\u52a0\u901f\u67e5\u627e. It will be updated as well. :returns: A set of newly-inserted CFGNodes (not NodeWrapper instances). # # worklist.append(node_wrapper)\u3000DDGJob\u7684\u5b9e\u4f8b worklist_set.add(node_wrapper.cfg_node)\u3000\u6dfb\u52a0\u7684\u662fcfg\u3000node \"\"\" \u5f00\u59cb\u5faa\u73af\u5904\u7406 \u5206\u6790\u7684\u5bf9\u8c61\u662f\u6bcf\u4e2aCFGJob\uff0cCFGJob\u662fnode\u548ccall deepth\u7684\u5c01\u88c5\uff0c\u64cd\u4f5c\u7684\u662fnode\u7684final state\uff0ccall deepth\u7528\u4f5c\u9650\u5236\u5206\u6790\u7684\u6df1\u5ea6 live_defs_per_node = {} while worklist : # pop \u4e00\u4e2a\u8282\u70b9 ddg_job = worklist [ 0 ] l . debug ( \"Processing %s .\" , ddg_job ) node , call_depth = ddg_job . cfg_node , ddg_job . call_depth worklist = worklist [ 1 : ] worklist_set . remove ( node ) # \u6293\u53d6\u6240\u6709\u7684 final states. \u901a\u5e38\u8d85\u8fc7\u4e00\u4e2a (\u5bf9\u6bcf\u4e00\u4e2a successor\u3000\u90fd\u6709\u4e00\u4e2astate), \u5e76\u5904\u7406\u5b83\u4eec # process all of them final_states = node . final_states #\u4e3a\u6bcf\u4e2a\u8282\u70b9\u521b\u5efalivedefinition\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u521d\u6b65\u5224\u5b9a\u8868\u793a\u751f\u547d\u5468\u671f\u7684\u6570\u636e\u5b9a\u4e49 if node in live_defs_per_node : live_defs = live_defs_per_node [ node ] else : live_defs = LiveDefinitions () live_defs_per_node [ node ] = live_defs successing_nodes = list ( self . _cfg . graph . successors ( node )) # \u5c1d\u8bd5\u628a\u6bcf\u4e2afinal state\u5206\u914d\u7ed9\u5bf9\u5e94\u7684\u540e\u7ee7node\uff0c\u53cd\u4e4b\u4ea6\u7136 match_suc = defaultdict ( bool ) match_state = defaultdict ( set ) for suc in successing_nodes : matched = False for state in final_states : try : if state . solver . eval ( state . ip ) == suc . addr : \u3000 # \u5224\u65ad\u8fd9\u4e2astate\u7684\u8df3\u8f6c\u5730\u5740\u662f\u5426\u662f\u540e\u7ee7node\u7684\u5730\u5740 match_suc [ suc . addr ] = True match_state [ state ] . add ( suc ) matched = True except ( SimUnsatError , SimSolverModeError , ZeroDivisionError ): # ignore matched = matched if not matched : break # \u67e5\u770b\u662f\u5426\u6240\u6709\u7684final state\u90fd\u627e\u5230\u4e86\u5b83\u7684\u540e\u7ee7node,\u4ee5\u53ca\u540e\u7ee7node\u90fd\u6709final state matches = len ( match_suc ) == len ( successing_nodes ) and len ( match_state ) == len ( final_states ) for state in final_states : if not matches and state . history . jumpkind == 'Ijk_FakeRet' and len ( final_states ) > 1 : # Skip fakerets if there are other control flow transitions available continue new_call_depth = call_depth if state . history . jumpkind == 'Ijk_Call' : new_call_depth += 1 elif state . history . jumpkind == 'Ijk_Ret' : new_call_depth -= 1 if self . _call_depth is not None and call_depth > self . _call_depth : l . debug ( 'Do not trace into %s due to the call depth limit' , state . ip ) continue new_defs = self . _track ( state , live_defs , node . irsb . statements if node . irsb is not None else None ) #corresponding_successors = [n for n in successing_nodes if # not state.ip.symbolic and n.addr == state.solver.eval(state.ip)] #if not corresponding_successors: # continue changed = False # if every successor can be matched with one or more final states (by IP address), # only take over the LiveDefinition of matching states if matches : add_state_to_sucs = match_state [ state ] else : add_state_to_sucs = successing_nodes for successing_node in add_state_to_sucs : if ( state . history . jumpkind == 'Ijk_Call' or state . history . jumpkind . startswith ( 'Ijk_Sys' )) and \\ ( state . ip . symbolic or successing_node . addr != state . solver . eval ( state . ip )): suc_new_defs = self . _filter_defs_at_call_sites ( new_defs ) else : suc_new_defs = new_defs if successing_node in live_defs_per_node : defs_for_next_node = live_defs_per_node [ successing_node ] else : defs_for_next_node = LiveDefinitions () live_defs_per_node [ successing_node ] = defs_for_next_node for var , code_loc_set in suc_new_defs . items (): # l.debug(\"Adding %d new definitions for variable %s.\", len(code_loc_set), var) changed |= defs_for_next_node . add_defs ( var , code_loc_set ) if changed : if ( self . _call_depth is None ) or \\ ( self . _call_depth is not None and 0 <= new_call_depth <= self . _call_depth ): # Put all reachable successors back to our work-list again for successor in self . _cfg . get_all_successors ( node ): nw = DDGJob ( successor , new_call_depth ) self . _worklist_append ( nw , worklist , worklist_set ) Variable <|Reg 16, 8B> class SimRegisterVariable ( SimVariable ): __slots__ = [ 'reg' , 'size' , '_hash' ] def __init__ ( self , reg_offset , size , ident = None , name = None , region = None , category = None ): SimVariable . __init__ ( self , ident = ident , name = name , region = region , category = category ) self . reg = reg_offset self . size = size self . _hash = None def __repr__ ( self ): ident_str = \"[ %s ]\" % self . ident if self . ident else \"\" region_str = hex ( self . region ) if isinstance ( self . region , int ) else self . region s = \"< %s%s |Reg %s , %s B>\" % ( region_str , ident_str , self . reg , self . size ) return s def __hash__ ( self ): if self . _hash is None : self . _hash = hash (( 'reg' , self . region , self . reg , self . size , self . ident )) return self . _hash def __eq__ ( self , other ): if isinstance ( other , SimRegisterVariable ): return self . ident == other . ident and \\ self . reg == other . reg and \\ self . size == other . size and \\ self . region == other . region return False class SimVariable : __slots__ = [ 'ident' , 'name' , 'region' , 'category' ] def __init__ ( self , ident = None , name = None , region = None , category = None ): \"\"\" :param ident: A unique identifier provided by user or the program. Usually a string. :param str name: Name of this variable. \"\"\" self . ident = ident self . name = name self . region = region if region is not None else \"\" self . category = category","title":"DDG"},{"location":"module/angr/ddg/#ddg","text":"\u6570\u636e\u4f9d\u8d56\u56fe\u5206\u6790","title":"DDG"},{"location":"module/angr/ddg/#_1","text":"ddg.graph \u7684\u8282\u70b9\u662fCodeLocation object \"\"\" Constructor. :param int block_addr: \u5757\u5730\u5740 :param int stmt_idx: Statement ID. None for SimProcedures :param class sim_procedure: \u5bf9\u5e94\u7684 SimProcedure class. :param int ins_addr: \u6307\u4ee4\u5730\u5740. Optional. :param kwargs: \u5176\u4ed6\u53c2\u6570, will be stored, but not used in __eq__ or __hash__. \"\"\" < 0x40137b id = 0x40137b [ 3 ] > < $ ins_addr id = $ block_addr [ $ stmt_idx ] >","title":"\u6807\u9898\u6ca1\u60f3\u597d"},{"location":"module/angr/ddg/#class-ddganalysis","text":"This is a fast data dependence graph directly generated from our CFG analysis result. The only reason for its existence is the speed. There is zero guarantee for being sound or accurate. You are supposed to use it only when you want to track the simplest data dependence, and you do not care about soundness or accuracy. For a better data dependence graph, please consider performing a better static analysis first (like Value-set Analysis), and then construct a dependence graph on top of the analysis result (for example, the VFG in angr). Also note that since we are using states from CFG, any improvement in analysis performed on CFG (like a points-to analysis) will directly benefit the DDG.","title":"class DDG(Analysis)"},{"location":"module/angr/ddg/#ddg9595init9595","text":"__init__ ( self , cfg , start = None , call_depth = None , block_addrs = None ) \u76f8\u5173\u53c2\u6570 cfg: Control flow graph. Please make sure each node has an associated `state` with it. You may want to generate your CFG with `keep_state=True`.(cfg with state) start: An address, Specifies where we start the generation of this data dependence graph.(\u5206\u6790ddg\u7684\u8d77\u59cb\u5730\u5740) call_depth: None or integers. A non-negative integer specifies how deep we would like to track in the call tree. None disables call_depth limit.(\u8c03\u7528\u6df1\u5ea6\u9650\u5236) iterable or None block_addrs: A collection of block addresses that the DDG analysis should be performed on.(\u662f\u4ec0\u4e48\u518d\u8bf4) \u91cd\u8981\u53d8\u91cf # \u8f93\u5165\u7684\u53c2\u6570\u76f8\u5173 self . _cfg = cfg self . _start = self . project . entry if start is None else start self . _call_depth = call_depth self . _block_addrs = block_addrs # \u7ed3\u679c\u5b58\u50a8 self . _stmt_graph = networkx . DiGraph () self . _data_graph = networkx . DiGraph () self . _simplified_data_graph = None self . _ast_graph = networkx . DiGraph () # A mapping of ProgramVariable to ASTs self . _symbolic_mem_ops = set () # \u6bcf\u4e2a\u51fd\u6570\u7684\u6570\u636e\u4f9d\u8d56\u56fe self . _function_data_dependencies = None self . view = DDGView ( self . _cfg , self , simplified = False ) self . simple_view = DDGView ( self . _cfg , self , simplified = True ) # \u5176\u4ed6 Begin construction! self . _construct ()","title":"\u7c7bDDG__init__"},{"location":"module/angr/ddg/#95constructself","text":"\"\"\" Construct the data dependence graph. We track the following types of dependence: - (Intra-IRSB) temporary variable dependencies - \u5bc4\u5b58\u5668\u4f9d\u8d56 - \u5185\u5b58\u4f9d\u8d56, \u5c3d\u7ba1\u529f\u80fd\u53d7\u9650 \u8ffd\u8e2a\u4e00\u4e0b\u51e0\u79cd\u5185\u5b58\u4f9d\u8d56: - (Intra-functional) Stack read/write. Trace changes of stack pointers inside a function, and the dereferences of stack pointers. - (Inter-functional) Stack read/write. - (Global) Static memory positions. Keep a map of all accessible memory positions to their source statements per function. After that, we traverse the CFG and link each pair of reads/writes together in the order of control-flow. We do not track the following types of memory access - Symbolic memory access Well, they cannot be tracked under fastpath mode (which is the mode we are generating the CTF) anyways. \"\"\" \u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c # \u521d\u59cb\u5316worklist,\u8fd9\u4e00\u6b65\u5c06\u8981\u5206\u6790\u7684CFG node \u52a0\u5165worklist_set,\u5c06DDGJob \u52a0\u5165worklist if self . _start is None : # initial nodes are those nodes in CFG that has no in-degrees for n in self . _cfg . graph . nodes (): if self . _cfg . graph . in_degree ( n ) == 0 : # Put it into the worklist job = DDGJob ( n , 0 ) self . _worklist_append ( job , worklist , worklist_set ) else : for n in self . _cfg . get_all_nodes ( self . _start ): job = DDGJob ( n , 0 ) self . _worklist_append ( job , worklist , worklist_set ) \"\"\" \u589e\u52a0\u4e00\u4e2aCFGNode \u548c\u5b83\u7684\u540e\u7ee7Node\u5230work-list,\u8fd9\u91cc\u540c\u6837\u8981\u6ee1\u8db3call-depth\u7684\u9650\u5236 :param node_wrapper: The NodeWrapper instance to insert.DDGJob :param worklist: The work-list, which is a list. :param worklist_set: A set of all CFGNodes that are inside the work-list, \u4e3a\u4e86\u52a0\u901f\u67e5\u627e. It will be updated as well. :returns: A set of newly-inserted CFGNodes (not NodeWrapper instances). # # worklist.append(node_wrapper)\u3000DDGJob\u7684\u5b9e\u4f8b worklist_set.add(node_wrapper.cfg_node)\u3000\u6dfb\u52a0\u7684\u662fcfg\u3000node \"\"\" \u5f00\u59cb\u5faa\u73af\u5904\u7406 \u5206\u6790\u7684\u5bf9\u8c61\u662f\u6bcf\u4e2aCFGJob\uff0cCFGJob\u662fnode\u548ccall deepth\u7684\u5c01\u88c5\uff0c\u64cd\u4f5c\u7684\u662fnode\u7684final state\uff0ccall deepth\u7528\u4f5c\u9650\u5236\u5206\u6790\u7684\u6df1\u5ea6 live_defs_per_node = {} while worklist : # pop \u4e00\u4e2a\u8282\u70b9 ddg_job = worklist [ 0 ] l . debug ( \"Processing %s .\" , ddg_job ) node , call_depth = ddg_job . cfg_node , ddg_job . call_depth worklist = worklist [ 1 : ] worklist_set . remove ( node ) # \u6293\u53d6\u6240\u6709\u7684 final states. \u901a\u5e38\u8d85\u8fc7\u4e00\u4e2a (\u5bf9\u6bcf\u4e00\u4e2a successor\u3000\u90fd\u6709\u4e00\u4e2astate), \u5e76\u5904\u7406\u5b83\u4eec # process all of them final_states = node . final_states #\u4e3a\u6bcf\u4e2a\u8282\u70b9\u521b\u5efalivedefinition\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u521d\u6b65\u5224\u5b9a\u8868\u793a\u751f\u547d\u5468\u671f\u7684\u6570\u636e\u5b9a\u4e49 if node in live_defs_per_node : live_defs = live_defs_per_node [ node ] else : live_defs = LiveDefinitions () live_defs_per_node [ node ] = live_defs successing_nodes = list ( self . _cfg . graph . successors ( node )) # \u5c1d\u8bd5\u628a\u6bcf\u4e2afinal state\u5206\u914d\u7ed9\u5bf9\u5e94\u7684\u540e\u7ee7node\uff0c\u53cd\u4e4b\u4ea6\u7136 match_suc = defaultdict ( bool ) match_state = defaultdict ( set ) for suc in successing_nodes : matched = False for state in final_states : try : if state . solver . eval ( state . ip ) == suc . addr : \u3000 # \u5224\u65ad\u8fd9\u4e2astate\u7684\u8df3\u8f6c\u5730\u5740\u662f\u5426\u662f\u540e\u7ee7node\u7684\u5730\u5740 match_suc [ suc . addr ] = True match_state [ state ] . add ( suc ) matched = True except ( SimUnsatError , SimSolverModeError , ZeroDivisionError ): # ignore matched = matched if not matched : break # \u67e5\u770b\u662f\u5426\u6240\u6709\u7684final state\u90fd\u627e\u5230\u4e86\u5b83\u7684\u540e\u7ee7node,\u4ee5\u53ca\u540e\u7ee7node\u90fd\u6709final state matches = len ( match_suc ) == len ( successing_nodes ) and len ( match_state ) == len ( final_states ) for state in final_states : if not matches and state . history . jumpkind == 'Ijk_FakeRet' and len ( final_states ) > 1 : # Skip fakerets if there are other control flow transitions available continue new_call_depth = call_depth if state . history . jumpkind == 'Ijk_Call' : new_call_depth += 1 elif state . history . jumpkind == 'Ijk_Ret' : new_call_depth -= 1 if self . _call_depth is not None and call_depth > self . _call_depth : l . debug ( 'Do not trace into %s due to the call depth limit' , state . ip ) continue new_defs = self . _track ( state , live_defs , node . irsb . statements if node . irsb is not None else None ) #corresponding_successors = [n for n in successing_nodes if # not state.ip.symbolic and n.addr == state.solver.eval(state.ip)] #if not corresponding_successors: # continue changed = False # if every successor can be matched with one or more final states (by IP address), # only take over the LiveDefinition of matching states if matches : add_state_to_sucs = match_state [ state ] else : add_state_to_sucs = successing_nodes for successing_node in add_state_to_sucs : if ( state . history . jumpkind == 'Ijk_Call' or state . history . jumpkind . startswith ( 'Ijk_Sys' )) and \\ ( state . ip . symbolic or successing_node . addr != state . solver . eval ( state . ip )): suc_new_defs = self . _filter_defs_at_call_sites ( new_defs ) else : suc_new_defs = new_defs if successing_node in live_defs_per_node : defs_for_next_node = live_defs_per_node [ successing_node ] else : defs_for_next_node = LiveDefinitions () live_defs_per_node [ successing_node ] = defs_for_next_node for var , code_loc_set in suc_new_defs . items (): # l.debug(\"Adding %d new definitions for variable %s.\", len(code_loc_set), var) changed |= defs_for_next_node . add_defs ( var , code_loc_set ) if changed : if ( self . _call_depth is None ) or \\ ( self . _call_depth is not None and 0 <= new_call_depth <= self . _call_depth ): # Put all reachable successors back to our work-list again for successor in self . _cfg . get_all_successors ( node ): nw = DDGJob ( successor , new_call_depth ) self . _worklist_append ( nw , worklist , worklist_set ) Variable <|Reg 16, 8B> class SimRegisterVariable ( SimVariable ): __slots__ = [ 'reg' , 'size' , '_hash' ] def __init__ ( self , reg_offset , size , ident = None , name = None , region = None , category = None ): SimVariable . __init__ ( self , ident = ident , name = name , region = region , category = category ) self . reg = reg_offset self . size = size self . _hash = None def __repr__ ( self ): ident_str = \"[ %s ]\" % self . ident if self . ident else \"\" region_str = hex ( self . region ) if isinstance ( self . region , int ) else self . region s = \"< %s%s |Reg %s , %s B>\" % ( region_str , ident_str , self . reg , self . size ) return s def __hash__ ( self ): if self . _hash is None : self . _hash = hash (( 'reg' , self . region , self . reg , self . size , self . ident )) return self . _hash def __eq__ ( self , other ): if isinstance ( other , SimRegisterVariable ): return self . ident == other . ident and \\ self . reg == other . reg and \\ self . size == other . size and \\ self . region == other . region return False class SimVariable : __slots__ = [ 'ident' , 'name' , 'region' , 'category' ] def __init__ ( self , ident = None , name = None , region = None , category = None ): \"\"\" :param ident: A unique identifier provided by user or the program. Usually a string. :param str name: Name of this variable. \"\"\" self . ident = ident self . name = name self . region = region if region is not None else \"\" self . category = category","title":"\u6784\u9020_construct(self)"},{"location":"module/angr/fast-question/","text":"fast question \u00b6 angr.Project\u3000\u5bf9\u8c61\u5982\u4f55\u62ff\u5230\u5e26\u7b26\u53f7\u51fd\u6570\u7684\u5730\u5740 \u00b6 None angr CFG\u3000\u526a\u679d \u00b6 None \u83b7\u53d6\u3000cmp, strcmp\u7b49\u7684\u786c\u7f16\u7801\u5b57\u7b26\u4e32 \u00b6 None \u7b26\u53f7\u5316\u547d\u4ee4\u884c\u53c2\u6570 \u00b6 proj = angr . Project ( bin_path , load_options = { 'auto_load_libs' : False }, default_analysis_mode = 'symbolic' ) argv = [ proj . filename ] for i in range ( \u53c2\u6570\u4e2a\u6570 ): argv . append ( claripy . BVS ( 'arg %d ' % ( i + 1 ), \u5b57\u8282\u6570 * 8 )) state = proj . factory . entry_state ( args = argv )","title":"fast-questions"},{"location":"module/angr/fast-question/#fast-question","text":"","title":"fast question"},{"location":"module/angr/fast-question/#angrproject","text":"None","title":"angr.Project\u3000\u5bf9\u8c61\u5982\u4f55\u62ff\u5230\u5e26\u7b26\u53f7\u51fd\u6570\u7684\u5730\u5740"},{"location":"module/angr/fast-question/#angr-cfg","text":"None","title":"angr CFG\u3000\u526a\u679d"},{"location":"module/angr/fast-question/#cmp-strcmp","text":"None","title":"\u83b7\u53d6\u3000cmp, strcmp\u7b49\u7684\u786c\u7f16\u7801\u5b57\u7b26\u4e32"},{"location":"module/angr/fast-question/#_1","text":"proj = angr . Project ( bin_path , load_options = { 'auto_load_libs' : False }, default_analysis_mode = 'symbolic' ) argv = [ proj . filename ] for i in range ( \u53c2\u6570\u4e2a\u6570 ): argv . append ( claripy . BVS ( 'arg %d ' % ( i + 1 ), \u5b57\u8282\u6570 * 8 )) state = proj . factory . entry_state ( args = argv )","title":"\u7b26\u53f7\u5316\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"module/angr/introduce/","text":"angr \u00b6 introduce \u00b6 angr is a python framework for analyzing binaries. It combines both static and dynamic symbolic (\"concolic\") analysis, making it applicable to a variety of tasks.","title":"angr-introduce"},{"location":"module/angr/introduce/#angr","text":"","title":"angr"},{"location":"module/angr/introduce/#introduce","text":"angr is a python framework for analyzing binaries. It combines both static and dynamic symbolic (\"concolic\") analysis, making it applicable to a variety of tasks.","title":"introduce"},{"location":"module/angr/program-state/","text":"Program State \u00b6 State Plugins \u00b6 history plugin \u00b6 It is actually a linked list of several history nodes, each one representing a single round of execution---you can traverse this list with state.history.parent.parent etc. In general, these values are stored as history.recent_NAME and the iterator over them is just history.NAME. For example, for addr in state.history.bbl_addrs: print hex(addr) will print out a basic block address trace for the binary, while state.history.recent_bbl_addrs is the list of basic blocks executed in the most recent step(\u6700\u8fd1\u7684\u4e00\u6b65\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5417), state.history.parent.recent_bbl_addrs is the list of basic blocks executed in the previous step, etc. If you ever need to quickly obtain a flat list of these values, you can access .hardcopy, e.g. state.history.bbl_addrs.hardcopy. Keep in mind though, index-based accessing is implemented on the interators. for addr in state . history . bbl_addrs : print ( hex ( addr )) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ \"\"\" for addr in state . history . recent_bbl_addrs : print ( hex ( addr )) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x401b36 ------------------------------------ 0x401b36 ------------------------------------ \"\"\" print ( state . history . bbl_addrs . hardcopy ) \"\"\" ... [4199291, 4199392, 4199405, 4199426, 4199467, 4199495, 4199507, 4199560, 4199607, 4201284, 4199619, 4199660, 4199676, 4199717, 4199733, 4199774, 4199790, 4199831, 4199847, 4199888, 4199904,4199945, 4199961, 4200002, 4200018, 4200059, 4200075, 4200116, 4200132, 4200173, 4200189, 4200230, 4200246, 4200287, 4200303, 4200344, 4200360, 4200401, 4200417, 4200458, 4200474, 4200515, 4200531, 4200572, 4200588, 4200629, 4200645, 4200686, 4200702, 4200743, 4200759, 4200800, 4200816, 4200857, 4200945, 4200986, 4201002, 4201043, 4201059, 4201100, 4201116, 4201157, 4201170, 4201211, 4201224, 4201270] \"\"\" history.descriptions is a listing of string descriptions of each of the rounds of execution performed on the state. history.bbl_addrs \u8fd9\u4e2astate\u6267\u884c\u8fc7\u7684\u57fa\u672c\u5757\u7684\u5730\u5740\u7684\u6709\u5e8f\u5217\u8868. There may be more than one per round of execution, and not all addresses may correspond to binary code - some may be addresses at which SimProcedures are hooked. history.jumpkinds \u5728state\u7684history\u4e2d\u6bcf\u4e2a\u63a7\u5236\u6d41\u8f6c\u53d8\u5904\u7406\u7684\u6709\u5e8f\u5217\u8868, as VEX enum strings. history.guards is a listing of the conditions guarding each of the branches that the state has encountered. history.events is a semantic listing of \"interesting events\" which happened during execution, such as the presence of a symbolic jump condition, the program popping up a message box, or execution terminating with an exit code. history.actions \u901a\u5e38\u4e3a\u7a7a, \u4f46\u5982\u679c\u4f60\u589e\u52a0\u4e86 angr.options.refs \u9009\u9879\u7ed9 state, \u5b83\u7684\u5185\u5bb9\u662f log of all the memory, register, and temporary value accesses performed by the program. for i in state . history . descriptions : print ( i ) \"\"\" --------------------------- <IRSB from 0x40137b: 1 sat 1 unsat> ... <IRSB from 0x401afb: 2 sat> <IRSB from 0x401b08: 1 sat 1 unsat> <IRSB from 0x401b36: 1 sat 1 unsat> --------------------------- \"\"\" for i in state . history . actions : print ( i ) \"\"\" --------------------------- \u5f88\u591a\u5f88\u957f ... <SimActionData 0x401b36:8 tmp/write> <SimActionExit 0x401b36:10 default> <SimActionConstraint 0x401b36:10 <SAO <Bool True>>> <SimActionConstraint 0x401b36:10 <SAO <Bool False>>> --------------------------- \"\"\" for i in state . history . jumpkinds : print ( i ) print ( \"---------------------------\" ) print ( state . history . jumpkind ) \"\"\" ... Ijk_Boring Ijk_FakeRet Ijk_Call --------------------------- Ijk_Call \"\"\"","title":"program-state"},{"location":"module/angr/program-state/#program-state","text":"","title":"Program State"},{"location":"module/angr/program-state/#state-plugins","text":"","title":"State Plugins"},{"location":"module/angr/program-state/#history-plugin","text":"It is actually a linked list of several history nodes, each one representing a single round of execution---you can traverse this list with state.history.parent.parent etc. In general, these values are stored as history.recent_NAME and the iterator over them is just history.NAME. For example, for addr in state.history.bbl_addrs: print hex(addr) will print out a basic block address trace for the binary, while state.history.recent_bbl_addrs is the list of basic blocks executed in the most recent step(\u6700\u8fd1\u7684\u4e00\u6b65\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5417), state.history.parent.recent_bbl_addrs is the list of basic blocks executed in the previous step, etc. If you ever need to quickly obtain a flat list of these values, you can access .hardcopy, e.g. state.history.bbl_addrs.hardcopy. Keep in mind though, index-based accessing is implemented on the interators. for addr in state . history . bbl_addrs : print ( hex ( addr )) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ \"\"\" for addr in state . history . recent_bbl_addrs : print ( hex ( addr )) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x401b36 ------------------------------------ 0x401b36 ------------------------------------ \"\"\" print ( state . history . bbl_addrs . hardcopy ) \"\"\" ... [4199291, 4199392, 4199405, 4199426, 4199467, 4199495, 4199507, 4199560, 4199607, 4201284, 4199619, 4199660, 4199676, 4199717, 4199733, 4199774, 4199790, 4199831, 4199847, 4199888, 4199904,4199945, 4199961, 4200002, 4200018, 4200059, 4200075, 4200116, 4200132, 4200173, 4200189, 4200230, 4200246, 4200287, 4200303, 4200344, 4200360, 4200401, 4200417, 4200458, 4200474, 4200515, 4200531, 4200572, 4200588, 4200629, 4200645, 4200686, 4200702, 4200743, 4200759, 4200800, 4200816, 4200857, 4200945, 4200986, 4201002, 4201043, 4201059, 4201100, 4201116, 4201157, 4201170, 4201211, 4201224, 4201270] \"\"\" history.descriptions is a listing of string descriptions of each of the rounds of execution performed on the state. history.bbl_addrs \u8fd9\u4e2astate\u6267\u884c\u8fc7\u7684\u57fa\u672c\u5757\u7684\u5730\u5740\u7684\u6709\u5e8f\u5217\u8868. There may be more than one per round of execution, and not all addresses may correspond to binary code - some may be addresses at which SimProcedures are hooked. history.jumpkinds \u5728state\u7684history\u4e2d\u6bcf\u4e2a\u63a7\u5236\u6d41\u8f6c\u53d8\u5904\u7406\u7684\u6709\u5e8f\u5217\u8868, as VEX enum strings. history.guards is a listing of the conditions guarding each of the branches that the state has encountered. history.events is a semantic listing of \"interesting events\" which happened during execution, such as the presence of a symbolic jump condition, the program popping up a message box, or execution terminating with an exit code. history.actions \u901a\u5e38\u4e3a\u7a7a, \u4f46\u5982\u679c\u4f60\u589e\u52a0\u4e86 angr.options.refs \u9009\u9879\u7ed9 state, \u5b83\u7684\u5185\u5bb9\u662f log of all the memory, register, and temporary value accesses performed by the program. for i in state . history . descriptions : print ( i ) \"\"\" --------------------------- <IRSB from 0x40137b: 1 sat 1 unsat> ... <IRSB from 0x401afb: 2 sat> <IRSB from 0x401b08: 1 sat 1 unsat> <IRSB from 0x401b36: 1 sat 1 unsat> --------------------------- \"\"\" for i in state . history . actions : print ( i ) \"\"\" --------------------------- \u5f88\u591a\u5f88\u957f ... <SimActionData 0x401b36:8 tmp/write> <SimActionExit 0x401b36:10 default> <SimActionConstraint 0x401b36:10 <SAO <Bool True>>> <SimActionConstraint 0x401b36:10 <SAO <Bool False>>> --------------------------- \"\"\" for i in state . history . jumpkinds : print ( i ) print ( \"---------------------------\" ) print ( state . history . jumpkind ) \"\"\" ... Ijk_Boring Ijk_FakeRet Ijk_Call --------------------------- Ijk_Call \"\"\"","title":"history plugin"},{"location":"module/angr/sim_action/","text":"SimAction \u00b6 SimActionExit SimActionConstraint SimActionOperation SimActionData # This module contains data structures for handling memory, code, and register references. import logging l = logging . getLogger ( name = __name__ ) _noneset = frozenset () from .sim_event import SimEvent class SimAction ( SimEvent ): \"\"\" A SimAction represents a semantic action that an analyzed program performs. \"\"\" #__slots__ = [ 'bbl_addr', 'inst_addr', 'stmt_idx' ] TMP = 'tmp' REG = 'reg' MEM = 'mem' _MAX_ACTION_ID = - 1 def __init__ ( self , state , region_type ): \"\"\" Initializes the SimAction. :param state: the state that's the SimAction is taking place in. \"\"\" SimEvent . __init__ ( self , state , 'action' ) self . type = region_type SimAction . _MAX_ACTION_ID += 1 self . _action_id = SimAction . _MAX_ACTION_ID def __repr__ ( self ): if self . sim_procedure is not None : location = \" %s ()\" % self . sim_procedure . display_name else : if self . stmt_idx is not None : location = \"0x %x : %d \" % ( self . bbl_addr , self . stmt_idx ) else : location = \"0x %x \" % self . bbl_addr return \"< %s %s %s >\" % ( self . __class__ . __name__ , location , self . _desc ()) def _desc ( self ): raise NotImplementedError () #def __getstate__(self): # return { k: getattr(self, k) for k in sum([ c.__slots__ for c in self.__class__.mro() if hasattr(c, '__slots__')], []) } #pylint:disable=no-member #def __setstate__(self, s): # for k,v in s.items(): # setattr(self, k, v) @staticmethod def _make_object ( v ): if v is None : return None elif isinstance ( v , SimActionObject ): return v else : return SimActionObject ( v , reg_deps = None , tmp_deps = None ) @staticmethod def _copy_object ( v ): if isinstance ( v , SimActionObject ): return v . copy () else : return None @property def all_objects ( self ): raise NotImplementedError () @property def tmp_deps ( self ): return frozenset . union ( * [ v . tmp_deps for v in self . all_objects ]) @property def reg_deps ( self ): return frozenset . union ( * [ v . reg_deps for v in self . all_objects ]) def _copy_objects ( self , c ): raise NotImplementedError () def copy ( self ): c = self . _copy_event () self . _copy_objects ( c ) return c def downsize ( self ): \"\"\" Clears some low-level details (that take up memory) out of the SimAction. \"\"\" pass class SimActionExit ( SimAction ): \"\"\" An Exit action represents a (possibly conditional) jump. \"\"\" CONDITIONAL = 'conditional' DEFAULT = 'default' def __init__ ( self , state , target , condition = None , exit_type = None ): super ( SimActionExit , self ) . __init__ ( state , \"exit\" ) if exit_type is not None : self . exit_type = exit_type elif condition is None : self . exit_type = SimActionExit . CONDITIONAL else : self . exit_type = SimActionExit . DEFAULT self . target = self . _make_object ( target ) self . condition = self . _make_object ( condition ) def _desc ( self ): return self . exit_type @property def all_objects ( self ): return [ a for a in ( self . target , self . condition ) if a is not None ] def _copy_objects ( self , c ): c . exit_type = self . exit_type c . target = self . _copy_object ( self . target ) c . condition = self . _copy_object ( self . condition ) class SimActionConstraint ( SimAction ): \"\"\" A constraint action represents an extra constraint added during execution of a path. \"\"\" def __init__ ( self , state , constraint , condition = None ): super ( SimActionConstraint , self ) . __init__ ( state , \"constraint\" ) self . constraint = self . _make_object ( constraint ) self . condition = self . _make_object ( condition ) @property def all_objects ( self ): return [ a for a in ( self . constraint , self . condition ) if a is not None ] def _copy_objects ( self , c ): c . constraint = self . _copy_object ( self . constraint ) c . condition = self . _copy_object ( self . condition ) def _desc ( self ): s = ' %s ' % str ( self . constraint ) if self . condition is not None : s += ' (cond)' return s class SimActionOperation ( SimAction ): \"\"\" An action representing an operation between variables and/or constants. \"\"\" def __init__ ( self , state , op , exprs , result ): super ( SimActionOperation , self ) . __init__ ( state , 'operation' ) self . op = op self . exprs = exprs self . result = result @property def all_objects ( self ): return [ ex for ex in self . exprs if isinstance ( ex , SimActionObject ) ] def _copy_objects ( self , c ): c . op = self . op c . exprs = self . exprs [::] c . result = self . result def _desc ( self ): return \"operation/ %s \" % ( self . op ) class SimActionData ( SimAction ): \"\"\" A Data action represents a read or a write from memory, registers or a file. \"\"\" #__slots__ = [ 'objects' ] READ = 'read' WRITE = 'write' OPERATE = 'operate' def __init__ ( self , state , region_type , action , tmp = None , addr = None , size = None , data = None , condition = None , fallback = None , fd = None ): super ( SimActionData , self ) . __init__ ( state , region_type ) self . action = action self . _reg_dep = _noneset if addr is None or action != SimActionData . READ or not isinstance ( addr , int ) else frozenset (( addr ,)) self . _tmp_dep = _noneset if tmp is None or action != SimActionData . READ else frozenset (( tmp ,)) self . tmp = tmp self . offset = None if region_type == 'reg' : if isinstance ( addr , int ): self . offset = addr else : if addr . symbolic : # FIXME: we should fix it by allowing .offset taking ASTs instead of concretizing it right away l . warning ( 'Concretizing a symbolic register offset in SimActionData.' ) self . offset = state . solver . eval ( addr ) else : # it's not symbolic self . offset = state . solver . eval_one ( addr ) self . addr = self . _make_object ( addr ) self . size = self . _make_object ( size ) self . data = self . _make_object ( data ) self . condition = self . _make_object ( condition ) self . fallback = self . _make_object ( fallback ) self . fd = self . _make_object ( fd ) # these are extra attributes that expose low-level effects, such as the *actual* # written value self . actual_addrs = None # `actual_value` always stores whatever the data looks like in memory from left to right, therefore it's always # big-endian (if endianness matters) self . actual_value = None self . added_constraints = None def downsize ( self ): self . actual_addrs = None self . actual_value = None self . added_constraints = None @property def all_objects ( self ): return [ a for a in [ self . addr , self . size , self . data , self . condition , self . fallback , self . fd ] if a is not None ] @property def tmp_deps ( self ): return super ( SimActionData , self ) . tmp_deps | self . _tmp_dep @property def reg_deps ( self ): return super ( SimActionData , self ) . reg_deps | self . _reg_dep def _desc ( self ): return \" %s / %s \" % ( self . type , self . action ) def _copy_objects ( self , c ): c . action = self . action c . tmp = self . tmp c . addr = self . _copy_object ( self . addr ) c . size = self . _copy_object ( self . size ) c . data = self . _copy_object ( self . data ) c . condition = self . _copy_object ( self . condition ) c . fallback = self . _copy_object ( self . fallback ) c . fd = self . _copy_object ( self . fd ) from .sim_action_object import SimActionObject","title":"sim_action"},{"location":"module/angr/sim_action/#simaction","text":"SimActionExit SimActionConstraint SimActionOperation SimActionData # This module contains data structures for handling memory, code, and register references. import logging l = logging . getLogger ( name = __name__ ) _noneset = frozenset () from .sim_event import SimEvent class SimAction ( SimEvent ): \"\"\" A SimAction represents a semantic action that an analyzed program performs. \"\"\" #__slots__ = [ 'bbl_addr', 'inst_addr', 'stmt_idx' ] TMP = 'tmp' REG = 'reg' MEM = 'mem' _MAX_ACTION_ID = - 1 def __init__ ( self , state , region_type ): \"\"\" Initializes the SimAction. :param state: the state that's the SimAction is taking place in. \"\"\" SimEvent . __init__ ( self , state , 'action' ) self . type = region_type SimAction . _MAX_ACTION_ID += 1 self . _action_id = SimAction . _MAX_ACTION_ID def __repr__ ( self ): if self . sim_procedure is not None : location = \" %s ()\" % self . sim_procedure . display_name else : if self . stmt_idx is not None : location = \"0x %x : %d \" % ( self . bbl_addr , self . stmt_idx ) else : location = \"0x %x \" % self . bbl_addr return \"< %s %s %s >\" % ( self . __class__ . __name__ , location , self . _desc ()) def _desc ( self ): raise NotImplementedError () #def __getstate__(self): # return { k: getattr(self, k) for k in sum([ c.__slots__ for c in self.__class__.mro() if hasattr(c, '__slots__')], []) } #pylint:disable=no-member #def __setstate__(self, s): # for k,v in s.items(): # setattr(self, k, v) @staticmethod def _make_object ( v ): if v is None : return None elif isinstance ( v , SimActionObject ): return v else : return SimActionObject ( v , reg_deps = None , tmp_deps = None ) @staticmethod def _copy_object ( v ): if isinstance ( v , SimActionObject ): return v . copy () else : return None @property def all_objects ( self ): raise NotImplementedError () @property def tmp_deps ( self ): return frozenset . union ( * [ v . tmp_deps for v in self . all_objects ]) @property def reg_deps ( self ): return frozenset . union ( * [ v . reg_deps for v in self . all_objects ]) def _copy_objects ( self , c ): raise NotImplementedError () def copy ( self ): c = self . _copy_event () self . _copy_objects ( c ) return c def downsize ( self ): \"\"\" Clears some low-level details (that take up memory) out of the SimAction. \"\"\" pass class SimActionExit ( SimAction ): \"\"\" An Exit action represents a (possibly conditional) jump. \"\"\" CONDITIONAL = 'conditional' DEFAULT = 'default' def __init__ ( self , state , target , condition = None , exit_type = None ): super ( SimActionExit , self ) . __init__ ( state , \"exit\" ) if exit_type is not None : self . exit_type = exit_type elif condition is None : self . exit_type = SimActionExit . CONDITIONAL else : self . exit_type = SimActionExit . DEFAULT self . target = self . _make_object ( target ) self . condition = self . _make_object ( condition ) def _desc ( self ): return self . exit_type @property def all_objects ( self ): return [ a for a in ( self . target , self . condition ) if a is not None ] def _copy_objects ( self , c ): c . exit_type = self . exit_type c . target = self . _copy_object ( self . target ) c . condition = self . _copy_object ( self . condition ) class SimActionConstraint ( SimAction ): \"\"\" A constraint action represents an extra constraint added during execution of a path. \"\"\" def __init__ ( self , state , constraint , condition = None ): super ( SimActionConstraint , self ) . __init__ ( state , \"constraint\" ) self . constraint = self . _make_object ( constraint ) self . condition = self . _make_object ( condition ) @property def all_objects ( self ): return [ a for a in ( self . constraint , self . condition ) if a is not None ] def _copy_objects ( self , c ): c . constraint = self . _copy_object ( self . constraint ) c . condition = self . _copy_object ( self . condition ) def _desc ( self ): s = ' %s ' % str ( self . constraint ) if self . condition is not None : s += ' (cond)' return s class SimActionOperation ( SimAction ): \"\"\" An action representing an operation between variables and/or constants. \"\"\" def __init__ ( self , state , op , exprs , result ): super ( SimActionOperation , self ) . __init__ ( state , 'operation' ) self . op = op self . exprs = exprs self . result = result @property def all_objects ( self ): return [ ex for ex in self . exprs if isinstance ( ex , SimActionObject ) ] def _copy_objects ( self , c ): c . op = self . op c . exprs = self . exprs [::] c . result = self . result def _desc ( self ): return \"operation/ %s \" % ( self . op ) class SimActionData ( SimAction ): \"\"\" A Data action represents a read or a write from memory, registers or a file. \"\"\" #__slots__ = [ 'objects' ] READ = 'read' WRITE = 'write' OPERATE = 'operate' def __init__ ( self , state , region_type , action , tmp = None , addr = None , size = None , data = None , condition = None , fallback = None , fd = None ): super ( SimActionData , self ) . __init__ ( state , region_type ) self . action = action self . _reg_dep = _noneset if addr is None or action != SimActionData . READ or not isinstance ( addr , int ) else frozenset (( addr ,)) self . _tmp_dep = _noneset if tmp is None or action != SimActionData . READ else frozenset (( tmp ,)) self . tmp = tmp self . offset = None if region_type == 'reg' : if isinstance ( addr , int ): self . offset = addr else : if addr . symbolic : # FIXME: we should fix it by allowing .offset taking ASTs instead of concretizing it right away l . warning ( 'Concretizing a symbolic register offset in SimActionData.' ) self . offset = state . solver . eval ( addr ) else : # it's not symbolic self . offset = state . solver . eval_one ( addr ) self . addr = self . _make_object ( addr ) self . size = self . _make_object ( size ) self . data = self . _make_object ( data ) self . condition = self . _make_object ( condition ) self . fallback = self . _make_object ( fallback ) self . fd = self . _make_object ( fd ) # these are extra attributes that expose low-level effects, such as the *actual* # written value self . actual_addrs = None # `actual_value` always stores whatever the data looks like in memory from left to right, therefore it's always # big-endian (if endianness matters) self . actual_value = None self . added_constraints = None def downsize ( self ): self . actual_addrs = None self . actual_value = None self . added_constraints = None @property def all_objects ( self ): return [ a for a in [ self . addr , self . size , self . data , self . condition , self . fallback , self . fd ] if a is not None ] @property def tmp_deps ( self ): return super ( SimActionData , self ) . tmp_deps | self . _tmp_dep @property def reg_deps ( self ): return super ( SimActionData , self ) . reg_deps | self . _reg_dep def _desc ( self ): return \" %s / %s \" % ( self . type , self . action ) def _copy_objects ( self , c ): c . action = self . action c . tmp = self . tmp c . addr = self . _copy_object ( self . addr ) c . size = self . _copy_object ( self . size ) c . data = self . _copy_object ( self . data ) c . condition = self . _copy_object ( self . condition ) c . fallback = self . _copy_object ( self . fallback ) c . fd = self . _copy_object ( self . fd ) from .sim_action_object import SimActionObject","title":"SimAction"},{"location":"module/fileformat/dot/","text":"DOT \u8bed\u8a00 \u00b6 Dot \u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5 graph:[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}' stmt_list:[ stmt [ ';' ] stmt_list ] stmt:node_stmt |edge_stmt |attr_stmt |ID '=' ID |subgraph attr_stmt:(graph | node | edge) attr_list attr_list:'[' [ a_list ] ']' [ attr_list ] a_list:ID '=' ID [ (';' | ',') ] [ a_list ] edge_stmt:(node_id | subgraph) edgeRHS [ attr_list ] edgeRHS:edgeop (node_id | subgraph) [ edgeRHS ] node_stmt:node_id [ attr_list ] node_id:ID [ port ] port:':' ID [ ':' compass_pt ] |':' compass_pt subgraph:[ subgraph [ ID ] ] '{' stmt_list '}' compass_pt:(n | ne | e | se | s | sw | w | nw | c | _) \u5173\u952e\u5b57node\uff0cedge\uff0cgraph\uff0cdigraph\uff0csubgraph\u548cstrict\u4e0e\u5927\u5c0f\u5199\u65e0\u5173 '('\u548c')'\u8868\u793a\u5fc5\u9009\u7ec4\uff0c\u5982(graph | digraph)'\u8868\u793agraph\u548cdigraph\u4e24\u8005\u6709\u4e14\u53ea\u6709\u5176\u4e00 \u5355\u5f15\u53f7\u8868\u793a\u5185\u5bb9\u662f\u5b57\u7b26\uff0c\u5982'='\u4fbf\u662f\u5b57\u7b26'='\uff0c\u800c\u4e0d\u662f\u8d4b\u503c","title":"DOT"},{"location":"module/fileformat/dot/#dot","text":"Dot \u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5 graph:[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}' stmt_list:[ stmt [ ';' ] stmt_list ] stmt:node_stmt |edge_stmt |attr_stmt |ID '=' ID |subgraph attr_stmt:(graph | node | edge) attr_list attr_list:'[' [ a_list ] ']' [ attr_list ] a_list:ID '=' ID [ (';' | ',') ] [ a_list ] edge_stmt:(node_id | subgraph) edgeRHS [ attr_list ] edgeRHS:edgeop (node_id | subgraph) [ edgeRHS ] node_stmt:node_id [ attr_list ] node_id:ID [ port ] port:':' ID [ ':' compass_pt ] |':' compass_pt subgraph:[ subgraph [ ID ] ] '{' stmt_list '}' compass_pt:(n | ne | e | se | s | sw | w | nw | c | _) \u5173\u952e\u5b57node\uff0cedge\uff0cgraph\uff0cdigraph\uff0csubgraph\u548cstrict\u4e0e\u5927\u5c0f\u5199\u65e0\u5173 '('\u548c')'\u8868\u793a\u5fc5\u9009\u7ec4\uff0c\u5982(graph | digraph)'\u8868\u793agraph\u548cdigraph\u4e24\u8005\u6709\u4e14\u53ea\u6709\u5176\u4e00 \u5355\u5f15\u53f7\u8868\u793a\u5185\u5bb9\u662f\u5b57\u7b26\uff0c\u5982'='\u4fbf\u662f\u5b57\u7b26'='\uff0c\u800c\u4e0d\u662f\u8d4b\u503c","title":"DOT \u8bed\u8a00"},{"location":"module/fileformat/pdf/","text":"PDF \u00b6 PDF Boxes \u00b6 mediabox, cropbox, bleedbox, trimbox, artbox PDF \u5b9e\u9645\u4e0a\u67095\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5c3a\u5bf8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4f60\u6253\u5f00\u5b83\u540e\u770b\u5230\u7684\u5927\u5c0f\u3002 An EPS has only a single BoundingBox but a PDF contains a MediaBox, CropBox, BleedBox, TrimBox and ArtBox. trimbox: \u5728\u6240\u6709\u88c1\u526a\u64cd\u4f5c\u4e4b\u540e,Trimbox \u57fa\u672c\u4e0a\u786e\u5b9a\u4e86\u662f\u5bfc\u51faPDF\u6210\u54c1\u7684\u9875\u9762\u5927\u5c0f\u3002 bleedbox: \u5305\u542b\u4e86trimbox\u548c\u6240\u6709\u7684bleed\u3002 mediabox: \u5305\u542b\u4e86bleedbox\u548c\u4efb\u4f55\u7684crop/bleed/etc...\u6807\u8bb0 cropbox: \u5b83\u6307\u5b9a\u4e86\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684\u533a\u57df\uff0c\u5728Adobe Reader\u4e2d\uff0c\u6587\u6863\u663e\u793a\u7684\u5927\u5c0f\u5c31\u662fcropbox\u7684\u5927\u5c0f artbox: \u6700\u521d\u7528\u6765\u6307\u5b9a\u827a\u672f\u4f5c\u54c1\u6240\u8986\u76d6\u7684\u533a\u57df\u3002 mediabox \u00b6 \u5bf9\u5927\u90e8\u5206\u7528\u6237\u6765\u8bf4\uff0cmediabox\u5bf9\u5e94\u7740pdf\u9875\u9762\u7684\u5b9e\u9645\u5927\u5c0f\u3002\u4f46\u5728\u7528\u4e8e\u51fa\u7248\u65f6\uff0cmediabox\u5305\u542b\u4e86\u66f4\u591a\u7684\u6709\u7528\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u8bf4bleed\uff0c\u4fee\u5efa\u6807\u8bb0\uff0c\u6587\u4ef6\u540d\uff0c\u65e5\u671f\u7b49\u7b49\uff09\uff0c\u4fbf\u4e8e\u7f16\u8f91\u3002 bleedbox \u00b6 \u5982\u679c\u6587\u6863\u5e03\u5c40\u4e0a\u7684\u4efb\u4f55\u5143\u7d20\u4e0e\u6587\u6863\u8fb9\u7f18\u63a5\u89e6\uff0c\u5219\u4f7f\u7528bleed\u3002bleedbox\u7684\u5927\u5c0f\u4e0d\u540c\u5730\u65b9\u6709\u4e0d\u540c\u7684\u6807\u51c6\uff0c\u5e38\u89c1\u7684\u662f\u6bd4crop\u4e4b\u540e\u6bcf\u6761\u8fb9\u957f3~6mm\u3002 EPS ???","title":"PDF"},{"location":"module/fileformat/pdf/#pdf","text":"","title":"PDF"},{"location":"module/fileformat/pdf/#pdf-boxes","text":"mediabox, cropbox, bleedbox, trimbox, artbox PDF \u5b9e\u9645\u4e0a\u67095\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5c3a\u5bf8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4f60\u6253\u5f00\u5b83\u540e\u770b\u5230\u7684\u5927\u5c0f\u3002 An EPS has only a single BoundingBox but a PDF contains a MediaBox, CropBox, BleedBox, TrimBox and ArtBox. trimbox: \u5728\u6240\u6709\u88c1\u526a\u64cd\u4f5c\u4e4b\u540e,Trimbox \u57fa\u672c\u4e0a\u786e\u5b9a\u4e86\u662f\u5bfc\u51faPDF\u6210\u54c1\u7684\u9875\u9762\u5927\u5c0f\u3002 bleedbox: \u5305\u542b\u4e86trimbox\u548c\u6240\u6709\u7684bleed\u3002 mediabox: \u5305\u542b\u4e86bleedbox\u548c\u4efb\u4f55\u7684crop/bleed/etc...\u6807\u8bb0 cropbox: \u5b83\u6307\u5b9a\u4e86\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684\u533a\u57df\uff0c\u5728Adobe Reader\u4e2d\uff0c\u6587\u6863\u663e\u793a\u7684\u5927\u5c0f\u5c31\u662fcropbox\u7684\u5927\u5c0f artbox: \u6700\u521d\u7528\u6765\u6307\u5b9a\u827a\u672f\u4f5c\u54c1\u6240\u8986\u76d6\u7684\u533a\u57df\u3002","title":"PDF Boxes"},{"location":"module/fileformat/pdf/#mediabox","text":"\u5bf9\u5927\u90e8\u5206\u7528\u6237\u6765\u8bf4\uff0cmediabox\u5bf9\u5e94\u7740pdf\u9875\u9762\u7684\u5b9e\u9645\u5927\u5c0f\u3002\u4f46\u5728\u7528\u4e8e\u51fa\u7248\u65f6\uff0cmediabox\u5305\u542b\u4e86\u66f4\u591a\u7684\u6709\u7528\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u8bf4bleed\uff0c\u4fee\u5efa\u6807\u8bb0\uff0c\u6587\u4ef6\u540d\uff0c\u65e5\u671f\u7b49\u7b49\uff09\uff0c\u4fbf\u4e8e\u7f16\u8f91\u3002","title":"mediabox"},{"location":"module/fileformat/pdf/#bleedbox","text":"\u5982\u679c\u6587\u6863\u5e03\u5c40\u4e0a\u7684\u4efb\u4f55\u5143\u7d20\u4e0e\u6587\u6863\u8fb9\u7f18\u63a5\u89e6\uff0c\u5219\u4f7f\u7528bleed\u3002bleedbox\u7684\u5927\u5c0f\u4e0d\u540c\u5730\u65b9\u6709\u4e0d\u540c\u7684\u6807\u51c6\uff0c\u5e38\u89c1\u7684\u662f\u6bd4crop\u4e4b\u540e\u6bcf\u6761\u8fb9\u957f3~6mm\u3002 EPS ???","title":"bleedbox"},{"location":"module/fuzzing/gui/","text":"fuzzing for GUI \u00b6 \u5982\u4f55\u6d88\u9664\u56fe\u5f62\u754c\u9762\u5bf9\u5de5\u4f5c\u7684\u5e72\u6270 \u00b6 Xvfb nohup Xvfb -ac :7 -screen 0 1280x1024x8 > /dev/null 2 > & 1 & export DISPLAY = :7 # -ac \u7981\u7528\u8bbf\u95ee\u63a7\u5236\u9650\u5236 # -screen scrn WxHxD set screen's width, height, depth \u5173\u95ed\u56fe\u5f62\u754c\u9762\u4e00\u79cd\u65b9\u6cd5\uff08for aflfuzz\uff09 \u00b6 \u4fee\u6539afl-fuzz.c\u4e2d\u51fd\u6570run_target \u7684FAULT_TIMOUT \u6210 FAULT_NONE persistent mode + gui model \u00b6","title":"GUI"},{"location":"module/fuzzing/gui/#fuzzing-for-gui","text":"","title":"fuzzing for GUI"},{"location":"module/fuzzing/gui/#_1","text":"Xvfb nohup Xvfb -ac :7 -screen 0 1280x1024x8 > /dev/null 2 > & 1 & export DISPLAY = :7 # -ac \u7981\u7528\u8bbf\u95ee\u63a7\u5236\u9650\u5236 # -screen scrn WxHxD set screen's width, height, depth","title":"\u5982\u4f55\u6d88\u9664\u56fe\u5f62\u754c\u9762\u5bf9\u5de5\u4f5c\u7684\u5e72\u6270"},{"location":"module/fuzzing/gui/#for-aflfuzz","text":"\u4fee\u6539afl-fuzz.c\u4e2d\u51fd\u6570run_target \u7684FAULT_TIMOUT \u6210 FAULT_NONE","title":"\u5173\u95ed\u56fe\u5f62\u754c\u9762\u4e00\u79cd\u65b9\u6cd5\uff08for aflfuzz\uff09"},{"location":"module/fuzzing/gui/#persistent-mode-gui-model","text":"","title":"persistent mode + gui model"},{"location":"module/fuzzing/honggfuzz/","text":"Honggfuzz \u00b6 Honggfuzz NetDriver \u00b6 \u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u76f8\u5f53\u5065\u58ee\u7684TCP\u670d\u52a1\u7684fuzzing\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\u9700\u8981\u505a\u5230\u54ea\u4e9b \u80fd\u4e0e\u73b0\u6709TCP\u670d\u52a1\u96c6\u6210\u7684\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a\u80fd\u591f\u88abApache\u7684HTTP\u94fe\u63a5\u7684\u9759\u6001\u6216\u52a8\u6001\u5e93\uff0c\uff08\u8fd9\u91cc\u53ef\u4ee5\u4f7fhttpd\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff09 \u5c06\u6765\u81ea\u5185\u5b58\u6570\u7ec4\u548c\u957f\u5ea6\u6807\u8bc6\u7684\u8f93\u5165\u8f6c\u6210TCP\u6d41\u7684\u6280\u672f \u5f53\u8f93\u5165\u7f13\u51b2\u533a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u65f6\uff0c\u6709\u65b9\u6cd5\u53bb\u901a\u77e5TCP \u670d\u52a1\u7aef\u7ed3\u675f\u8fde\u63a5\uff1b\u5426\u5219TCP\u670d\u52a1\u7aef\u5c06\u4e00\u76f4\u6302\u8d77\uff0c\u6216\u8005\u8d85\u65f6\u4e2d\u65ad\u8fde\u63a5\uff0c\u6216\u8005\u8d85\u8fc7fuzzer\u8bbe\u5b9a\u7684timeout \u5982\u679c\u8bb8\u591a\u76f8\u540c\u7684TCP\u670d\u52a1\u5668\u540c\u65f6\u5728\u76f8\u540c\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u914d\u7f6e\u76f8\u540c(\u6216\u8005\u9ed8\u8ba4\u914d\u7f6e)\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u4f1a\u7ed1\u5b9a\u5230\u6570\u5b57\u4e0a\u76f8\u540c\u7684TCP\u7aef\u53e3\u3002\u5f53\u7136\uff0c\u53ea\u6709\u5f53\u6211\u4eec\u6253\u7b97\u540c\u65f6Fuzz\u540c\u4e00\u4e2aTCP\u670d\u52a1\u5668\u7684\u591a\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u8fd9\u624d\u91cd\u8981(\u4f7f\u7528honggfuzz\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u4ec0\u4e48) \u6700\u8fd1\u5728Honggfuzz\u7684\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u7684Honggfuzz\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u5c31\u8bd5\u56fe\u5b9e\u73b0\u8fd9\u4e9b\u3002 \u9759\u6001\u5e93 [libfhnetdriver/libhfnetdriver.a] \u6e90\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u5df1\u4f5c\u4e3a\u76ee\u6807(\u63d0\u4f9b\u7b26\u53f7)\u63d2\u5165\u5230\u6700\u521d\u7531libFuzzer\u4f5c\u8005\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d: int LLVMFuzzerTestOneInput ( const uint8_t * buf , size_t len ); \u8fd9\u79cd\u9009\u62e9\u4f7f\u5f97\u4e0d\u4ec5\u53ef\u4ee5\u5728honggfuzz\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8fd8\u53ef\u4ee5\u5728AFL\u548clibFuzzer\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0cApache HTTPD\u9879\u76ee\u9700\u8981\u505a\u7684\u552f\u4e00\u4fee\u6539\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u5dee\u5f02: --- a/server/main.c +++ b/server/main.c @@ -484,8 +484,11 @@ static void usage(process_rec *process) destroy_and_exit_process(process, 1); } -int main(int argc, const char * const argv[]) -{ +#ifdef HFND_FUZZING_ENTRY_FUNCTION + HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv) { +#else + int main(int argc, const char *const *argv) { +#endif char c; int showcompile = 0, showdirectives = 0; const char *confname = SERVER_CONFIG_FILE; \u5e94\u7528\u8fd9\u4e2a\u8865\u4e01\u4e4b\u540e\uff0c main() (\u5c5e\u4e8eApache HTTPD \u4e2dserver/main.c)\u4f1a\u88ab\u7f16\u8bd1\u5668hfuzz-cc\u4e2d\u7684\u5b8f\u66ff\u4ee3\uff08'-D'\u5b9a\u4e49\u5b8f\uff09\uff0c\u8fd9\u4e2a\u6269\u5c55\u5b8f\u5bf9HonggFuzz NetDriver\u6709\u7279\u6b8a\u610f\u4e49--\u8bc6\u522b\u4e3aApache HTTPD\u670d\u52a1\u5668\u4ee3\u7801\u7684\u539f\u59cb\u5165\u53e3\u70b9\u7684\u4f4d\u7f6e \u5728\u5c06TCP server \u94fe\u63a5\u9759\u6001\u5e93libhfnetdriver.a(\u8fd9\u4e00\u6b65\u7531hfuzz-cc/*\u7f16\u8bd1\u5668\u6267\u884c)\u4e4b\u540e\uff0cfuzz\u5f15\u64ce\u4f1a\u8fd0\u884c\u81ea\u5df1\u7684main\u51fd\u6570\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884cTCP\u670d\u52a1\u7aef\u4ee3\u7801 \u4e4b\u524d\u63d0\u5230\u7684TCP server \u63a5\u53d7\u5230\u8f93\u5165\u7ed3\u675f\u7684\u4fe1\u53f7\u95ee\u9898\uff08\u6bd4\u5982\u8bf4\u5728fuzzing\u8f93\u5165\u7f13\u51b2\u4e2d\u4e0d\u518d\u6709\u6570\u636e\u65f6\uff0c\u5982\u4f55\u901a\u77e5\u5230TCP server\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5411\u5176\u5efa\u7acb\u7684tcp\u6d41\u4e2d\u53d1\u9001TCP FIN \u5305\u3002\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cshutdown(sock, SHUT_WR)\u8fd9\u4e2asyscall\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c \u6211\u4eec\u8981\u89e3\u51b3\u7684\u6700\u540e\u4e00\u4e2a\u8981\u6c42\u662f\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u540c\u7684TCP\u7aef\u53e3\u542f\u52a8\u591a\u4e2aTCP\u670d\u52a1\u5668\u3002\u5f88\u9057\u61be\uff0csetsockopt(SO_REUSEPORT)\u4e0d\u80fd\u7528\u5728\u8fd9\uff0c\u56e0\u4e3a\u6df7\u4e71\u7684\u8f93\u5165\u53ef\u4ee5\u5206\u53d1\u5230\u968f\u673a\u7684fuzz\u8fdb\u7a0b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff1a Linux network namespaces\uff0c\u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u8bf4\uff0c\u53ea\u80fd\u7528\u5728linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u4e2d\u8fd0\u884c\u6bcf\u4e2a\u65b0\u7684TCP\u670d\u52a1\u5668\u5141\u8bb8\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u5b83\u5e0c\u671b\u7684TCP\u7aef\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u90fd\u5c06\u770b\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684\u5168\u65b0loopback\u63a5\u53e3\u3002NetDriver \u5229\u7528Linux namespace\u7684\u4ee3\u7801\u53ef\u4ee5\u5728HonggFuzz\u7684libhfcommin\u5e93\u4e2d\u53d1\u73b0\u3002 \u4e00\u65e6TCP server \u542f\u52a8\u5e76\u63a5\u53d7\u65b0\u7684TCP\u8fde\u63a5\uff0cnet dirver \u5c06\uff1a \u5728\u4f60\u9009\u62e9\u7684Fuzzer\u7684\u51c6\u5907\u9636\u6bb5\u8c03\u7528LLVMFuzzerTestOneInput()\u63a5\u53e3\uff1b \u8fde\u63a5TCP server\uff0c \u5411\u5efa\u7acb\u7684TCP\u8fde\u63a5\u53d1\u9001\uff08send()\uff09\u8f93\u5165, \u4f7f\u7528shutdown(sock, SHUT_WR) \u901a\u77e5TCP server \u6ca1\u6709\u66f4\u591a\u7684\u8f93\u5165\u6570\u636e\uff0c \u7b49\u5f85TCP server\u5411\u6211\u4eec\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u5b83\u5173\u95edTCP\u8fde\u63a5\u7684\u4e00\u7aef\u4e3a\u6b62\u3002 \u5173\u95ed\u5ba2\u6237\u7aef\u7684TCP\u8fde\u63a5\u70b9\uff0c \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u4e0b\u9762\u7684\u547d\u4ee4\u96c6\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528NetDriver\u6765Fuzz\u60a8\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee(\u81f3\u5c11\u5bf9\u4e8eApache HTTPD\u6765\u8bf4)\u3002 ( cd httpd && ./hfuzz.compile_and_install.asan.sh ) honggfuzz -v -Q -f IN/ -w ./httpd.wordlist -- ./httpd/httpd -X -f /home/jagger/fuzz/apache/dist/conf/httpd.conf.h2 ... ... Honggfuzz Net Driver ( pid = 21726 ) : Waiting for the TCP server process to start accepting TCP connections at 127 .0.0.1:8080. Sleeping for 1 second.... Honggfuzz Net Driver ( pid = 21726 ) : The TCP server process is ready to accept connections at 127 .0.0.1:8080. TCP fuzzing starts now! Size:9378 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/4643/110/56364, Tot:0/0/0/4643/110/56364 Size:40712 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/1971/104/21274, Tot:0/0/0/6614/214/77638 ... \u5728\u8fd9\u4e2ahonggfuzz\u76ee\u5f55\u4e2d\u53ef\u4ee5\u627e\u5230\u81ea\u5b9a\u4e49\u7f16\u8bd1\u811a\u672c\uff0c\u4ee5\u53caApache HTTPD\u670d\u52a1\u5668\u6240\u9700\u7684\u6240\u6709\u8865\u4e01\u3001\u914d\u7f6e\u548c\u521d\u59cb\u8bed\u6599\u5e93\u6587\u4ef6\u3002 \u6211\u8ba4\u4e3a\u5c06\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0elibFuzzer\u548cAFL fuzzing\u8bbe\u7f6e\u96c6\u6210\u8d77\u6765\u5e94\u8be5\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1.","title":"Honggfuzz"},{"location":"module/fuzzing/honggfuzz/#honggfuzz","text":"","title":"Honggfuzz"},{"location":"module/fuzzing/honggfuzz/#honggfuzz-netdriver","text":"\u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u76f8\u5f53\u5065\u58ee\u7684TCP\u670d\u52a1\u7684fuzzing\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\u9700\u8981\u505a\u5230\u54ea\u4e9b \u80fd\u4e0e\u73b0\u6709TCP\u670d\u52a1\u96c6\u6210\u7684\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a\u80fd\u591f\u88abApache\u7684HTTP\u94fe\u63a5\u7684\u9759\u6001\u6216\u52a8\u6001\u5e93\uff0c\uff08\u8fd9\u91cc\u53ef\u4ee5\u4f7fhttpd\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff09 \u5c06\u6765\u81ea\u5185\u5b58\u6570\u7ec4\u548c\u957f\u5ea6\u6807\u8bc6\u7684\u8f93\u5165\u8f6c\u6210TCP\u6d41\u7684\u6280\u672f \u5f53\u8f93\u5165\u7f13\u51b2\u533a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u65f6\uff0c\u6709\u65b9\u6cd5\u53bb\u901a\u77e5TCP \u670d\u52a1\u7aef\u7ed3\u675f\u8fde\u63a5\uff1b\u5426\u5219TCP\u670d\u52a1\u7aef\u5c06\u4e00\u76f4\u6302\u8d77\uff0c\u6216\u8005\u8d85\u65f6\u4e2d\u65ad\u8fde\u63a5\uff0c\u6216\u8005\u8d85\u8fc7fuzzer\u8bbe\u5b9a\u7684timeout \u5982\u679c\u8bb8\u591a\u76f8\u540c\u7684TCP\u670d\u52a1\u5668\u540c\u65f6\u5728\u76f8\u540c\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u914d\u7f6e\u76f8\u540c(\u6216\u8005\u9ed8\u8ba4\u914d\u7f6e)\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u4f1a\u7ed1\u5b9a\u5230\u6570\u5b57\u4e0a\u76f8\u540c\u7684TCP\u7aef\u53e3\u3002\u5f53\u7136\uff0c\u53ea\u6709\u5f53\u6211\u4eec\u6253\u7b97\u540c\u65f6Fuzz\u540c\u4e00\u4e2aTCP\u670d\u52a1\u5668\u7684\u591a\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u8fd9\u624d\u91cd\u8981(\u4f7f\u7528honggfuzz\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u4ec0\u4e48) \u6700\u8fd1\u5728Honggfuzz\u7684\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u7684Honggfuzz\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u5c31\u8bd5\u56fe\u5b9e\u73b0\u8fd9\u4e9b\u3002 \u9759\u6001\u5e93 [libfhnetdriver/libhfnetdriver.a] \u6e90\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u5df1\u4f5c\u4e3a\u76ee\u6807(\u63d0\u4f9b\u7b26\u53f7)\u63d2\u5165\u5230\u6700\u521d\u7531libFuzzer\u4f5c\u8005\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d: int LLVMFuzzerTestOneInput ( const uint8_t * buf , size_t len ); \u8fd9\u79cd\u9009\u62e9\u4f7f\u5f97\u4e0d\u4ec5\u53ef\u4ee5\u5728honggfuzz\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8fd8\u53ef\u4ee5\u5728AFL\u548clibFuzzer\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0cApache HTTPD\u9879\u76ee\u9700\u8981\u505a\u7684\u552f\u4e00\u4fee\u6539\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u5dee\u5f02: --- a/server/main.c +++ b/server/main.c @@ -484,8 +484,11 @@ static void usage(process_rec *process) destroy_and_exit_process(process, 1); } -int main(int argc, const char * const argv[]) -{ +#ifdef HFND_FUZZING_ENTRY_FUNCTION + HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv) { +#else + int main(int argc, const char *const *argv) { +#endif char c; int showcompile = 0, showdirectives = 0; const char *confname = SERVER_CONFIG_FILE; \u5e94\u7528\u8fd9\u4e2a\u8865\u4e01\u4e4b\u540e\uff0c main() (\u5c5e\u4e8eApache HTTPD \u4e2dserver/main.c)\u4f1a\u88ab\u7f16\u8bd1\u5668hfuzz-cc\u4e2d\u7684\u5b8f\u66ff\u4ee3\uff08'-D'\u5b9a\u4e49\u5b8f\uff09\uff0c\u8fd9\u4e2a\u6269\u5c55\u5b8f\u5bf9HonggFuzz NetDriver\u6709\u7279\u6b8a\u610f\u4e49--\u8bc6\u522b\u4e3aApache HTTPD\u670d\u52a1\u5668\u4ee3\u7801\u7684\u539f\u59cb\u5165\u53e3\u70b9\u7684\u4f4d\u7f6e \u5728\u5c06TCP server \u94fe\u63a5\u9759\u6001\u5e93libhfnetdriver.a(\u8fd9\u4e00\u6b65\u7531hfuzz-cc/*\u7f16\u8bd1\u5668\u6267\u884c)\u4e4b\u540e\uff0cfuzz\u5f15\u64ce\u4f1a\u8fd0\u884c\u81ea\u5df1\u7684main\u51fd\u6570\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884cTCP\u670d\u52a1\u7aef\u4ee3\u7801 \u4e4b\u524d\u63d0\u5230\u7684TCP server \u63a5\u53d7\u5230\u8f93\u5165\u7ed3\u675f\u7684\u4fe1\u53f7\u95ee\u9898\uff08\u6bd4\u5982\u8bf4\u5728fuzzing\u8f93\u5165\u7f13\u51b2\u4e2d\u4e0d\u518d\u6709\u6570\u636e\u65f6\uff0c\u5982\u4f55\u901a\u77e5\u5230TCP server\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5411\u5176\u5efa\u7acb\u7684tcp\u6d41\u4e2d\u53d1\u9001TCP FIN \u5305\u3002\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cshutdown(sock, SHUT_WR)\u8fd9\u4e2asyscall\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c \u6211\u4eec\u8981\u89e3\u51b3\u7684\u6700\u540e\u4e00\u4e2a\u8981\u6c42\u662f\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u540c\u7684TCP\u7aef\u53e3\u542f\u52a8\u591a\u4e2aTCP\u670d\u52a1\u5668\u3002\u5f88\u9057\u61be\uff0csetsockopt(SO_REUSEPORT)\u4e0d\u80fd\u7528\u5728\u8fd9\uff0c\u56e0\u4e3a\u6df7\u4e71\u7684\u8f93\u5165\u53ef\u4ee5\u5206\u53d1\u5230\u968f\u673a\u7684fuzz\u8fdb\u7a0b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff1a Linux network namespaces\uff0c\u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u8bf4\uff0c\u53ea\u80fd\u7528\u5728linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u4e2d\u8fd0\u884c\u6bcf\u4e2a\u65b0\u7684TCP\u670d\u52a1\u5668\u5141\u8bb8\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u5b83\u5e0c\u671b\u7684TCP\u7aef\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u90fd\u5c06\u770b\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684\u5168\u65b0loopback\u63a5\u53e3\u3002NetDriver \u5229\u7528Linux namespace\u7684\u4ee3\u7801\u53ef\u4ee5\u5728HonggFuzz\u7684libhfcommin\u5e93\u4e2d\u53d1\u73b0\u3002 \u4e00\u65e6TCP server \u542f\u52a8\u5e76\u63a5\u53d7\u65b0\u7684TCP\u8fde\u63a5\uff0cnet dirver \u5c06\uff1a \u5728\u4f60\u9009\u62e9\u7684Fuzzer\u7684\u51c6\u5907\u9636\u6bb5\u8c03\u7528LLVMFuzzerTestOneInput()\u63a5\u53e3\uff1b \u8fde\u63a5TCP server\uff0c \u5411\u5efa\u7acb\u7684TCP\u8fde\u63a5\u53d1\u9001\uff08send()\uff09\u8f93\u5165, \u4f7f\u7528shutdown(sock, SHUT_WR) \u901a\u77e5TCP server \u6ca1\u6709\u66f4\u591a\u7684\u8f93\u5165\u6570\u636e\uff0c \u7b49\u5f85TCP server\u5411\u6211\u4eec\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u5b83\u5173\u95edTCP\u8fde\u63a5\u7684\u4e00\u7aef\u4e3a\u6b62\u3002 \u5173\u95ed\u5ba2\u6237\u7aef\u7684TCP\u8fde\u63a5\u70b9\uff0c \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u4e0b\u9762\u7684\u547d\u4ee4\u96c6\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528NetDriver\u6765Fuzz\u60a8\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee(\u81f3\u5c11\u5bf9\u4e8eApache HTTPD\u6765\u8bf4)\u3002 ( cd httpd && ./hfuzz.compile_and_install.asan.sh ) honggfuzz -v -Q -f IN/ -w ./httpd.wordlist -- ./httpd/httpd -X -f /home/jagger/fuzz/apache/dist/conf/httpd.conf.h2 ... ... Honggfuzz Net Driver ( pid = 21726 ) : Waiting for the TCP server process to start accepting TCP connections at 127 .0.0.1:8080. Sleeping for 1 second.... Honggfuzz Net Driver ( pid = 21726 ) : The TCP server process is ready to accept connections at 127 .0.0.1:8080. TCP fuzzing starts now! Size:9378 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/4643/110/56364, Tot:0/0/0/4643/110/56364 Size:40712 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/1971/104/21274, Tot:0/0/0/6614/214/77638 ... \u5728\u8fd9\u4e2ahonggfuzz\u76ee\u5f55\u4e2d\u53ef\u4ee5\u627e\u5230\u81ea\u5b9a\u4e49\u7f16\u8bd1\u811a\u672c\uff0c\u4ee5\u53caApache HTTPD\u670d\u52a1\u5668\u6240\u9700\u7684\u6240\u6709\u8865\u4e01\u3001\u914d\u7f6e\u548c\u521d\u59cb\u8bed\u6599\u5e93\u6587\u4ef6\u3002 \u6211\u8ba4\u4e3a\u5c06\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0elibFuzzer\u548cAFL fuzzing\u8bbe\u7f6e\u96c6\u6210\u8d77\u6765\u5e94\u8be5\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1.","title":"Honggfuzz NetDriver"},{"location":"module/iot/binwalk/","text":"binwalk \u00b6 issues \u00b6 failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' \u00b6 description \u00b6 Miss binary sasquatch DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 DLOB firmware header, boot partition: \"dev=/dev/mtdblock/1\" 112 0x70 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4624518 bytes 1441904 0x160070 PackImg section delimiter tag, little endian size: 2131456 bytes; big endian size: 8790016 bytes WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -le -d 'squashfs-root' '%e'' might not be installed correctly WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -be -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -be -d 'squashfs-root' '%e'' might not be installed correctly 1441936 0x160090 Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 8789043 bytes, 2427 inodes, blocksize: 65536 bytes, created: 2012-11-02 04:51:50 solution \u00b6 cd /path/to/directory git https://github.com/devttys0/ .git cd sasquatch ./build # Phaaga , failed to build due to network error # vim build.sh # if [ ! -e squashfs4.3.tar.gz ] # then # wget https://nchc.dl.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # #wget https://downloads.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # fi failed to find lzma in python2 virtualenv \u00b6 WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. solution # workon virtualenv pip install pyliblzma # It`s not the 'pylzma' binwalk in python virtualenv \u00b6 After installing binwalk for python3, need to install binwalk (python2) for FAT. solution Warnning: It only contain python2 environment. \u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5728root\u4e0b\u8fdb\u5165python\u865a\u73af\u5883\u540e\u6267\u884cbinwalk\u5b89\u88c5\u811a\u672c # workon virtua_ env sudo apt-get install git build-essential libqt4-opengl mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools zlib1g-dev liblzma-dev liblzo2-dev sleuthkit default-jdk lzop srecord cpio sudo apt-get install python-crypto python-lzo python-lzma python-pip python-tk pip install matplotlib capstone git clone https://github.com/devttys0/yaffshiv ( cd yaffshiv && python2 setup.py install ) rm -rf yaffshiv # install_sasquatch for local bin, not python2 package git clone https://github.com/sviehb/jefferson ( cd jefferson && python2 setup.py install ) rm -rf jefferson # install_unstuff , install_cramfstools installed in /usr/local/bin, not python2 package git clone https://github.com/jrspruitt/ubi_reader ( cd ubi_reader && git reset --hard 0955e6b95f07d849a182125919a1f2b6790d5b51 && python setup.py install ) rm -rf ubi_reader","title":"binwalk"},{"location":"module/iot/binwalk/#binwalk","text":"","title":"binwalk"},{"location":"module/iot/binwalk/#issues","text":"","title":"issues"},{"location":"module/iot/binwalk/#failed-to-run-external-extractor-sasquatch-p-1-le-d-squashfs-root","text":"","title":"failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root'"},{"location":"module/iot/binwalk/#description","text":"Miss binary sasquatch DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 DLOB firmware header, boot partition: \"dev=/dev/mtdblock/1\" 112 0x70 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4624518 bytes 1441904 0x160070 PackImg section delimiter tag, little endian size: 2131456 bytes; big endian size: 8790016 bytes WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -le -d 'squashfs-root' '%e'' might not be installed correctly WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -be -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -be -d 'squashfs-root' '%e'' might not be installed correctly 1441936 0x160090 Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 8789043 bytes, 2427 inodes, blocksize: 65536 bytes, created: 2012-11-02 04:51:50","title":"description"},{"location":"module/iot/binwalk/#solution","text":"cd /path/to/directory git https://github.com/devttys0/ .git cd sasquatch ./build # Phaaga , failed to build due to network error # vim build.sh # if [ ! -e squashfs4.3.tar.gz ] # then # wget https://nchc.dl.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # #wget https://downloads.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # fi","title":"solution"},{"location":"module/iot/binwalk/#failed-to-find-lzma-in-python2-virtualenv","text":"WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. solution # workon virtualenv pip install pyliblzma # It`s not the 'pylzma'","title":"failed to find lzma in python2 virtualenv"},{"location":"module/iot/binwalk/#binwalk-in-python-virtualenv","text":"After installing binwalk for python3, need to install binwalk (python2) for FAT. solution Warnning: It only contain python2 environment. \u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5728root\u4e0b\u8fdb\u5165python\u865a\u73af\u5883\u540e\u6267\u884cbinwalk\u5b89\u88c5\u811a\u672c # workon virtua_ env sudo apt-get install git build-essential libqt4-opengl mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools zlib1g-dev liblzma-dev liblzo2-dev sleuthkit default-jdk lzop srecord cpio sudo apt-get install python-crypto python-lzo python-lzma python-pip python-tk pip install matplotlib capstone git clone https://github.com/devttys0/yaffshiv ( cd yaffshiv && python2 setup.py install ) rm -rf yaffshiv # install_sasquatch for local bin, not python2 package git clone https://github.com/sviehb/jefferson ( cd jefferson && python2 setup.py install ) rm -rf jefferson # install_unstuff , install_cramfstools installed in /usr/local/bin, not python2 package git clone https://github.com/jrspruitt/ubi_reader ( cd ubi_reader && git reset --hard 0955e6b95f07d849a182125919a1f2b6790d5b51 && python setup.py install ) rm -rf ubi_reader","title":"binwalk in python virtualenv"},{"location":"module/kernel/kernel-header/","text":"kernel header \u00b6 linux/kernel.h \u00b6 kernel.h\u4e2d\u5305\u542b\u4e86\u5185\u6838\u6253\u5370\u51fd\u6570 printk\u51fd\u6570 \u7b49","title":"kernel-header"},{"location":"module/kernel/kernel-header/#kernel-header","text":"","title":"kernel header"},{"location":"module/kernel/kernel-header/#linuxkernelh","text":"kernel.h\u4e2d\u5305\u542b\u4e86\u5185\u6838\u6253\u5370\u51fd\u6570 printk\u51fd\u6570 \u7b49","title":"linux/kernel.h"},{"location":"module/kernel/kernel-hook/","text":"kernel hook \u00b6 makefile obj- \u00b6 obj-$(CONFIG_FOO) += foo.o $(CONFIG_FOO)\u53ef\u4ee5\u4e3ay(\u7f16\u8bd1\u8fdb\u5185\u6838) \u6216m(\u7f16\u8bd1\u6210\u6a21\u5757)\u3002\u5982\u679cCONFIG_FOO\u4e0d\u662fy \u548cm,\u90a3\u4e48\u8be5\u6587\u4ef6\u5c31\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u8054\u63a5\u4e86","title":"kernel-hook"},{"location":"module/kernel/kernel-hook/#kernel-hook","text":"","title":"kernel hook"},{"location":"module/kernel/kernel-hook/#makefile-obj-","text":"obj-$(CONFIG_FOO) += foo.o $(CONFIG_FOO)\u53ef\u4ee5\u4e3ay(\u7f16\u8bd1\u8fdb\u5185\u6838) \u6216m(\u7f16\u8bd1\u6210\u6a21\u5757)\u3002\u5982\u679cCONFIG_FOO\u4e0d\u662fy \u548cm,\u90a3\u4e48\u8be5\u6587\u4ef6\u5c31\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u8054\u63a5\u4e86","title":"makefile obj-"},{"location":"module/llvm/pass/","text":"","title":"pass"},{"location":"module/makefile/cmake/","text":"cmake \u00b6 cmake \u8bed\u6cd5 install \u6307\u4ee4\uff08\u4e3b\u8981\u662f\u751f\u6210Makefile\u4e2d\u7684install target\uff09 \u00b6 install ( FILES flie DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path install ( PROGRAMS file DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path,\u5e76\u7ed9\u4e88file\u53ef\u6267\u884c\u6743\u9650 INSTALL ( TARGETS ylib ylib_s #RUNTIME DESTINATION xxx LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u5b89\u88c5libylib.so\u5230lib\u76ee\u5f55\uff0c\u5b89\u88c5libylib_s.a\u5230lib\u76ee\u5f55\uff0cRUNTIME \u662f\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\u5230xxx\u76ee\u5f55\uff0c\u6ce8\u610f\u8fd9\u4e2a\u6307\u4ee4\u6709\u4e2a\u5751\uff0c\u6211\u540e\u9762\u4f1a\u8bf4\u660e\u8fd9\u4e2a configure_file \u00b6 configure_file ( fileA fileB @ONLY ) #\u628afileA \u590d\u5236\u5e76\u91cd\u547d\u540d\u4e3afileB,\u6b64\u65f6\uff0cfileA\u4e2d\u7684@var@\u7684\u503c\u4f1a\u88ab\u66ff\u6362\u4e3acmakelists.txt \u4e2dvar\u7684\u503c\u3002@ONLY\u662f\u53ea\u8f6c\u6362@va@\u8fd9\u79cd\u53d8\u91cf","title":"cmake"},{"location":"module/makefile/cmake/#cmake","text":"cmake \u8bed\u6cd5","title":"cmake"},{"location":"module/makefile/cmake/#install-makefileinstall-target","text":"install ( FILES flie DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path install ( PROGRAMS file DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path,\u5e76\u7ed9\u4e88file\u53ef\u6267\u884c\u6743\u9650 INSTALL ( TARGETS ylib ylib_s #RUNTIME DESTINATION xxx LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u5b89\u88c5libylib.so\u5230lib\u76ee\u5f55\uff0c\u5b89\u88c5libylib_s.a\u5230lib\u76ee\u5f55\uff0cRUNTIME \u662f\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\u5230xxx\u76ee\u5f55\uff0c\u6ce8\u610f\u8fd9\u4e2a\u6307\u4ee4\u6709\u4e2a\u5751\uff0c\u6211\u540e\u9762\u4f1a\u8bf4\u660e\u8fd9\u4e2a","title":"install \u6307\u4ee4\uff08\u4e3b\u8981\u662f\u751f\u6210Makefile\u4e2d\u7684install target\uff09"},{"location":"module/makefile/cmake/#configure_file","text":"configure_file ( fileA fileB @ONLY ) #\u628afileA \u590d\u5236\u5e76\u91cd\u547d\u540d\u4e3afileB,\u6b64\u65f6\uff0cfileA\u4e2d\u7684@var@\u7684\u503c\u4f1a\u88ab\u66ff\u6362\u4e3acmakelists.txt \u4e2dvar\u7684\u503c\u3002@ONLY\u662f\u53ea\u8f6c\u6362@va@\u8fd9\u79cd\u53d8\u91cf","title":"configure_file"},{"location":"module/python/easyfunction/","text":"Easy Function \u00b6 \u5e38\u7528\u7684\u5c0f\u51fd\u6570 \u540e\u53f0\u8fd0\u884c \u00b6 def run_in_background (): ### could use the python 'daemon' module, but it isn't always ### installed, and we just need a basic backgrounding ### capability anyway pid = os . fork () if ( pid < 0 ): print \"[*] fork() error, exiting.\" os . _exit () elif ( pid > 0 ): os . _exit ( 0 ) else : os . setsid () return","title":"Easy Function"},{"location":"module/python/easyfunction/#easy-function","text":"\u5e38\u7528\u7684\u5c0f\u51fd\u6570","title":"Easy Function"},{"location":"module/python/easyfunction/#_1","text":"def run_in_background (): ### could use the python 'daemon' module, but it isn't always ### installed, and we just need a basic backgrounding ### capability anyway pid = os . fork () if ( pid < 0 ): print \"[*] fork() error, exiting.\" os . _exit () elif ( pid > 0 ): os . _exit ( 0 ) else : os . setsid () return","title":"\u540e\u53f0\u8fd0\u884c"},{"location":"module/python/python-prompt-toolkit/","text":"python-prompt-toolkit \u00b6 \u5982\u4f55\u5b66\u4e60\u548c\u7406\u89e3prompt_toolkit First, learn how to print text. This is important, because it covers how to use \u201cformatted text\u201d, which is something you\u2019ll use whenever you want to use colors anywhere. Secondly, go through the asking for input section. This is useful for almost any use case, even for full screen applications. It covers autocompletions, syntax highlighting, key bindings, and so on. Then, learn about Dialogs, which is easy and fun. Finally, learn about full screen applications and read through the advanced topics. \u6253\u5370(\u548c\u4f7f\u7528)\u683c\u5f0f\u5316\u6587\u672c \u00b6 \u6253\u5370\u7eaf\u6587\u672c \u00b6 #from __future__ import unicode_literals from prompt_toolkit import print_formatted_text print_formatted_text ( 'Hello world' ) \u683c\u5f0f\u5316\u6587\u672c \u00b6 There are several ways to display colors: By creating an HTML object. By creating an ANSI object that contains ANSI escape sequences. By creating a list of (style, text) tuples. By creating a list of (pygments.Token, text) tuples, and wrapping it in PygmentsTokens. HTML \u00b6 from __future__ import unicode_literals , print_function from prompt_toolkit import print_formatted_text , HTML print_formatted_text ( HTML ( '<b>This is bold</b>' )) print_formatted_text ( HTML ( '<i>This is italic</i>' )) print_formatted_text ( HTML ( '<u>This is underlined</u>' )) # Colors from the ANSI palette. print_formatted_text ( HTML ( '<ansired>This is red</ansired>' )) print_formatted_text ( HTML ( '<ansigreen>This is green</ansigreen>' )) # Named colors (256 color palette, or true color, depending on the output). print_formatted_text ( HTML ( '<skyblue>This is sky blue</skyblue>' )) print_formatted_text ( HTML ( '<seagreen>This is sea green</seagreen>' )) print_formatted_text ( HTML ( '<violet>This is violet</violet>' )) print_formatted_text ( HTML ( '<aaa fg=\"ansiwhite\" bg=\"ansigreen\">White on green</aaa>' )) from prompt_toolkit.styles import Style style = Style . from_dict ({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text ( HTML ( '<aaa>Hello</aaa> <bbb>world</bbb>!' ), style = style ) ANSI \u00b6 from prompt_toolkit import print_formatted_text , ANSI print_formatted_text ( ANSI ( ' \\x1b [31mhello \\x1b [32mworld' )) (style, text) tuples \u00b6 from __future__ import unicode_literals , print_function from prompt_toolkit import print_formatted_text from prompt_toolkit.formatted_text import FormattedText text = FormattedText ([ ( '#ff0066' , 'Hello' ), ( '' , ' ' ), ( '#44ff00 italic' , 'World' ), ]) print_formatted_text ( text ) from prompt_toolkit.styles import Style # The text. text = FormattedText ([ ( 'class:aaa' , 'Hello' ), ( '' , ' ' ), ( 'class:bbb' , 'World' ), ]) # The style sheet. style = Style . from_dict ({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text ( text , style = style ) Pygments (Token, text) tuples \u00b6 Pygments to_formatted_text \u00b6 from prompt_toolkit.formatted_text import to_formatted_text , HTML from prompt_toolkit import print_formatted_text html = HTML ( '<aaa>Hello</aaa> <bbb>world</bbb>!' ) text = to_formatted_text ( html , style = 'class:my_html bg:#00ff00 italic' ) print_formatted_text ( text ) \u5982\u4f55\u8f93\u5165 (prompts) \u00b6 from prompt_toolkit import prompt text = prompt ( 'Give me some input: ' ) print ( 'You said: %s ' % text ) PromptSession \u5bf9\u8c61 \u00b6 prompt\u662fPromptSession\u5b9e\u4f8b\u7684prompt\u65b9\u6cd5 from prompt_toolkit import PromptSession # Create prompt object. session = PromptSession () # Do multiple input calls. text1 = session . prompt () text2 = session . prompt () \u8bed\u6cd5\u9ad8\u4eae \u00b6 \u4f7f\u7528\u4e86pygments\u8fd9\u4e2a\u5e93\uff0c\u9664\u4e86html\u8fd8\u6709python\uff0cshell\u7b49\u7b49 from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.lexers import PygmentsLexer text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer )) print ( 'You said: %s ' % text ) \u989c\u8272 \u00b6 \u8ddf\u8bed\u6cd5\u9ad8\u4eae\u63a5\u8fd1\uff0c\u4f46\u8fd8\u662f\u6709\u533a\u522b from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style from prompt_toolkit.lexers import PygmentsLexer our_style = Style . from_dict ({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer ), style = our_style ) \u4f7f\u7528Pygments style \u00b6 All Pygments style classes can be used as well, when they are wrapped through style_from_pygments_cls() from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import style_from_pygments_cls , merge_styles from prompt_toolkit.lexers import PygmentsLexer from pygments.styles.tango import TangoStyle from pygments.lexers.html import HtmlLexer our_style = merge_styles ([ style_from_pygments_cls ( TangoStyle ), Style . from_dict ({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) ]) text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer ), style = our_style ) \u7740\u8272\u63d0\u793a \u00b6 from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style style = Style . from_dict ({ # User input (default text). '' : '#ff0066' , # Prompt. 'username' : '#884444' , 'at' : '#00aa00' , 'colon' : '#0000aa' , 'pound' : '#00aa00' , 'host' : '#00ffff bg:#444400' , 'path' : 'ansicyan underline' , }) message = [ ( 'class:username' , 'john' ), ( 'class:at' , '@' ), ( 'class:host' , 'localhost' ), ( 'class:colon' , ':' ), ( 'class:path' , '/user/john' ), ( 'class:pound' , '# ' ), ] # If you want to have 24bit true color, this is possible by adding the true_color=True option to the prompt() function. text = prompt ( message , style = style ) \u81ea\u52a8\u8865\u5168 \u00b6 from prompt_toolkit import prompt from prompt_toolkit.completion import WordCompleter html_completer = WordCompleter ([ '<html>' , '<body>' , '<head>' , '<title>' , 'pengweidang' ]) text = prompt ( 'Enter HTML: ' , completer = html_completer ) print ( 'You said: %s ' % text ) \u4e2a\u6027\u5316\u8865\u5168 \u00b6 from prompt_toolkit.completion import Completer , Completion class MyCustomCompleter ( Completer ): def get_completions ( self , document , complete_event ): # Display this completion, black on yellow. yield Completion ( 'completion1' , start_position = 0 , style = 'bg:ansiyellow fg:ansiblack' ) # Underline completion. yield Completion ( 'completion2' , start_position = 0 , style = 'underline' ) # Specify class name, which will be looked up in the style sheet. yield Completion ( 'completion3' , start_position = 0 , style = 'class:special-completion' ) from prompt_toolkit.completion import Completer , Completion from prompt_toolkit.formatted_text import HTML class MyCustomCompleter ( Completer ): def get_completions ( self , document , complete_event ): yield Completion ( 'completion1' , start_position = 0 , display = HTML ( '<b>completion</b><ansired>1</ansired>' ), style = 'bg:ansiyellow' ) \u6a21\u7cca\u8865\u5168 \u00b6 Prompt_toolkit\u9644\u5e26\u4e86FuzzyCompleter\u548cFuzzyWordCompleter\u7c7b\u3002 Complete while typing \u00b6 \u81ea\u52a8\u8865\u5168\u53ef\u4ee5\u5728\u952e\u5165\u65f6\u6216\u7528\u6237\u6309\u4e0bTab\u952e\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6ce8\u610f\u4f1a\u4e0e\u2018enable_history_search\u2019\u51b2\u7a81\u3002 ext = prompt ( 'Enter HTML: ' , completer = my_completer , complete_while_typing = True ) \u5f02\u6b65\u8865\u5168 \u00b6 \u5982\u679c\u751f\u6210\u8865\u5168\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6700\u597d\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u3002 text = prompt ( '> ' , completer = MyCustomCompleter (), complete_in_thread = True ) \u8f93\u5165\u9a8c\u8bc1 \u00b6 from prompt_toolkit.validation import Validator , ValidationError from prompt_toolkit import prompt class NumberValidator ( Validator ): def validate ( self , document ): text = document . text if text and not text . isdigit (): i = 0 # Get index of fist non numeric character. # We want to move the cursor here. for i , c in enumerate ( text ): if not c . isdigit (): break raise ValidationError ( message = 'This input contains non-numeric characters' , cursor_position = i ) number = int ( prompt ( 'Give a number: ' , validator = NumberValidator ())) print ( 'You said: %i ' % number ) \u5b9e\u65f6\u9a8c\u8bc1\uff1a \u5728prompt\u51fd\u6570\u4e2d\uff0cvalidate_while_typing=True \u901a\u8fc7\u56de\u8c03\u51fd\u6570\u9a8c\u8bc1 from prompt_toolkit.validation import Validator from prompt_toolkit import prompt def is_number ( text ): return text . isdigit () validator = Validator . from_callable ( is_number , error_message = 'This input contains non-numeric characters' , move_cursor_to_end = True ) number = int ( prompt ( 'Give a number: ' , validator = validator )) print ( 'You said: %i ' % number ) \u5386\u53f2\u8bb0\u5f55 \u00b6 \u5982\u679c\u9700\u8981\u4fdd\u5b58\u5230\u6587\u4ef6 from prompt_toolkit import PromptSession from prompt_toolkit.history import FileHistory session = PromptSession ( history = FileHistory ( '~/.myhistory' )) while True : session . prompt () \u81ea\u52a8\u63d0\u793a \u00b6 \u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u81ea\u52a8\u63d0\u793a from prompt_toolkit import PromptSession from prompt_toolkit.history import InMemoryHistory from prompt_toolkit.auto_suggest import AutoSuggestFromHistory session = PromptSession () while True : text = session . prompt ( '> ' , auto_suggest = AutoSuggestFromHistory ()) print ( 'You said: %s ' % text ) \u6dfb\u52a0\u5e95\u90e8\u5de5\u5177\u680f \u00b6 from prompt_toolkit import prompt from prompt_toolkit.styles import Style def bottom_toolbar (): return [( 'class:bottom-toolbar' , ' This is a toolbar. ' )] style = Style . from_dict ({ 'bottom-toolbar' : '#ffffff bg:#333333' , }) text = prompt ( '> ' , bottom_toolbar = bottom_toolbar , style = style ) print ( 'You said: %s ' % text ) \u9ed8\u8ba4\u7684\u7c7b\u540d\u662fbottom-toolbar\uff0c\u5b83\u4e5f\u5c06\u7528\u4e8e\u586b\u5145\u5de5\u5177\u680f\u7684\u80cc\u666f\u3002 \u6dfb\u52a0\u53f3\u4fa7prompt \u00b6 from prompt_toolkit import prompt from prompt_toolkit.styles import Style example_style = Style . from_dict ({ 'rprompt' : 'bg:#ff0066 #ffffff' , }) def get_rprompt (): return '<rprompt>' answer = prompt ( '> ' , rprompt = get_rprompt , style = example_style ) Vi \u8f93\u5165\u6a21\u5f0f \u00b6 Vi\u6a21\u5f0f from prompt_toolkit import prompt prompt ( '> ' , vi_mode = True ) \u81ea\u5b9a\u4e49\u952e\u7ed1\u5b9a \u00b6 from prompt_toolkit import prompt from prompt_toolkit.application import run_in_terminal from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings () @bindings.add ( 'c-t' ) def _ ( event ): \" Say 'hello' when `c-t` is pressed. \" def print_hello (): print ( 'hello world' ) run_in_terminal ( print_hello ) @bindings.add ( 'c-x' ) def _ ( event ): \" Exit when `c-x` is pressed. \" event . app . exit () text = prompt ( '> ' , key_bindings = bindings ) print ( 'You said: %s ' % text ) \u6839\u636e\u6761\u4ef6\u542f\u7528\u952e\u7ed1\u5b9a \u00b6 import datetime from prompt_toolkit import prompt from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings () @Condition def is_active (): \" Only activate key binding on the second half of each minute. \" return datetime . datetime . now () . second > 30 @bindings.add ( 'c-t' , filter = is_active ) def _ ( event ): # ... pass prompt ( '> ' , key_bindings = bindings ) \u5728Emacs\u548cVi\u6a21\u5f0f\u4e2d\u52a8\u6001\u5207\u6362 \u00b6 from prompt_toolkit import prompt from prompt_toolkit.application.current import get_app from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings def run (): # Create a set of key bindings. bindings = KeyBindings () # Add an additional key binding for toggling this flag. @bindings.add ( 'f4' ) def _ ( event ): \" Toggle between Emacs and Vi mode. \" app = event . app if app . editing_mode == EditingMode . VI : app . editing_mode = EditingMode . EMACS else : app . editing_mode = EditingMode . VI # Add a toolbar at the bottom to display the current input mode. def bottom_toolbar (): \" Display the current input mode. \" text = 'Vi' if get_app () . editing_mode == EditingMode . VI else 'Emacs' return [ ( 'class:toolbar' , ' [F4] %s ' % text ) ] prompt ( '> ' , key_bindings = bindings , bottom_toolbar = bottom_toolbar ) run () \u4f7f\u7528control-space\u8865\u5168 \u00b6 link \u5176\u4ed6\u9009\u9879 \u00b6 \u591a\u884c\u8f93\u5165 \u00b6 Meta+Enter \u6216\u8005 Escape\uff0cEnter from prompt_toolkit import prompt prompt ( '> ' , multiline = True ) def prompt_continuation ( width , line_number , is_soft_wrap ): return '.' * width # Or: return [('', '.' * width)] prompt ( 'multiline input> ' , multiline = True , prompt_continuation = prompt_continuation ) \u9ed8\u8ba4\u503c \u00b6 prompt('What is your name: ', default='%s' % getpass.getuser()) \u9f20\u6807\u652f\u6301 \u00b6 \u5149\u6807\u4f4d\u7f6e\u548c\u6eda\u52a8 prompt('What is your name: ', mouse_support=True) \u6362\u884c \u00b6 \u9ed8\u8ba4\u6362\u884c prompt('What is your name: ', wrap_lines=False) \u5bc6\u7801\u8f93\u5165 \u00b6 from prompt_toolkit import prompt prompt ( 'Enter password: ' , is_password = True ) \u5f02\u6b65 \u00b6 link Dialogs \u00b6 Message box \u00b6 from prompt_toolkit.shortcuts import message_dialog message_dialog ( title = 'Example dialog window' , text = 'Do you want to continue? \\n Press ENTER to quit.' ) Input box \u00b6 from prompt_toolkit.shortcuts import input_dialog text = input_dialog ( title = 'Input dialog example' , text = 'Please type your password:' , password = True ) Yes/No dialog \u00b6 from prompt_toolkit.shortcuts import yes_no_dialog result = yes_no_dialog ( title = 'Yes/No dialog example' , text = 'Do you want to confirm?' ) Button dialog \u00b6 from prompt_toolkit.shortcuts import button_dialog result = button_dialog ( title = 'Button dialog example' , text = 'Do you want to confirm?' , buttons = [ ( 'Yes' , True ), ( 'No' , False ), ( 'Maybe...' , None ) ], ) dialog \u6837\u5f0f \u00b6 from prompt_toolkit.formatted_text import HTML from prompt_toolkit.shortcuts import message_dialog from prompt_toolkit.styles import Style example_style = Style . from_dict ({ 'dialog' : 'bg:#88ff88' , 'dialog frame-label' : 'bg:#ffffff #000000' , 'dialog.body' : 'bg:#000000 #00ff00' , 'dialog shadow' : 'bg:#00aa00' , }) message_dialog ( title = HTML ( '<style bg=\"blue\" fg=\"white\">Styled</style> ' '<style fg=\"ansired\">dialog</style> window' ), text = 'Do you want to continue? \\n Press ENTER to quit.' , style = example_style ) \u8fdb\u5ea6\u6761 \u00b6 \u7b80\u5355\u8fdb\u5ea6\u6761 \u00b6 from prompt_toolkit.shortcuts import ProgressBar import time with ProgressBar () as pb : for i in pb ( range ( 800 )): time . sleep ( . 01 ) \u591a\u4e2a\u5e76\u884c\u4efb\u52a1 \u00b6 from prompt_toolkit.shortcuts import ProgressBar import time import threading with ProgressBar () as pb : # Two parallel tasks. def task_1 (): for i in pb ( range ( 100 )): time . sleep ( . 05 ) def task_2 (): for i in pb ( range ( 150 )): time . sleep ( . 08 ) # Start threads. t1 = threading . Thread ( target = task_1 ) t2 = threading . Thread ( target = task_2 ) t1 . daemon = True t2 . daemon = True t1 . start () t2 . start () # Wait for the threads to finish. We use a timeout for the join() call, # because on Windows, join cannot be interrupted by Control-C or any other # signal. for t in [ t1 , t2 ]: while t . is_alive (): t . join ( timeout =. 5 ) \u589e\u52a0\u6807\u9898\u548c\u6807\u7b7e \u00b6 from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.formatted_text import HTML import time title = HTML ( 'Downloading <style bg=\"yellow\" fg=\"black\">4 files...</style>' ) label = HTML ( '<ansired>some file</ansired>: ' ) with ProgressBar ( title = title ) as pb : for i in pb ( range ( 800 ), label = label ): time . sleep ( . 01 ) \u683c\u5f0f\u5316 \u00b6 \u9ed8\u8ba4style from prompt_toolkit.shortcuts.progress_bar.formatters import * default_formatting = [ Label (), Text ( ' ' ), Percentage (), Text ( ' ' ), Bar (), Text ( ' ' ), Progress (), Text ( ' ' ), Text ( 'eta [' , style = 'class:time-left' ), TimeLeft (), Text ( ']' , style = 'class:time-left' ), Text ( ' ' ), ] from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.styles import Style from prompt_toolkit.shortcuts.progress_bar import formatters import time style = Style . from_dict ({ 'label' : 'bg:#ffff00 #000000' , 'percentage' : 'bg:#ffff00 #000000' , 'current' : '#448844' , 'bar' : '' , }) custom_formatters = [ formatters . Label (), formatters . Text ( ': [' , style = 'class:percentage' ), formatters . Percentage (), formatters . Text ( ']' , style = 'class:percentage' ), formatters . Text ( ' ' ), formatters . Bar ( sym_a = '#' , sym_b = '#' , sym_c = '.' ), formatters . Text ( ' ' ), ] with ProgressBar ( style = style , formatters = custom_formatters ) as pb : for i in pb ( range ( 1600 ), label = 'Installing' ): time . sleep ( . 01 ) \u589e\u52a0\u952e\u7ed1\u5b9a\u548c\u5de5\u5177\u680f \u00b6 from prompt_toolkit import HTML from prompt_toolkit.key_binding import KeyBindings from prompt_toolkit.patch_stdout import patch_stdout from prompt_toolkit.shortcuts import ProgressBar import time bottom_toolbar = HTML ( ' <b>[f]</b> Print \"f\" <b>[x]</b> Abort.' ) # Create custom key bindings first. kb = KeyBindings () cancel = [ False ] @kb.add ( 'f' ) def _ ( event ): print ( 'You pressed `f`.' ) @kb.add ( 'x' ) def _ ( event ): \" Send Abort (control-c) signal. \" cancel [ 0 ] = True os . kill ( os . getpid (), signal . SIGINT ) # Use `patch_stdout`, to make sure that prints go above the # application. with patch_stdout (): with ProgressBar ( key_bindings = kb , bottom_toolbar = bottom_toolbar ) as pb : for i in pb ( range ( 800 )): time . sleep ( . 01 ) # Stop when the cancel flag has been set. if cancel [ 0 ]: break \u6784\u5efa\u5168\u5c4f\u5e94\u7528 \u00b6 link","title":"python-prompt-toolkit"},{"location":"module/python/python-prompt-toolkit/#python-prompt-toolkit","text":"\u5982\u4f55\u5b66\u4e60\u548c\u7406\u89e3prompt_toolkit First, learn how to print text. This is important, because it covers how to use \u201cformatted text\u201d, which is something you\u2019ll use whenever you want to use colors anywhere. Secondly, go through the asking for input section. This is useful for almost any use case, even for full screen applications. It covers autocompletions, syntax highlighting, key bindings, and so on. Then, learn about Dialogs, which is easy and fun. Finally, learn about full screen applications and read through the advanced topics.","title":"python-prompt-toolkit"},{"location":"module/python/python-prompt-toolkit/#_1","text":"","title":"\u6253\u5370(\u548c\u4f7f\u7528)\u683c\u5f0f\u5316\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#_2","text":"#from __future__ import unicode_literals from prompt_toolkit import print_formatted_text print_formatted_text ( 'Hello world' )","title":"\u6253\u5370\u7eaf\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#_3","text":"There are several ways to display colors: By creating an HTML object. By creating an ANSI object that contains ANSI escape sequences. By creating a list of (style, text) tuples. By creating a list of (pygments.Token, text) tuples, and wrapping it in PygmentsTokens.","title":"\u683c\u5f0f\u5316\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#html","text":"from __future__ import unicode_literals , print_function from prompt_toolkit import print_formatted_text , HTML print_formatted_text ( HTML ( '<b>This is bold</b>' )) print_formatted_text ( HTML ( '<i>This is italic</i>' )) print_formatted_text ( HTML ( '<u>This is underlined</u>' )) # Colors from the ANSI palette. print_formatted_text ( HTML ( '<ansired>This is red</ansired>' )) print_formatted_text ( HTML ( '<ansigreen>This is green</ansigreen>' )) # Named colors (256 color palette, or true color, depending on the output). print_formatted_text ( HTML ( '<skyblue>This is sky blue</skyblue>' )) print_formatted_text ( HTML ( '<seagreen>This is sea green</seagreen>' )) print_formatted_text ( HTML ( '<violet>This is violet</violet>' )) print_formatted_text ( HTML ( '<aaa fg=\"ansiwhite\" bg=\"ansigreen\">White on green</aaa>' )) from prompt_toolkit.styles import Style style = Style . from_dict ({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text ( HTML ( '<aaa>Hello</aaa> <bbb>world</bbb>!' ), style = style )","title":"HTML"},{"location":"module/python/python-prompt-toolkit/#ansi","text":"from prompt_toolkit import print_formatted_text , ANSI print_formatted_text ( ANSI ( ' \\x1b [31mhello \\x1b [32mworld' ))","title":"ANSI"},{"location":"module/python/python-prompt-toolkit/#style-text-tuples","text":"from __future__ import unicode_literals , print_function from prompt_toolkit import print_formatted_text from prompt_toolkit.formatted_text import FormattedText text = FormattedText ([ ( '#ff0066' , 'Hello' ), ( '' , ' ' ), ( '#44ff00 italic' , 'World' ), ]) print_formatted_text ( text ) from prompt_toolkit.styles import Style # The text. text = FormattedText ([ ( 'class:aaa' , 'Hello' ), ( '' , ' ' ), ( 'class:bbb' , 'World' ), ]) # The style sheet. style = Style . from_dict ({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text ( text , style = style )","title":"(style, text) tuples"},{"location":"module/python/python-prompt-toolkit/#pygments-token-text-tuples","text":"Pygments","title":"Pygments (Token, text) tuples"},{"location":"module/python/python-prompt-toolkit/#to_formatted_text","text":"from prompt_toolkit.formatted_text import to_formatted_text , HTML from prompt_toolkit import print_formatted_text html = HTML ( '<aaa>Hello</aaa> <bbb>world</bbb>!' ) text = to_formatted_text ( html , style = 'class:my_html bg:#00ff00 italic' ) print_formatted_text ( text )","title":"to_formatted_text"},{"location":"module/python/python-prompt-toolkit/#prompts","text":"from prompt_toolkit import prompt text = prompt ( 'Give me some input: ' ) print ( 'You said: %s ' % text )","title":"\u5982\u4f55\u8f93\u5165 (prompts)"},{"location":"module/python/python-prompt-toolkit/#promptsession","text":"prompt\u662fPromptSession\u5b9e\u4f8b\u7684prompt\u65b9\u6cd5 from prompt_toolkit import PromptSession # Create prompt object. session = PromptSession () # Do multiple input calls. text1 = session . prompt () text2 = session . prompt ()","title":"PromptSession \u5bf9\u8c61"},{"location":"module/python/python-prompt-toolkit/#_4","text":"\u4f7f\u7528\u4e86pygments\u8fd9\u4e2a\u5e93\uff0c\u9664\u4e86html\u8fd8\u6709python\uff0cshell\u7b49\u7b49 from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.lexers import PygmentsLexer text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer )) print ( 'You said: %s ' % text )","title":"\u8bed\u6cd5\u9ad8\u4eae"},{"location":"module/python/python-prompt-toolkit/#_5","text":"\u8ddf\u8bed\u6cd5\u9ad8\u4eae\u63a5\u8fd1\uff0c\u4f46\u8fd8\u662f\u6709\u533a\u522b from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style from prompt_toolkit.lexers import PygmentsLexer our_style = Style . from_dict ({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer ), style = our_style )","title":"\u989c\u8272"},{"location":"module/python/python-prompt-toolkit/#pygments-style","text":"All Pygments style classes can be used as well, when they are wrapped through style_from_pygments_cls() from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import style_from_pygments_cls , merge_styles from prompt_toolkit.lexers import PygmentsLexer from pygments.styles.tango import TangoStyle from pygments.lexers.html import HtmlLexer our_style = merge_styles ([ style_from_pygments_cls ( TangoStyle ), Style . from_dict ({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) ]) text = prompt ( 'Enter HTML: ' , lexer = PygmentsLexer ( HtmlLexer ), style = our_style )","title":"\u4f7f\u7528Pygments style"},{"location":"module/python/python-prompt-toolkit/#_6","text":"from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style style = Style . from_dict ({ # User input (default text). '' : '#ff0066' , # Prompt. 'username' : '#884444' , 'at' : '#00aa00' , 'colon' : '#0000aa' , 'pound' : '#00aa00' , 'host' : '#00ffff bg:#444400' , 'path' : 'ansicyan underline' , }) message = [ ( 'class:username' , 'john' ), ( 'class:at' , '@' ), ( 'class:host' , 'localhost' ), ( 'class:colon' , ':' ), ( 'class:path' , '/user/john' ), ( 'class:pound' , '# ' ), ] # If you want to have 24bit true color, this is possible by adding the true_color=True option to the prompt() function. text = prompt ( message , style = style )","title":"\u7740\u8272\u63d0\u793a"},{"location":"module/python/python-prompt-toolkit/#_7","text":"from prompt_toolkit import prompt from prompt_toolkit.completion import WordCompleter html_completer = WordCompleter ([ '<html>' , '<body>' , '<head>' , '<title>' , 'pengweidang' ]) text = prompt ( 'Enter HTML: ' , completer = html_completer ) print ( 'You said: %s ' % text )","title":"\u81ea\u52a8\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_8","text":"from prompt_toolkit.completion import Completer , Completion class MyCustomCompleter ( Completer ): def get_completions ( self , document , complete_event ): # Display this completion, black on yellow. yield Completion ( 'completion1' , start_position = 0 , style = 'bg:ansiyellow fg:ansiblack' ) # Underline completion. yield Completion ( 'completion2' , start_position = 0 , style = 'underline' ) # Specify class name, which will be looked up in the style sheet. yield Completion ( 'completion3' , start_position = 0 , style = 'class:special-completion' ) from prompt_toolkit.completion import Completer , Completion from prompt_toolkit.formatted_text import HTML class MyCustomCompleter ( Completer ): def get_completions ( self , document , complete_event ): yield Completion ( 'completion1' , start_position = 0 , display = HTML ( '<b>completion</b><ansired>1</ansired>' ), style = 'bg:ansiyellow' )","title":"\u4e2a\u6027\u5316\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_9","text":"Prompt_toolkit\u9644\u5e26\u4e86FuzzyCompleter\u548cFuzzyWordCompleter\u7c7b\u3002","title":"\u6a21\u7cca\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#complete-while-typing","text":"\u81ea\u52a8\u8865\u5168\u53ef\u4ee5\u5728\u952e\u5165\u65f6\u6216\u7528\u6237\u6309\u4e0bTab\u952e\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6ce8\u610f\u4f1a\u4e0e\u2018enable_history_search\u2019\u51b2\u7a81\u3002 ext = prompt ( 'Enter HTML: ' , completer = my_completer , complete_while_typing = True )","title":"Complete while typing"},{"location":"module/python/python-prompt-toolkit/#_10","text":"\u5982\u679c\u751f\u6210\u8865\u5168\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6700\u597d\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u3002 text = prompt ( '> ' , completer = MyCustomCompleter (), complete_in_thread = True )","title":"\u5f02\u6b65\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_11","text":"from prompt_toolkit.validation import Validator , ValidationError from prompt_toolkit import prompt class NumberValidator ( Validator ): def validate ( self , document ): text = document . text if text and not text . isdigit (): i = 0 # Get index of fist non numeric character. # We want to move the cursor here. for i , c in enumerate ( text ): if not c . isdigit (): break raise ValidationError ( message = 'This input contains non-numeric characters' , cursor_position = i ) number = int ( prompt ( 'Give a number: ' , validator = NumberValidator ())) print ( 'You said: %i ' % number ) \u5b9e\u65f6\u9a8c\u8bc1\uff1a \u5728prompt\u51fd\u6570\u4e2d\uff0cvalidate_while_typing=True \u901a\u8fc7\u56de\u8c03\u51fd\u6570\u9a8c\u8bc1 from prompt_toolkit.validation import Validator from prompt_toolkit import prompt def is_number ( text ): return text . isdigit () validator = Validator . from_callable ( is_number , error_message = 'This input contains non-numeric characters' , move_cursor_to_end = True ) number = int ( prompt ( 'Give a number: ' , validator = validator )) print ( 'You said: %i ' % number )","title":"\u8f93\u5165\u9a8c\u8bc1"},{"location":"module/python/python-prompt-toolkit/#_12","text":"\u5982\u679c\u9700\u8981\u4fdd\u5b58\u5230\u6587\u4ef6 from prompt_toolkit import PromptSession from prompt_toolkit.history import FileHistory session = PromptSession ( history = FileHistory ( '~/.myhistory' )) while True : session . prompt ()","title":"\u5386\u53f2\u8bb0\u5f55"},{"location":"module/python/python-prompt-toolkit/#_13","text":"\u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u81ea\u52a8\u63d0\u793a from prompt_toolkit import PromptSession from prompt_toolkit.history import InMemoryHistory from prompt_toolkit.auto_suggest import AutoSuggestFromHistory session = PromptSession () while True : text = session . prompt ( '> ' , auto_suggest = AutoSuggestFromHistory ()) print ( 'You said: %s ' % text )","title":"\u81ea\u52a8\u63d0\u793a"},{"location":"module/python/python-prompt-toolkit/#_14","text":"from prompt_toolkit import prompt from prompt_toolkit.styles import Style def bottom_toolbar (): return [( 'class:bottom-toolbar' , ' This is a toolbar. ' )] style = Style . from_dict ({ 'bottom-toolbar' : '#ffffff bg:#333333' , }) text = prompt ( '> ' , bottom_toolbar = bottom_toolbar , style = style ) print ( 'You said: %s ' % text ) \u9ed8\u8ba4\u7684\u7c7b\u540d\u662fbottom-toolbar\uff0c\u5b83\u4e5f\u5c06\u7528\u4e8e\u586b\u5145\u5de5\u5177\u680f\u7684\u80cc\u666f\u3002","title":"\u6dfb\u52a0\u5e95\u90e8\u5de5\u5177\u680f"},{"location":"module/python/python-prompt-toolkit/#prompt","text":"from prompt_toolkit import prompt from prompt_toolkit.styles import Style example_style = Style . from_dict ({ 'rprompt' : 'bg:#ff0066 #ffffff' , }) def get_rprompt (): return '<rprompt>' answer = prompt ( '> ' , rprompt = get_rprompt , style = example_style )","title":"\u6dfb\u52a0\u53f3\u4fa7prompt"},{"location":"module/python/python-prompt-toolkit/#vi","text":"Vi\u6a21\u5f0f from prompt_toolkit import prompt prompt ( '> ' , vi_mode = True )","title":"Vi \u8f93\u5165\u6a21\u5f0f"},{"location":"module/python/python-prompt-toolkit/#_15","text":"from prompt_toolkit import prompt from prompt_toolkit.application import run_in_terminal from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings () @bindings.add ( 'c-t' ) def _ ( event ): \" Say 'hello' when `c-t` is pressed. \" def print_hello (): print ( 'hello world' ) run_in_terminal ( print_hello ) @bindings.add ( 'c-x' ) def _ ( event ): \" Exit when `c-x` is pressed. \" event . app . exit () text = prompt ( '> ' , key_bindings = bindings ) print ( 'You said: %s ' % text )","title":"\u81ea\u5b9a\u4e49\u952e\u7ed1\u5b9a"},{"location":"module/python/python-prompt-toolkit/#_16","text":"import datetime from prompt_toolkit import prompt from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings () @Condition def is_active (): \" Only activate key binding on the second half of each minute. \" return datetime . datetime . now () . second > 30 @bindings.add ( 'c-t' , filter = is_active ) def _ ( event ): # ... pass prompt ( '> ' , key_bindings = bindings )","title":"\u6839\u636e\u6761\u4ef6\u542f\u7528\u952e\u7ed1\u5b9a"},{"location":"module/python/python-prompt-toolkit/#emacsvi","text":"from prompt_toolkit import prompt from prompt_toolkit.application.current import get_app from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings def run (): # Create a set of key bindings. bindings = KeyBindings () # Add an additional key binding for toggling this flag. @bindings.add ( 'f4' ) def _ ( event ): \" Toggle between Emacs and Vi mode. \" app = event . app if app . editing_mode == EditingMode . VI : app . editing_mode = EditingMode . EMACS else : app . editing_mode = EditingMode . VI # Add a toolbar at the bottom to display the current input mode. def bottom_toolbar (): \" Display the current input mode. \" text = 'Vi' if get_app () . editing_mode == EditingMode . VI else 'Emacs' return [ ( 'class:toolbar' , ' [F4] %s ' % text ) ] prompt ( '> ' , key_bindings = bindings , bottom_toolbar = bottom_toolbar ) run ()","title":"\u5728Emacs\u548cVi\u6a21\u5f0f\u4e2d\u52a8\u6001\u5207\u6362"},{"location":"module/python/python-prompt-toolkit/#control-space","text":"link","title":"\u4f7f\u7528control-space\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_17","text":"","title":"\u5176\u4ed6\u9009\u9879"},{"location":"module/python/python-prompt-toolkit/#_18","text":"Meta+Enter \u6216\u8005 Escape\uff0cEnter from prompt_toolkit import prompt prompt ( '> ' , multiline = True ) def prompt_continuation ( width , line_number , is_soft_wrap ): return '.' * width # Or: return [('', '.' * width)] prompt ( 'multiline input> ' , multiline = True , prompt_continuation = prompt_continuation )","title":"\u591a\u884c\u8f93\u5165"},{"location":"module/python/python-prompt-toolkit/#_19","text":"prompt('What is your name: ', default='%s' % getpass.getuser())","title":"\u9ed8\u8ba4\u503c"},{"location":"module/python/python-prompt-toolkit/#_20","text":"\u5149\u6807\u4f4d\u7f6e\u548c\u6eda\u52a8 prompt('What is your name: ', mouse_support=True)","title":"\u9f20\u6807\u652f\u6301"},{"location":"module/python/python-prompt-toolkit/#_21","text":"\u9ed8\u8ba4\u6362\u884c prompt('What is your name: ', wrap_lines=False)","title":"\u6362\u884c"},{"location":"module/python/python-prompt-toolkit/#_22","text":"from prompt_toolkit import prompt prompt ( 'Enter password: ' , is_password = True )","title":"\u5bc6\u7801\u8f93\u5165"},{"location":"module/python/python-prompt-toolkit/#_23","text":"link","title":"\u5f02\u6b65"},{"location":"module/python/python-prompt-toolkit/#dialogs","text":"","title":"Dialogs"},{"location":"module/python/python-prompt-toolkit/#message-box","text":"from prompt_toolkit.shortcuts import message_dialog message_dialog ( title = 'Example dialog window' , text = 'Do you want to continue? \\n Press ENTER to quit.' )","title":"Message box"},{"location":"module/python/python-prompt-toolkit/#input-box","text":"from prompt_toolkit.shortcuts import input_dialog text = input_dialog ( title = 'Input dialog example' , text = 'Please type your password:' , password = True )","title":"Input box"},{"location":"module/python/python-prompt-toolkit/#yesno-dialog","text":"from prompt_toolkit.shortcuts import yes_no_dialog result = yes_no_dialog ( title = 'Yes/No dialog example' , text = 'Do you want to confirm?' )","title":"Yes/No dialog"},{"location":"module/python/python-prompt-toolkit/#button-dialog","text":"from prompt_toolkit.shortcuts import button_dialog result = button_dialog ( title = 'Button dialog example' , text = 'Do you want to confirm?' , buttons = [ ( 'Yes' , True ), ( 'No' , False ), ( 'Maybe...' , None ) ], )","title":"Button dialog"},{"location":"module/python/python-prompt-toolkit/#dialog","text":"from prompt_toolkit.formatted_text import HTML from prompt_toolkit.shortcuts import message_dialog from prompt_toolkit.styles import Style example_style = Style . from_dict ({ 'dialog' : 'bg:#88ff88' , 'dialog frame-label' : 'bg:#ffffff #000000' , 'dialog.body' : 'bg:#000000 #00ff00' , 'dialog shadow' : 'bg:#00aa00' , }) message_dialog ( title = HTML ( '<style bg=\"blue\" fg=\"white\">Styled</style> ' '<style fg=\"ansired\">dialog</style> window' ), text = 'Do you want to continue? \\n Press ENTER to quit.' , style = example_style )","title":"dialog \u6837\u5f0f"},{"location":"module/python/python-prompt-toolkit/#_24","text":"","title":"\u8fdb\u5ea6\u6761"},{"location":"module/python/python-prompt-toolkit/#_25","text":"from prompt_toolkit.shortcuts import ProgressBar import time with ProgressBar () as pb : for i in pb ( range ( 800 )): time . sleep ( . 01 )","title":"\u7b80\u5355\u8fdb\u5ea6\u6761"},{"location":"module/python/python-prompt-toolkit/#_26","text":"from prompt_toolkit.shortcuts import ProgressBar import time import threading with ProgressBar () as pb : # Two parallel tasks. def task_1 (): for i in pb ( range ( 100 )): time . sleep ( . 05 ) def task_2 (): for i in pb ( range ( 150 )): time . sleep ( . 08 ) # Start threads. t1 = threading . Thread ( target = task_1 ) t2 = threading . Thread ( target = task_2 ) t1 . daemon = True t2 . daemon = True t1 . start () t2 . start () # Wait for the threads to finish. We use a timeout for the join() call, # because on Windows, join cannot be interrupted by Control-C or any other # signal. for t in [ t1 , t2 ]: while t . is_alive (): t . join ( timeout =. 5 )","title":"\u591a\u4e2a\u5e76\u884c\u4efb\u52a1"},{"location":"module/python/python-prompt-toolkit/#_27","text":"from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.formatted_text import HTML import time title = HTML ( 'Downloading <style bg=\"yellow\" fg=\"black\">4 files...</style>' ) label = HTML ( '<ansired>some file</ansired>: ' ) with ProgressBar ( title = title ) as pb : for i in pb ( range ( 800 ), label = label ): time . sleep ( . 01 )","title":"\u589e\u52a0\u6807\u9898\u548c\u6807\u7b7e"},{"location":"module/python/python-prompt-toolkit/#_28","text":"\u9ed8\u8ba4style from prompt_toolkit.shortcuts.progress_bar.formatters import * default_formatting = [ Label (), Text ( ' ' ), Percentage (), Text ( ' ' ), Bar (), Text ( ' ' ), Progress (), Text ( ' ' ), Text ( 'eta [' , style = 'class:time-left' ), TimeLeft (), Text ( ']' , style = 'class:time-left' ), Text ( ' ' ), ] from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.styles import Style from prompt_toolkit.shortcuts.progress_bar import formatters import time style = Style . from_dict ({ 'label' : 'bg:#ffff00 #000000' , 'percentage' : 'bg:#ffff00 #000000' , 'current' : '#448844' , 'bar' : '' , }) custom_formatters = [ formatters . Label (), formatters . Text ( ': [' , style = 'class:percentage' ), formatters . Percentage (), formatters . Text ( ']' , style = 'class:percentage' ), formatters . Text ( ' ' ), formatters . Bar ( sym_a = '#' , sym_b = '#' , sym_c = '.' ), formatters . Text ( ' ' ), ] with ProgressBar ( style = style , formatters = custom_formatters ) as pb : for i in pb ( range ( 1600 ), label = 'Installing' ): time . sleep ( . 01 )","title":"\u683c\u5f0f\u5316"},{"location":"module/python/python-prompt-toolkit/#_29","text":"from prompt_toolkit import HTML from prompt_toolkit.key_binding import KeyBindings from prompt_toolkit.patch_stdout import patch_stdout from prompt_toolkit.shortcuts import ProgressBar import time bottom_toolbar = HTML ( ' <b>[f]</b> Print \"f\" <b>[x]</b> Abort.' ) # Create custom key bindings first. kb = KeyBindings () cancel = [ False ] @kb.add ( 'f' ) def _ ( event ): print ( 'You pressed `f`.' ) @kb.add ( 'x' ) def _ ( event ): \" Send Abort (control-c) signal. \" cancel [ 0 ] = True os . kill ( os . getpid (), signal . SIGINT ) # Use `patch_stdout`, to make sure that prints go above the # application. with patch_stdout (): with ProgressBar ( key_bindings = kb , bottom_toolbar = bottom_toolbar ) as pb : for i in pb ( range ( 800 )): time . sleep ( . 01 ) # Stop when the cancel flag has been set. if cancel [ 0 ]: break","title":"\u589e\u52a0\u952e\u7ed1\u5b9a\u548c\u5de5\u5177\u680f"},{"location":"module/python/python-prompt-toolkit/#_30","text":"link","title":"\u6784\u5efa\u5168\u5c4f\u5e94\u7528"}]}